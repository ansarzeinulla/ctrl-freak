{"ast":null,"code":"'use client';\n\nimport { useCallback } from 'react';\nfunction assignRef(ref, value) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  } else if (typeof ref === \"object\" && ref !== null && \"current\" in ref) {\n    ref.current = value;\n  }\n}\nfunction mergeRefs(...refs) {\n  const cleanupMap = /* @__PURE__ */new Map();\n  return node => {\n    refs.forEach(ref => {\n      const cleanup = assignRef(ref, node);\n      if (cleanup) {\n        cleanupMap.set(ref, cleanup);\n      }\n    });\n    if (cleanupMap.size > 0) {\n      return () => {\n        refs.forEach(ref => {\n          const cleanup = cleanupMap.get(ref);\n          if (cleanup && typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            assignRef(ref, null);\n          }\n        });\n        cleanupMap.clear();\n      };\n    }\n  };\n}\nfunction useMergedRef(...refs) {\n  return useCallback(mergeRefs(...refs), refs);\n}\nexport { assignRef, mergeRefs, useMergedRef };","map":{"version":3,"names":["assignRef","ref","value","current","mergeRefs","refs","cleanupMap","Map","node","forEach","cleanup","set","size","get","clear","useMergedRef","useCallback"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-merged-ref/use-merged-ref.ts"],"sourcesContent":["import { Ref, useCallback, type RefCallback } from 'react';\n\ntype PossibleRef<T> = Ref<T> | undefined;\n\ntype RefCleanup<T> = ReturnType<RefCallback<T>>;\n\nexport function assignRef<T>(ref: PossibleRef<T>, value: T): RefCleanup<T> {\n  if (typeof ref === 'function') {\n    return ref(value);\n  } else if (typeof ref === 'object' && ref !== null && 'current' in ref) {\n    ref.current = value;\n  }\n}\n\nexport function mergeRefs<T>(...refs: PossibleRef<T>[]): RefCallback<T> {\n  const cleanupMap = new Map<PossibleRef<T>, Exclude<RefCleanup<T>, void>>();\n\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      const cleanup = assignRef(ref, node);\n      if (cleanup) {\n        cleanupMap.set(ref, cleanup);\n      }\n    });\n\n    if (cleanupMap.size > 0) {\n      return () => {\n        refs.forEach((ref) => {\n          const cleanup = cleanupMap.get(ref);\n          if (cleanup && typeof cleanup === 'function') {\n            cleanup();\n          } else {\n            assignRef(ref, null);\n          }\n        });\n        cleanupMap.clear();\n      };\n    }\n  };\n}\n\nexport function useMergedRef<T>(...refs: PossibleRef<T>[]) {\n  return useCallback(mergeRefs(...refs), refs);\n}\n"],"mappings":";;;AAMO,SAASA,UAAaC,GAAA,EAAqBC,KAAA,EAAyB;EACzE,IAAI,OAAOD,GAAA,KAAQ,YAAY;IAC7B,OAAOA,GAAA,CAAIC,KAAK;EAClB,WAAW,OAAOD,GAAA,KAAQ,YAAYA,GAAA,KAAQ,QAAQ,aAAaA,GAAA,EAAK;IACtEA,GAAA,CAAIE,OAAA,GAAUD,KAAA;EAChB;AACF;AAEO,SAASE,UAAA,GAAgBC,IAAA,EAAwC;EACtE,MAAMC,UAAA,sBAAiBC,GAAA,EAAkD;EAEzE,OAAQC,IAAA,IAAmB;IACzBH,IAAA,CAAKI,OAAA,CAASR,GAAA,IAAQ;MACpB,MAAMS,OAAA,GAAUV,SAAA,CAAUC,GAAA,EAAKO,IAAI;MACnC,IAAIE,OAAA,EAAS;QACXJ,UAAA,CAAWK,GAAA,CAAIV,GAAA,EAAKS,OAAO;MAC7B;IACF,CAAC;IAED,IAAIJ,UAAA,CAAWM,IAAA,GAAO,GAAG;MACvB,OAAO,MAAM;QACXP,IAAA,CAAKI,OAAA,CAASR,GAAA,IAAQ;UACpB,MAAMS,OAAA,GAAUJ,UAAA,CAAWO,GAAA,CAAIZ,GAAG;UAClC,IAAIS,OAAA,IAAW,OAAOA,OAAA,KAAY,YAAY;YAC5CA,OAAA,EAAQ;UACV,OAAO;YACLV,SAAA,CAAUC,GAAA,EAAK,IAAI;UACrB;QACF,CAAC;QACDK,UAAA,CAAWQ,KAAA,EAAM;MACnB;IACF;EACF;AACF;AAEO,SAASC,aAAA,GAAmBV,IAAA,EAAwB;EACzD,OAAOW,WAAA,CAAYZ,SAAA,CAAU,GAAGC,IAAI,GAAGA,IAAI;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}