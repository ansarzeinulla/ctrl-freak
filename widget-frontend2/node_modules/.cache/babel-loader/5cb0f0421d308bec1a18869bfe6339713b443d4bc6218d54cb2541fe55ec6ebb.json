{"ast":null,"code":"'use client';\n\nfunction findTreeNode(value, data) {\n  for (const node of data) {\n    if (node.value === value) {\n      return node;\n    }\n    if (Array.isArray(node.children)) {\n      const childNode = findTreeNode(value, node.children);\n      if (childNode) {\n        return childNode;\n      }\n    }\n  }\n  return null;\n}\nfunction getChildrenNodesValues(value, data, acc = []) {\n  const node = findTreeNode(value, data);\n  if (!node) {\n    return acc;\n  }\n  if (!Array.isArray(node.children) || node.children.length === 0) {\n    return [node.value];\n  }\n  node.children.forEach(child => {\n    if (Array.isArray(child.children) && child.children.length > 0) {\n      getChildrenNodesValues(child.value, data, acc);\n    } else {\n      acc.push(child.value);\n    }\n  });\n  return acc;\n}\nfunction getAllChildrenNodes(data) {\n  return data.reduce((acc, node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      acc.push(...getAllChildrenNodes(node.children));\n    } else {\n      acc.push(node.value);\n    }\n    return acc;\n  }, []);\n}\nexport { findTreeNode, getAllChildrenNodes, getChildrenNodesValues };","map":{"version":3,"names":["findTreeNode","value","data","node","Array","isArray","children","childNode","getChildrenNodesValues","acc","length","forEach","child","push","getAllChildrenNodes","reduce"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Tree/get-children-nodes-values/get-children-nodes-values.ts"],"sourcesContent":["import type { TreeNodeData } from '../Tree';\n\nexport function findTreeNode(value: string, data: TreeNodeData[]): TreeNodeData | null {\n  for (const node of data) {\n    if (node.value === value) {\n      return node;\n    }\n\n    if (Array.isArray(node.children)) {\n      const childNode = findTreeNode(value, node.children);\n      if (childNode) {\n        return childNode;\n      }\n    }\n  }\n\n  return null;\n}\n\n// Returns values for all nested nodes which do not have children\nexport function getChildrenNodesValues(\n  value: string,\n  data: TreeNodeData[],\n  acc: string[] = []\n): string[] {\n  const node = findTreeNode(value, data);\n  if (!node) {\n    return acc;\n  }\n\n  if (!Array.isArray(node.children) || node.children.length === 0) {\n    return [node.value];\n  }\n\n  node.children.forEach((child) => {\n    if (Array.isArray(child.children) && child.children.length > 0) {\n      getChildrenNodesValues(child.value, data, acc);\n    } else {\n      acc.push(child.value);\n    }\n  });\n\n  return acc;\n}\n\nexport function getAllChildrenNodes(data: TreeNodeData[]) {\n  return data.reduce((acc, node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      acc.push(...getAllChildrenNodes(node.children));\n    } else {\n      acc.push(node.value);\n    }\n\n    return acc;\n  }, [] as string[]);\n}\n"],"mappings":";;AAEO,SAASA,aAAaC,KAAA,EAAeC,IAAA,EAA2C;EACrF,WAAWC,IAAA,IAAQD,IAAA,EAAM;IACvB,IAAIC,IAAA,CAAKF,KAAA,KAAUA,KAAA,EAAO;MACxB,OAAOE,IAAA;IACT;IAEA,IAAIC,KAAA,CAAMC,OAAA,CAAQF,IAAA,CAAKG,QAAQ,GAAG;MAChC,MAAMC,SAAA,GAAYP,YAAA,CAAaC,KAAA,EAAOE,IAAA,CAAKG,QAAQ;MACnD,IAAIC,SAAA,EAAW;QACb,OAAOA,SAAA;MACT;IACF;EACF;EAEA,OAAO;AACT;AAGO,SAASC,uBACdP,KAAA,EACAC,IAAA,EACAO,GAAA,GAAgB,EAAC,EACP;EACV,MAAMN,IAAA,GAAOH,YAAA,CAAaC,KAAA,EAAOC,IAAI;EACrC,IAAI,CAACC,IAAA,EAAM;IACT,OAAOM,GAAA;EACT;EAEA,IAAI,CAACL,KAAA,CAAMC,OAAA,CAAQF,IAAA,CAAKG,QAAQ,KAAKH,IAAA,CAAKG,QAAA,CAASI,MAAA,KAAW,GAAG;IAC/D,OAAO,CAACP,IAAA,CAAKF,KAAK;EACpB;EAEAE,IAAA,CAAKG,QAAA,CAASK,OAAA,CAASC,KAAA,IAAU;IAC/B,IAAIR,KAAA,CAAMC,OAAA,CAAQO,KAAA,CAAMN,QAAQ,KAAKM,KAAA,CAAMN,QAAA,CAASI,MAAA,GAAS,GAAG;MAC9DF,sBAAA,CAAuBI,KAAA,CAAMX,KAAA,EAAOC,IAAA,EAAMO,GAAG;IAC/C,OAAO;MACLA,GAAA,CAAII,IAAA,CAAKD,KAAA,CAAMX,KAAK;IACtB;EACF,CAAC;EAED,OAAOQ,GAAA;AACT;AAEO,SAASK,oBAAoBZ,IAAA,EAAsB;EACxD,OAAOA,IAAA,CAAKa,MAAA,CAAO,CAACN,GAAA,EAAKN,IAAA,KAAS;IAChC,IAAIC,KAAA,CAAMC,OAAA,CAAQF,IAAA,CAAKG,QAAQ,KAAKH,IAAA,CAAKG,QAAA,CAASI,MAAA,GAAS,GAAG;MAC5DD,GAAA,CAAII,IAAA,CAAK,GAAGC,mBAAA,CAAoBX,IAAA,CAAKG,QAAQ,CAAC;IAChD,OAAO;MACLG,GAAA,CAAII,IAAA,CAAKV,IAAA,CAAKF,KAAK;IACrB;IAEA,OAAOQ,GAAA;EACT,GAAG,EAAc;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}