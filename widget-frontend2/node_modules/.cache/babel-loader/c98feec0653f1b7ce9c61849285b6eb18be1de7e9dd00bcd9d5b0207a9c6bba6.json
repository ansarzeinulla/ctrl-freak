{"ast":null,"code":"'use client';\n\nimport { cloneElement } from 'react';\nimport cx from 'clsx';\nimport { useMergedRef } from '@mantine/hooks';\nimport '../../../core/utils/units-converters/rem.mjs';\nimport { isElement } from '../../../core/utils/is-element/is-element.mjs';\nimport 'react/jsx-runtime';\nimport { getRefProp } from '../../../core/utils/get-ref-prop/get-ref-prop.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { usePopoverContext } from '../Popover.context.mjs';\nconst defaultProps = {\n  refProp: \"ref\",\n  popupType: \"dialog\"\n};\nconst PopoverTarget = factory((props, ref) => {\n  const {\n    children,\n    refProp,\n    popupType,\n    ...others\n  } = useProps(\"PopoverTarget\", defaultProps, props);\n  if (!isElement(children)) {\n    throw new Error(\"Popover.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const forwardedProps = others;\n  const ctx = usePopoverContext();\n  const targetRef = useMergedRef(ctx.reference, getRefProp(children), ref);\n  const accessibleProps = ctx.withRoles ? {\n    \"aria-haspopup\": popupType,\n    \"aria-expanded\": ctx.opened,\n    \"aria-controls\": ctx.getDropdownId(),\n    id: ctx.getTargetId()\n  } : {};\n  return cloneElement(children, {\n    ...forwardedProps,\n    ...accessibleProps,\n    ...ctx.targetProps,\n    className: cx(ctx.targetProps.className, forwardedProps.className, children.props.className),\n    [refProp]: targetRef,\n    ...(!ctx.controlled ? {\n      onClick: () => {\n        ctx.onToggle();\n        children.props.onClick?.();\n      }\n    } : null)\n  });\n});\nPopoverTarget.displayName = \"@mantine/core/PopoverTarget\";\nexport { PopoverTarget };","map":{"version":3,"names":["defaultProps","refProp","popupType","PopoverTarget","factory","props","ref","children","others","useProps","isElement","Error","forwardedProps","ctx","usePopoverContext","targetRef","useMergedRef","reference","getRefProp","accessibleProps","withRoles","opened","getDropdownId","id","getTargetId","cloneElement","targetProps","className","cx","controlled","onClick","onToggle","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Popover/PopoverTarget/PopoverTarget.tsx"],"sourcesContent":["import { cloneElement } from 'react';\nimport cx from 'clsx';\nimport { useMergedRef } from '@mantine/hooks';\nimport { factory, Factory, getRefProp, isElement, useProps } from '../../../core';\nimport { usePopoverContext } from '../Popover.context';\n\nexport interface PopoverTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n\n  /** Popup accessible type @default `'dialog'` */\n  popupType?: string;\n}\n\nconst defaultProps = {\n  refProp: 'ref',\n  popupType: 'dialog',\n} satisfies Partial<PopoverTargetProps>;\n\nexport type PopoverTargetFactory = Factory<{\n  props: PopoverTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const PopoverTarget = factory<PopoverTargetFactory>((props, ref) => {\n  const { children, refProp, popupType, ...others } = useProps(\n    'PopoverTarget',\n    defaultProps,\n    props\n  );\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Popover.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const forwardedProps: any = others;\n  const ctx = usePopoverContext();\n  const targetRef = useMergedRef(ctx.reference, getRefProp(children), ref);\n\n  const accessibleProps = ctx.withRoles\n    ? {\n        'aria-haspopup': popupType,\n        'aria-expanded': ctx.opened,\n        'aria-controls': ctx.getDropdownId(),\n        id: ctx.getTargetId(),\n      }\n    : {};\n\n  return cloneElement(children, {\n    ...forwardedProps,\n    ...accessibleProps,\n    ...ctx.targetProps,\n    className: cx(\n      ctx.targetProps.className,\n      forwardedProps.className,\n      (children.props as any).className\n    ),\n    [refProp]: targetRef,\n    ...(!ctx.controlled\n      ? {\n          onClick: () => {\n            ctx.onToggle();\n            (children.props as any).onClick?.();\n          },\n        }\n      : null),\n  });\n});\n\nPopoverTarget.displayName = '@mantine/core/PopoverTarget';\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAiBA,MAAMA,YAAA,GAAe;EACnBC,OAAA,EAAS;EACTC,SAAA,EAAW;AACb;AAQO,MAAMC,aAAA,GAAgBC,OAAA,CAA8B,CAACC,KAAA,EAAOC,GAAA,KAAQ;EACzE,MAAM;IAAEC,QAAA;IAAUN,OAAA;IAASC,SAAA;IAAW,GAAGM;EAAA,CAAO,GAAIC,QAAA,CAClD,iBACAT,YAAA,EACAK,KAAA,CACF;EAEA,IAAI,CAACK,SAAA,CAAUH,QAAQ,GAAG;IACxB,MAAM,IAAII,KAAA,CACR,mKACF;EACF;EAEA,MAAMC,cAAA,GAAsBJ,MAAA;EAC5B,MAAMK,GAAA,GAAMC,iBAAA,EAAkB;EAC9B,MAAMC,SAAA,GAAYC,YAAA,CAAaH,GAAA,CAAII,SAAA,EAAWC,UAAA,CAAWX,QAAQ,GAAGD,GAAG;EAEvE,MAAMa,eAAA,GAAkBN,GAAA,CAAIO,SAAA,GACxB;IACE,iBAAiBlB,SAAA;IACjB,iBAAiBW,GAAA,CAAIQ,MAAA;IACrB,iBAAiBR,GAAA,CAAIS,aAAA,EAAc;IACnCC,EAAA,EAAIV,GAAA,CAAIW,WAAA;EAAY,IAEtB,EAAC;EAEL,OAAOC,YAAA,CAAalB,QAAA,EAAU;IAC5B,GAAGK,cAAA;IACH,GAAGO,eAAA;IACH,GAAGN,GAAA,CAAIa,WAAA;IACPC,SAAA,EAAWC,EAAA,CACTf,GAAA,CAAIa,WAAA,CAAYC,SAAA,EAChBf,cAAA,CAAee,SAAA,EACdpB,QAAA,CAASF,KAAA,CAAcsB,SAAA,CAC1B;IACA,CAAC1B,OAAO,GAAGc,SAAA;IACX,IAAI,CAACF,GAAA,CAAIgB,UAAA,GACL;MACEC,OAAA,EAASA,CAAA,KAAM;QACbjB,GAAA,CAAIkB,QAAA,EAAS;QACZxB,QAAA,CAASF,KAAA,CAAcyB,OAAA,IAAU;MACpC;IAAA,CACF,GACA;EAAA,CACL;AACH,CAAC;AAED3B,aAAA,CAAc6B,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}