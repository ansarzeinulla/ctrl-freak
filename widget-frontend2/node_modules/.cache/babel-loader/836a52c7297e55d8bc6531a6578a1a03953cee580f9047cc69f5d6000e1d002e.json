{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport '../../../core/utils/units-converters/rem.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Transition } from '../../Transition/Transition.mjs';\nimport { useSliderContext } from '../Slider.context.mjs';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    onKeyDownCapture,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    isHovered,\n    children = null,\n    disabled\n  } = _ref;\n  const {\n    getStyles\n  } = useSliderContext();\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover && isHovered;\n  return /* @__PURE__ */jsxs(Box, _objectSpread(_objectSpread({\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    __vars: {\n      \"--slider-thumb-offset\": \"\".concat(position, \"%\")\n    }\n  }, getStyles(\"thumb\", {\n    focusable: true\n  })), {}, {\n    mod: {\n      dragging,\n      disabled\n    },\n    onFocus: event => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus(event);\n    },\n    onBlur: event => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur(event);\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onKeyDownCapture,\n    onClick: event => event.stopPropagation(),\n    children: [children, /* @__PURE__ */jsx(Transition, _objectSpread(_objectSpread({\n      mounted: label != null && !!isVisible,\n      transition: \"fade\",\n      duration: 0\n    }, labelTransitionProps), {}, {\n      children: transitionStyles => /* @__PURE__ */jsx(\"div\", _objectSpread(_objectSpread({}, getStyles(\"label\", {\n        style: transitionStyles\n      })), {}, {\n        children: label\n      }))\n    }))]\n  }));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"names":["Thumb","forwardRef","_ref","ref","max","min","value","position","label","dragging","onMouseDown","onKeyDownCapture","labelTransitionProps","labelAlwaysOn","thumbLabel","onFocus","onBlur","showLabelOnHover","isHovered","children","disabled","getStyles","useSliderContext","focused","setFocused","useState","isVisible","jsxs","Box","_objectSpread","tabIndex","role","__vars","concat","focusable","mod","event","onTouchStart","onClick","stopPropagation","jsx","Transition","mounted","transition","duration","transitionStyles","style","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Slider/Thumb/Thumb.tsx"],"sourcesContent":["import { forwardRef, useState } from 'react';\nimport { Box } from '../../../core';\nimport { Transition, TransitionOverride } from '../../Transition';\nimport { useSliderContext } from '../Slider.context';\n\nexport interface ThumbProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'value'> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  label: React.ReactNode;\n  onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onMouseDown?: (event: any) => void;\n  labelTransitionProps: TransitionOverride | undefined;\n  labelAlwaysOn: boolean | undefined;\n  thumbLabel: string | undefined;\n  showLabelOnHover: boolean | undefined;\n  isHovered?: boolean;\n  children?: React.ReactNode;\n  disabled: boolean | undefined;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      onKeyDownCapture,\n      labelTransitionProps,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      isHovered,\n      children = null,\n      disabled,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { getStyles } = useSliderContext();\n\n    const [focused, setFocused] = useState(false);\n\n    const isVisible = labelAlwaysOn || dragging || focused || (showLabelOnHover && isHovered);\n\n    return (\n      <Box<'div'>\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        __vars={{ '--slider-thumb-offset': `${position}%` }}\n        {...getStyles('thumb', { focusable: true })}\n        mod={{ dragging, disabled }}\n        onFocus={(event) => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus(event);\n        }}\n        onBlur={(event) => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur(event);\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onKeyDownCapture={onKeyDownCapture}\n        onClick={(event) => event.stopPropagation()}\n      >\n        {children}\n        <Transition\n          mounted={label != null && !!isVisible}\n          transition=\"fade\"\n          duration={0}\n          {...labelTransitionProps}\n        >\n          {(transitionStyles) => (\n            <div {...getStyles('label', { style: transitionStyles })}>{label}</div>\n          )}\n        </Transition>\n      </Box>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"],"mappings":";;;;;;;;;;;;;;;;;AAyBO,MAAMA,KAAA,GAAQC,UAAA,CACnB,CAAAC,IAAA,EAoBEC,GAAA,KACG;EAAA,IApBH;IACEC,GAAA;IACAC,GAAA;IACAC,KAAA;IACAC,QAAA;IACAC,KAAA;IACAC,QAAA;IACAC,WAAA;IACAC,gBAAA;IACAC,oBAAA;IACAC,aAAA;IACAC,UAAA;IACAC,OAAA;IACAC,MAAA;IACAC,gBAAA;IACAC,SAAA;IACAC,QAAA,GAAW;IACXC;EAAA,IAAAlB,IAAA;EAIF,MAAM;IAAEmB;EAAA,CAAU,GAAIC,gBAAA,EAAiB;EAEvC,MAAM,CAACC,OAAA,EAASC,UAAU,IAAIC,QAAA,CAAS,KAAK;EAE5C,MAAMC,SAAA,GAAYb,aAAA,IAAiBJ,QAAA,IAAYc,OAAA,IAAYN,gBAAA,IAAoBC,SAAA;EAE/E,sBACES,IAAA,CAACC,GAAA,EAAAC,aAAA,CAAAA,aAAA;IACCC,QAAA,EAAU;IACVC,IAAA,EAAK;IACL,cAAYjB,UAAA;IACZ,iBAAeV,GAAA;IACf,iBAAeC,GAAA;IACf,iBAAeC,KAAA;IACfH,GAAA;IACA6B,MAAA,EAAQ;MAAE,4BAAAC,MAAA,CAA4B1B,QAAQ;IAAA;EAAI,GAC9Cc,SAAA,CAAU,SAAS;IAAEa,SAAA,EAAW;EAAA,CAAM;IAC1CC,GAAA,EAAK;MAAE1B,QAAA;MAAUW;IAAA,CAAS;IAC1BL,OAAA,EAAUqB,KAAA,IAAU;MAClBZ,UAAA,CAAW,IAAI;MACf,OAAOT,OAAA,KAAY,cAAcA,OAAA,CAAQqB,KAAK;IAChD;IACApB,MAAA,EAASoB,KAAA,IAAU;MACjBZ,UAAA,CAAW,KAAK;MAChB,OAAOR,MAAA,KAAW,cAAcA,MAAA,CAAOoB,KAAK;IAC9C;IACAC,YAAA,EAAc3B,WAAA;IACdA,WAAA;IACAC,gBAAA;IACA2B,OAAA,EAAUF,KAAA,IAAUA,KAAA,CAAMG,eAAA,EAAgB;IAEzCpB,QAAA,GAAAA,QAAA,iBACDqB,GAAA,CAACC,UAAA,EAAAZ,aAAA,CAAAA,aAAA;MACCa,OAAA,EAASlC,KAAA,IAAS,QAAQ,CAAC,CAACkB,SAAA;MAC5BiB,UAAA,EAAW;MACXC,QAAA,EAAU;IAAA,GACNhC,oBAAA;MAEHO,QAAA,EAAC0B,gBAAA,mBACAL,GAAA,CAAC,OAAAX,aAAA,CAAAA,aAAA,KAAQR,SAAA,CAAU,SAAS;QAAEyB,KAAA,EAAOD;MAAA,CAAkB;QAAI1B,QAAA,EAAAX;MAAA,EAAM;IAAA;EAErE,GACF;AAEJ,CACF;AAEAR,KAAA,CAAM+C,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}