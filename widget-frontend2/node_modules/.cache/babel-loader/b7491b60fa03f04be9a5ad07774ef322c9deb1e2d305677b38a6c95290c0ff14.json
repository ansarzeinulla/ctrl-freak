{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { useRef, useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport '../Combobox/ComboboxHiddenInput/ComboboxHiddenInput.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Pill } from '../Pill/Pill.mjs';\nimport '../Pill/PillGroup/PillGroup.mjs';\nimport { PillsInput } from '../PillsInput/PillsInput.mjs';\nimport '../PillsInput/PillsInputField/PillsInputField.mjs';\nimport { filterPickedValues } from './filter-picked-values.mjs';\nconst defaultProps = {\n  maxValues: Infinity,\n  withCheckIcon: true,\n  checkIconPosition: \"left\",\n  hiddenInputValuesDivider: \",\",\n  clearSearchOnChange: true,\n  size: \"sm\"\n};\nconst MultiSelect = factory((_props, ref) => {\n  const props = useProps(\"MultiSelect\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    onFocus,\n    onBlur,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    maxValues,\n    searchable,\n    nothingFoundMessage,\n    withCheckIcon,\n    checkIconPosition,\n    hidePickedOptions,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    placeholder,\n    hiddenInputValuesDivider,\n    required,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    chevronColor,\n    attributes,\n    clearSearchOnChange,\n    ...others\n  } = props;\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const retainedSelectedOptions = useRef({});\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    }\n  });\n  const {\n    styleProps,\n    rest: {\n      type,\n      autoComplete,\n      ...rest\n    }\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange\n  });\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: \"\",\n    onChange: onSearchChange\n  });\n  const handleSearchChange = value2 => {\n    setSearchValue(value2);\n    combobox.resetSelectedOption();\n  };\n  const getStyles = useStyles({\n    name: \"MultiSelect\",\n    classes: {},\n    props,\n    classNames,\n    styles,\n    unstyled,\n    attributes\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  const handleInputKeydown = event => {\n    onKeyDown?.(event);\n    if (event.key === \" \" && !searchable) {\n      event.preventDefault();\n      combobox.toggleDropdown();\n    }\n    if (event.key === \"Backspace\" && _searchValue.length === 0 && _value.length > 0) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n  const values = _value.map((item, index) => {\n    const optionData = optionsLockup[item] || retainedSelectedOptions.current[item];\n    return /* @__PURE__ */jsx(Pill, {\n      withRemoveButton: !readOnly && !optionsLockup[item]?.disabled,\n      onRemove: () => {\n        setValue(_value.filter(i => item !== i));\n        onRemove?.(item);\n      },\n      unstyled,\n      disabled,\n      ...getStyles(\"pill\"),\n      children: optionData?.label || item\n    }, `${item}-${index}`);\n  });\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _searchValue]);\n  useEffect(() => {\n    _value.forEach(val => {\n      if (val in optionsLockup) {\n        retainedSelectedOptions.current[val] = optionsLockup[val];\n      }\n    });\n  }, [optionsLockup, _value]);\n  const clearButton = /* @__PURE__ */jsx(Combobox.ClearButton, {\n    ...clearButtonProps,\n    onClear: () => {\n      onClear?.();\n      setValue([]);\n      handleSearchChange(\"\");\n    }\n  });\n  const filteredData = filterPickedValues({\n    data: parsedData,\n    value: _value\n  });\n  const _clearable = clearable && _value.length > 0 && !disabled && !readOnly;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsxs(Combobox, {\n      store: combobox,\n      classNames: resolvedClassNames,\n      styles: resolvedStyles,\n      unstyled,\n      size,\n      readOnly,\n      __staticSelector: \"MultiSelect\",\n      attributes,\n      onOptionSubmit: val => {\n        onOptionSubmit?.(val);\n        if (clearSearchOnChange) {\n          handleSearchChange(\"\");\n        }\n        combobox.updateSelectedOptionIndex(\"selected\");\n        if (_value.includes(optionsLockup[val].value)) {\n          setValue(_value.filter(v => v !== optionsLockup[val].value));\n          onRemove?.(optionsLockup[val].value);\n        } else if (_value.length < maxValues) {\n          setValue([..._value, optionsLockup[val].value]);\n        }\n      },\n      ...comboboxProps,\n      children: [/* @__PURE__ */jsx(Combobox.DropdownTarget, {\n        children: /* @__PURE__ */jsx(PillsInput, {\n          ...styleProps,\n          __staticSelector: \"MultiSelect\",\n          classNames: resolvedClassNames,\n          styles: resolvedStyles,\n          unstyled,\n          size,\n          className,\n          style,\n          variant,\n          disabled,\n          radius,\n          __defaultRightSection: /* @__PURE__ */jsx(Combobox.Chevron, {\n            size,\n            error,\n            unstyled,\n            color: chevronColor\n          }),\n          __clearSection: clearButton,\n          __clearable: _clearable,\n          rightSection,\n          rightSectionPointerEvents: rightSectionPointerEvents || \"none\",\n          rightSectionWidth,\n          rightSectionProps,\n          leftSection,\n          leftSectionWidth,\n          leftSectionPointerEvents,\n          leftSectionProps,\n          inputContainer,\n          inputWrapperOrder,\n          withAsterisk,\n          labelProps,\n          descriptionProps,\n          errorProps,\n          wrapperProps,\n          description,\n          label,\n          error,\n          withErrorStyles,\n          __stylesApiProps: {\n            ...props,\n            rightSectionPointerEvents: rightSectionPointerEvents || (_clearable ? \"all\" : \"none\"),\n            multiline: true\n          },\n          pointer: !searchable,\n          onClick: () => searchable ? combobox.openDropdown() : combobox.toggleDropdown(),\n          \"data-expanded\": combobox.dropdownOpened || void 0,\n          id: _id,\n          required,\n          mod,\n          attributes,\n          children: /* @__PURE__ */jsxs(Pill.Group, {\n            attributes,\n            disabled,\n            unstyled,\n            ...getStyles(\"pillsList\"),\n            children: [values, /* @__PURE__ */jsx(Combobox.EventsTarget, {\n              autoComplete,\n              children: /* @__PURE__ */jsx(PillsInput.Field, {\n                ...rest,\n                ref,\n                id: _id,\n                placeholder,\n                type: !searchable && !placeholder ? \"hidden\" : \"visible\",\n                ...getStyles(\"inputField\"),\n                unstyled,\n                onFocus: event => {\n                  onFocus?.(event);\n                  searchable && combobox.openDropdown();\n                },\n                onBlur: event => {\n                  onBlur?.(event);\n                  combobox.closeDropdown();\n                  handleSearchChange(\"\");\n                },\n                onKeyDown: handleInputKeydown,\n                value: _searchValue,\n                onChange: event => {\n                  handleSearchChange(event.currentTarget.value);\n                  searchable && combobox.openDropdown();\n                  selectFirstOptionOnChange && combobox.selectFirstOption();\n                },\n                disabled,\n                readOnly: readOnly || !searchable,\n                pointer: !searchable\n              })\n            })]\n          })\n        })\n      }), /* @__PURE__ */jsx(OptionsDropdown, {\n        data: hidePickedOptions ? filteredData : parsedData,\n        hidden: readOnly || disabled,\n        filter,\n        search: _searchValue,\n        limit,\n        hiddenWhenEmpty: !nothingFoundMessage,\n        withScrollArea,\n        maxDropdownHeight,\n        filterOptions: searchable,\n        value: _value,\n        checkIconPosition,\n        withCheckIcon,\n        nothingFoundMessage,\n        unstyled,\n        labelId: label ? `${_id}-label` : void 0,\n        \"aria-label\": label ? void 0 : others[\"aria-label\"],\n        renderOption,\n        scrollAreaProps\n      })]\n    }), /* @__PURE__ */jsx(Combobox.HiddenInput, {\n      name,\n      valuesDivider: hiddenInputValuesDivider,\n      value: _value,\n      form,\n      disabled,\n      ...hiddenInputProps\n    })]\n  });\n});\nMultiSelect.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nMultiSelect.displayName = \"@mantine/core/MultiSelect\";\nexport { MultiSelect };","map":{"version":3,"names":["defaultProps","maxValues","Infinity","withCheckIcon","checkIconPosition","hiddenInputValuesDivider","clearSearchOnChange","size","MultiSelect","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","value","defaultValue","onChange","onKeyDown","variant","data","dropdownOpened","defaultDropdownOpened","onDropdownOpen","onDropdownClose","selectFirstOptionOnChange","onOptionSubmit","comboboxProps","filter","limit","withScrollArea","maxDropdownHeight","searchValue","defaultSearchValue","onSearchChange","readOnly","disabled","onFocus","onBlur","radius","rightSection","rightSectionWidth","rightSectionPointerEvents","rightSectionProps","leftSection","leftSectionWidth","leftSectionPointerEvents","leftSectionProps","inputContainer","inputWrapperOrder","withAsterisk","labelProps","descriptionProps","errorProps","wrapperProps","description","label","error","searchable","nothingFoundMessage","hidePickedOptions","withErrorStyles","name","form","id","clearable","clearButtonProps","hiddenInputProps","placeholder","required","mod","renderOption","onRemove","onClear","scrollAreaProps","chevronColor","attributes","others","_id","useId","parsedData","getParsedComboboxData","optionsLockup","getOptionsLockup","retainedSelectedOptions","useRef","combobox","useCombobox","opened","defaultOpened","resetSelectedOption","styleProps","rest","type","autoComplete","extractStyleProps","_value","setValue","useUncontrolled","finalValue","_searchValue","setSearchValue","handleSearchChange","value2","getStyles","useStyles","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","handleInputKeydown","event","key","preventDefault","toggleDropdown","length","slice","values","map","item","index","optionData","current","jsx","Pill","withRemoveButton","i","children","useEffect","selectFirstOption","forEach","val","clearButton","Combobox","ClearButton","filteredData","filterPickedValues","_clearable","jsxs","Fragment","store","__staticSelector","updateSelectedOptionIndex","includes","v","DropdownTarget","PillsInput","__defaultRightSection","Chevron","color","__clearSection","__clearable","__stylesApiProps","multiline","pointer","onClick","openDropdown","Group","EventsTarget","Field","closeDropdown","currentTarget","OptionsDropdown","hidden","search","hiddenWhenEmpty","filterOptions","labelId","HiddenInput","valuesDivider","InputBase","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/MultiSelect/MultiSelect.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport {\n  Combobox,\n  ComboboxItem,\n  ComboboxLikeProps,\n  ComboboxLikeRenderOptionInput,\n  ComboboxLikeStylesNames,\n  getOptionsLockup,\n  getParsedComboboxData,\n  OptionsDropdown,\n  useCombobox,\n} from '../Combobox';\nimport { __BaseInputProps, __InputStylesNames, InputClearButtonProps } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { Pill } from '../Pill';\nimport { PillsInput } from '../PillsInput';\nimport { ScrollAreaProps } from '../ScrollArea';\nimport { filterPickedValues } from './filter-picked-values';\n\nexport type MultiSelectStylesNames =\n  | __InputStylesNames\n  | ComboboxLikeStylesNames\n  | 'pill'\n  | 'pillsList'\n  | 'inputField';\n\nexport interface MultiSelectProps\n  extends BoxProps,\n    __BaseInputProps,\n    ComboboxLikeProps,\n    StylesApiProps<MultiSelectFactory>,\n    ElementProps<'input', 'size' | 'value' | 'defaultValue' | 'onChange'> {\n  /** Controlled component value */\n  value?: string[];\n\n  /** Uncontrolled component default value */\n  defaultValue?: string[];\n\n  /** Called when value changes */\n  onChange?: (value: string[]) => void;\n\n  /** Called with `value` of the removed item */\n  onRemove?: (value: string) => void;\n\n  /** Called when the clear button is clicked */\n  onClear?: () => void;\n\n  /** Controlled search value */\n  searchValue?: string;\n\n  /** Default search value */\n  defaultSearchValue?: string;\n\n  /** Called when search changes */\n  onSearchChange?: (value: string) => void;\n\n  /** Maximum number of values, no limit if not set */\n  maxValues?: number;\n\n  /** Allows searching @default `false` */\n  searchable?: boolean;\n\n  /** Message displayed when no option matches the current search query while the `searchable` prop is set or there is no data */\n  nothingFoundMessage?: React.ReactNode;\n\n  /** If set, the check icon is displayed near the selected option label @default `true` */\n  withCheckIcon?: boolean;\n\n  /** Position of the check icon relative to the option label @default `'left'` */\n  checkIconPosition?: 'left' | 'right';\n\n  /** If set, picked options are removed from the options list @default `false` */\n  hidePickedOptions?: boolean;\n\n  /** If set, the clear button is displayed in the right section when the component has value @default `false` */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: InputClearButtonProps;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: Omit<React.ComponentPropsWithoutRef<'input'>, 'value'>;\n\n  /** Divider used to separate values in the hidden input `value` attribute @default `','` */\n  hiddenInputValuesDivider?: string;\n\n  /** A function to render content of the option, replaces the default content of the option */\n  renderOption?: (item: ComboboxLikeRenderOptionInput<ComboboxItem>) => React.ReactNode;\n\n  /** Props passed down to the underlying `ScrollArea` component in the dropdown */\n  scrollAreaProps?: ScrollAreaProps;\n\n  /** Controls color of the default chevron */\n  chevronColor?: MantineColor;\n\n  /** Clear search value when item is selected */\n  clearSearchOnChange?: boolean;\n}\n\nexport type MultiSelectFactory = Factory<{\n  props: MultiSelectProps;\n  ref: HTMLInputElement;\n  stylesNames: MultiSelectStylesNames;\n}>;\n\nconst defaultProps = {\n  maxValues: Infinity,\n  withCheckIcon: true,\n  checkIconPosition: 'left',\n  hiddenInputValuesDivider: ',',\n  clearSearchOnChange: true,\n  size: 'sm',\n} satisfies Partial<MultiSelectProps>;\n\nexport const MultiSelect = factory<MultiSelectFactory>((_props, ref) => {\n  const props = useProps('MultiSelect', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    onFocus,\n    onBlur,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    maxValues,\n    searchable,\n    nothingFoundMessage,\n    withCheckIcon,\n    checkIconPosition,\n    hidePickedOptions,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    placeholder,\n    hiddenInputValuesDivider,\n    required,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    chevronColor,\n    attributes,\n    clearSearchOnChange,\n    ...others\n  } = props;\n\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const retainedSelectedOptions = useRef<Record<string, ComboboxItem>>({});\n\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    },\n  });\n\n  const {\n    styleProps,\n    rest: { type, autoComplete, ...rest },\n  } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange,\n  });\n\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: '',\n    onChange: onSearchChange,\n  });\n\n  const handleSearchChange = (value: string) => {\n    setSearchValue(value);\n    combobox.resetSelectedOption();\n  };\n\n  const getStyles = useStyles<MultiSelectFactory>({\n    name: 'MultiSelect',\n    classes: {} as any,\n    props,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<MultiSelectFactory>({\n    props,\n    styles,\n    classNames,\n  });\n\n  const handleInputKeydown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (event.key === ' ' && !searchable) {\n      event.preventDefault();\n      combobox.toggleDropdown();\n    }\n\n    if (event.key === 'Backspace' && _searchValue.length === 0 && _value.length > 0) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n\n  const values = _value.map((item, index) => {\n    const optionData = optionsLockup[item] || retainedSelectedOptions.current[item];\n    return (\n      <Pill\n        key={`${item}-${index}`}\n        withRemoveButton={!readOnly && !optionsLockup[item]?.disabled}\n        onRemove={() => {\n          setValue(_value.filter((i) => item !== i));\n          onRemove?.(item);\n        }}\n        unstyled={unstyled}\n        disabled={disabled}\n        {...getStyles('pill')}\n      >\n        {optionData?.label || item}\n      </Pill>\n    );\n  });\n\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _searchValue]);\n\n  useEffect(() => {\n    _value.forEach((val) => {\n      if (val in optionsLockup) {\n        retainedSelectedOptions.current[val] = optionsLockup[val];\n      }\n    });\n  }, [optionsLockup, _value]);\n\n  const clearButton = (\n    <Combobox.ClearButton\n      {...clearButtonProps}\n      onClear={() => {\n        onClear?.();\n        setValue([]);\n        handleSearchChange('');\n      }}\n    />\n  );\n\n  const filteredData = filterPickedValues({ data: parsedData, value: _value });\n  const _clearable = clearable && _value.length > 0 && !disabled && !readOnly;\n\n  return (\n    <>\n      <Combobox\n        store={combobox}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        size={size}\n        readOnly={readOnly}\n        __staticSelector=\"MultiSelect\"\n        attributes={attributes}\n        onOptionSubmit={(val) => {\n          onOptionSubmit?.(val);\n          if (clearSearchOnChange) {\n            handleSearchChange('');\n          }\n          combobox.updateSelectedOptionIndex('selected');\n\n          if (_value.includes(optionsLockup[val].value)) {\n            setValue(_value.filter((v) => v !== optionsLockup[val].value));\n            onRemove?.(optionsLockup[val].value);\n          } else if (_value.length < maxValues) {\n            setValue([..._value, optionsLockup[val].value]);\n          }\n        }}\n        {...comboboxProps}\n      >\n        <Combobox.DropdownTarget>\n          <PillsInput\n            {...styleProps}\n            __staticSelector=\"MultiSelect\"\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n            size={size}\n            className={className}\n            style={style}\n            variant={variant}\n            disabled={disabled}\n            radius={radius}\n            __defaultRightSection={\n              <Combobox.Chevron\n                size={size}\n                error={error}\n                unstyled={unstyled}\n                color={chevronColor}\n              />\n            }\n            __clearSection={clearButton}\n            __clearable={_clearable}\n            rightSection={rightSection}\n            rightSectionPointerEvents={rightSectionPointerEvents || 'none'}\n            rightSectionWidth={rightSectionWidth}\n            rightSectionProps={rightSectionProps}\n            leftSection={leftSection}\n            leftSectionWidth={leftSectionWidth}\n            leftSectionPointerEvents={leftSectionPointerEvents}\n            leftSectionProps={leftSectionProps}\n            inputContainer={inputContainer}\n            inputWrapperOrder={inputWrapperOrder}\n            withAsterisk={withAsterisk}\n            labelProps={labelProps}\n            descriptionProps={descriptionProps}\n            errorProps={errorProps}\n            wrapperProps={wrapperProps}\n            description={description}\n            label={label}\n            error={error}\n            withErrorStyles={withErrorStyles}\n            __stylesApiProps={{\n              ...props,\n              rightSectionPointerEvents: rightSectionPointerEvents || (_clearable ? 'all' : 'none'),\n              multiline: true,\n            }}\n            pointer={!searchable}\n            onClick={() => (searchable ? combobox.openDropdown() : combobox.toggleDropdown())}\n            data-expanded={combobox.dropdownOpened || undefined}\n            id={_id}\n            required={required}\n            mod={mod}\n            attributes={attributes}\n          >\n            <Pill.Group\n              attributes={attributes}\n              disabled={disabled}\n              unstyled={unstyled}\n              {...getStyles('pillsList')}\n            >\n              {values}\n              <Combobox.EventsTarget autoComplete={autoComplete}>\n                <PillsInput.Field\n                  {...rest}\n                  ref={ref}\n                  id={_id}\n                  placeholder={placeholder}\n                  type={!searchable && !placeholder ? 'hidden' : 'visible'}\n                  {...getStyles('inputField')}\n                  unstyled={unstyled}\n                  onFocus={(event) => {\n                    onFocus?.(event);\n                    searchable && combobox.openDropdown();\n                  }}\n                  onBlur={(event) => {\n                    onBlur?.(event);\n                    combobox.closeDropdown();\n                    handleSearchChange('');\n                  }}\n                  onKeyDown={handleInputKeydown}\n                  value={_searchValue}\n                  onChange={(event) => {\n                    handleSearchChange(event.currentTarget.value);\n                    searchable && combobox.openDropdown();\n                    selectFirstOptionOnChange && combobox.selectFirstOption();\n                  }}\n                  disabled={disabled}\n                  readOnly={readOnly || !searchable}\n                  pointer={!searchable}\n                />\n              </Combobox.EventsTarget>\n            </Pill.Group>\n          </PillsInput>\n        </Combobox.DropdownTarget>\n\n        <OptionsDropdown\n          data={hidePickedOptions ? filteredData : parsedData}\n          hidden={readOnly || disabled}\n          filter={filter}\n          search={_searchValue}\n          limit={limit}\n          hiddenWhenEmpty={!nothingFoundMessage}\n          withScrollArea={withScrollArea}\n          maxDropdownHeight={maxDropdownHeight}\n          filterOptions={searchable}\n          value={_value}\n          checkIconPosition={checkIconPosition}\n          withCheckIcon={withCheckIcon}\n          nothingFoundMessage={nothingFoundMessage}\n          unstyled={unstyled}\n          labelId={label ? `${_id}-label` : undefined}\n          aria-label={label ? undefined : others['aria-label']}\n          renderOption={renderOption}\n          scrollAreaProps={scrollAreaProps}\n        />\n      </Combobox>\n      <Combobox.HiddenInput\n        name={name}\n        valuesDivider={hiddenInputValuesDivider}\n        value={_value}\n        form={form}\n        disabled={disabled}\n        {...hiddenInputProps}\n      />\n    </>\n  );\n});\n\nMultiSelect.classes = { ...InputBase.classes, ...Combobox.classes };\nMultiSelect.displayName = '@mantine/core/MultiSelect';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}