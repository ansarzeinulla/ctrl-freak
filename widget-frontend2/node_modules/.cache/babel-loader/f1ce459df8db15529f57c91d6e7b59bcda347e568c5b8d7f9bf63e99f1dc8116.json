{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useRef, useState, useEffect } from 'react';\nimport { useUncontrolled, useMove, useMergedRef, clamp } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { getRadius, getSize } from '../../../core/utils/get-size/get-size.mjs';\nimport { findClosestNumber } from '../../../core/utils/find-closest-number/find-closest-number.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { SliderProvider } from '../Slider.context.mjs';\nimport { SliderRoot } from '../SliderRoot/SliderRoot.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport { Track } from '../Track/Track.mjs';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value.mjs';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position.mjs';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value.mjs';\nimport { getPosition } from '../utils/get-position/get-position.mjs';\nimport { getPrecision } from '../utils/get-precision/get-precision.mjs';\nimport { getNextMarkValue, getPreviousMarkValue, getLastMarkValue, getFirstMarkValue } from '../utils/get-step-mark-value/get-step-mark-value.mjs';\nimport classes from '../Slider.module.css.mjs';\nconst varsResolver = createVarsResolver((theme, {\n  size,\n  color,\n  thumbSize,\n  radius\n}) => ({\n  root: {\n    \"--slider-size\": getSize(size, \"slider-size\"),\n    \"--slider-color\": color ? getThemeColor(color, theme) : void 0,\n    \"--slider-radius\": radius === void 0 ? void 0 : getRadius(radius),\n    \"--slider-thumb-size\": thumbSize !== void 0 ? rem(thumbSize) : \"calc(var(--slider-size) * 2)\"\n  }\n}));\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: f => f,\n  labelTransitionProps: {\n    transition: \"fade\",\n    duration: 0\n  },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  pushOnOverlap: true,\n  scale: v => v,\n  size: \"md\",\n  maxRange: Infinity\n};\nconst RangeSlider = factory((_props, ref) => {\n  const props = useProps(\"RangeSlider\", defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    minRange,\n    maxRange,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbFromLabel,\n    thumbToLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    pushOnOverlap,\n    attributes,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Slider\",\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    attributes,\n    vars,\n    varsResolver,\n    unstyled\n  });\n  const containerRef = useRef(null);\n  const {\n    dir\n  } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef([]);\n  const root = useRef(null);\n  const thumbIndex = useRef(void 0);\n  const [domainMin, domainMax] = domain || [min, max];\n  const positions = [getPosition({\n    value: _value[0],\n    min: domainMin,\n    max: domainMax\n  }), getPosition({\n    value: _value[1],\n    min: domainMin,\n    max: domainMax\n  })];\n  const precision = _precision ?? getPrecision(step);\n  const _setValue = val => {\n    setValue(val);\n    valueRef.current = val;\n  };\n  useEffect(() => {\n    if (Array.isArray(value)) {\n      valueRef.current = value;\n    }\n  }, Array.isArray(value) ? [value[0], value[1]] : [null, null]);\n  const setRangedValue = (val, index, triggerChangeEnd) => {\n    if (index === -1) {\n      return;\n    }\n    const clone = [...valueRef.current];\n    if (restrictToMarks && marks) {\n      const closest = findClosestNumber(val, marks.map(m => m.value));\n      const current = clone[index];\n      clone[index] = closest;\n      const otherIndex = index === 0 ? 1 : 0;\n      const lastMarkValue = getLastMarkValue(marks);\n      const firstMarkValue = getFirstMarkValue(marks);\n      if (closest === lastMarkValue && clone[otherIndex] === lastMarkValue) {\n        clone[index] = current;\n      } else if (closest === firstMarkValue && clone[otherIndex] === firstMarkValue) {\n        clone[index] = current;\n      } else if (closest === clone[otherIndex]) {\n        if (current > clone[otherIndex]) {\n          clone[otherIndex] = getPreviousMarkValue(closest, marks);\n        } else {\n          clone[otherIndex] = getNextMarkValue(closest, marks);\n        }\n      }\n    } else {\n      const clampedVal = clamp(val, min, max);\n      clone[index] = clampedVal;\n      if (index === 0) {\n        if (clampedVal > clone[1] - (minRange - 1e-9)) {\n          if (pushOnOverlap) {\n            clone[1] = Math.min(val + minRange, max);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n        if (clampedVal > (max - (minRange - 1e-9) || min)) {\n          clone[index] = valueRef.current[index];\n        }\n        if (clone[1] - val > maxRange) {\n          if (pushOnOverlap) {\n            clone[1] = val + maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n      if (index === 1) {\n        if (clampedVal < clone[0] + minRange) {\n          if (pushOnOverlap) {\n            clone[0] = Math.max(val - minRange, min);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n        if (clampedVal < clone[0] + minRange) {\n          clone[index] = valueRef.current[index];\n        }\n        if (clampedVal - clone[0] > maxRange) {\n          if (pushOnOverlap) {\n            clone[0] = val - maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n    }\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n    if (clone[0] > clone[1]) {\n      const temp = clone[0];\n      clone[0] = clone[1];\n      clone[1] = temp;\n    }\n    _setValue(clone);\n    if (triggerChangeEnd) {\n      onChangeEnd?.(valueRef.current);\n    }\n  };\n  const handleChange = val => {\n    if (!disabled && thumbIndex.current !== void 0) {\n      const nextValue = getChangeValue({\n        value: val,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n  const {\n    ref: useMoveRef,\n    active\n  } = useMove(({\n    x\n  }) => handleChange(x), {\n    onScrubEnd: () => !disabled && onChangeEnd?.(valueRef.current)\n  }, dir);\n  function handleThumbMouseDown(index) {\n    thumbIndex.current = index;\n  }\n  const handleTrackMouseDownCapture = event => {\n    if (containerRef.current) {\n      containerRef.current.focus();\n      const rect = containerRef.current.getBoundingClientRect();\n      const changePosition = getClientPosition(event.nativeEvent);\n      const changeValue = getChangeValue({\n        value: changePosition - rect.left,\n        max,\n        min,\n        step,\n        containerWidth: rect.width\n      });\n      const nearestHandle = Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n      const _nearestHandle = dir === \"ltr\" ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n      thumbIndex.current = _nearestHandle;\n    }\n  };\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n    return focused;\n  };\n  const handleTrackKeydownCapture = event => {\n    if (!disabled) {\n      switch (event.key) {\n        case \"ArrowUp\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? getNextMarkValue(valueRef.current[focusedIndex], marks) : Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? (dir === \"rtl\" ? getPreviousMarkValue : getNextMarkValue)(valueRef.current[focusedIndex], marks) : Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] - step : valueRef.current[focusedIndex] + step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowDown\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? getPreviousMarkValue(valueRef.current[focusedIndex], marks) : Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowLeft\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? (dir === \"rtl\" ? getNextMarkValue : getPreviousMarkValue)(valueRef.current[focusedIndex], marks) : Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] + step : valueRef.current[focusedIndex] - step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n      }\n    }\n  };\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1)\n  };\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n  return /* @__PURE__ */jsx(SliderProvider, {\n    value: {\n      getStyles\n    },\n    children: /* @__PURE__ */jsxs(SliderRoot, {\n      ...others,\n      size,\n      ref: useMergedRef(ref, root),\n      disabled,\n      onMouseDownCapture: () => root.current?.focus(),\n      onKeyDownCapture: () => {\n        if (thumbs.current[0]?.parentElement?.contains(document.activeElement)) {\n          return;\n        }\n        thumbs.current[0]?.focus();\n      },\n      children: [/* @__PURE__ */jsxs(Track, {\n        offset: positions[0],\n        marksOffset: _value[0],\n        filled: positions[1] - positions[0],\n        marks,\n        inverted,\n        min: domainMin,\n        max: domainMax,\n        value: _value[1],\n        disabled,\n        containerProps: {\n          ref: useMergedRef(containerRef, useMoveRef),\n          onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,\n          onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0,\n          onTouchStartCapture: handleTrackMouseDownCapture,\n          onTouchEndCapture: () => {\n            thumbIndex.current = -1;\n          },\n          onMouseDownCapture: handleTrackMouseDownCapture,\n          onMouseUpCapture: () => {\n            thumbIndex.current = -1;\n          },\n          onKeyDownCapture: handleTrackKeydownCapture\n        },\n        children: [/* @__PURE__ */jsx(Thumb, {\n          ...sharedThumbProps,\n          value: scale(_value[0]),\n          position: positions[0],\n          dragging: active,\n          label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[0]), precision)) : label,\n          ref: node => {\n            if (node) {\n              thumbs.current[0] = node;\n            }\n          },\n          thumbLabel: thumbFromLabel,\n          onMouseDown: () => handleThumbMouseDown(0),\n          onFocus: () => setFocused(0),\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled,\n          ...thumbProps?.(0),\n          children: hasArrayThumbChildren ? thumbChildren[0] : thumbChildren\n        }), /* @__PURE__ */jsx(Thumb, {\n          ...sharedThumbProps,\n          thumbLabel: thumbToLabel,\n          value: scale(_value[1]),\n          position: positions[1],\n          dragging: active,\n          label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[1]), precision)) : label,\n          ref: node => {\n            if (node) {\n              thumbs.current[1] = node;\n            }\n          },\n          onMouseDown: () => handleThumbMouseDown(1),\n          onFocus: () => setFocused(1),\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled,\n          ...thumbProps?.(1),\n          children: hasArrayThumbChildren ? thumbChildren[1] : thumbChildren\n        })]\n      }), /* @__PURE__ */jsx(\"input\", {\n        type: \"hidden\",\n        name: `${name}_from`,\n        value: _value[0],\n        ...hiddenInputProps\n      }), /* @__PURE__ */jsx(\"input\", {\n        type: \"hidden\",\n        name: `${name}_to`,\n        value: _value[1],\n        ...hiddenInputProps\n      })]\n    })\n  });\n});\nRangeSlider.classes = classes;\nRangeSlider.displayName = \"@mantine/core/RangeSlider\";\nexport { RangeSlider };","map":{"version":3,"names":["varsResolver","createVarsResolver","theme","size","color","thumbSize","radius","root","getSize","getThemeColor","getRadius","rem","defaultProps","min","max","minRange","step","marks","label","f","labelTransitionProps","transition","duration","labelAlwaysOn","showLabelOnHover","disabled","pushOnOverlap","scale","v","maxRange","Infinity","RangeSlider","factory","_props","ref","props","useProps","classNames","styles","value","onChange","onChangeEnd","domain","precision","_precision","defaultValue","name","thumbFromLabel","thumbToLabel","thumbChildren","unstyled","inverted","className","style","vars","hiddenInputProps","restrictToMarks","thumbProps","attributes","others","getStyles","useStyles","classes","containerRef","useRef","dir","useDirection","focused","setFocused","useState","hovered","setHovered","_value","setValue","useUncontrolled","finalValue","valueRef","thumbs","thumbIndex","domainMin","domainMax","positions","getPosition","getPrecision","_setValue","val","current","useEffect","Array","isArray","setRangedValue","index","triggerChangeEnd","clone","closest","findClosestNumber","map","m","otherIndex","lastMarkValue","getLastMarkValue","firstMarkValue","getFirstMarkValue","getPreviousMarkValue","getNextMarkValue","clampedVal","clamp","Math","getFloatingValue","temp","handleChange","nextValue","getChangeValue","useMoveRef","active","useMove","x","onScrubEnd","handleThumbMouseDown","handleTrackMouseDownCapture","event","focus","rect","getBoundingClientRect","changePosition","getClientPosition","nativeEvent","changeValue","left","containerWidth","width","nearestHandle","abs","_nearestHandle","getFocusedThumbIndex","handleTrackKeydownCapture","key","preventDefault","focusedIndex","sharedThumbProps","onBlur","hasArrayThumbChildren","jsx","SliderProvider","children","jsxs","SliderRoot","useMergedRef","onMouseDownCapture","onKeyDownCapture","parentElement","contains","document","activeElement","Track","offset","marksOffset","filled","containerProps","onMouseEnter","onMouseLeave","onTouchStartCapture","onTouchEndCapture","onMouseUpCapture","Thumb","position","dragging","node","thumbLabel","onMouseDown","onFocus","isHovered","type","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Slider/RangeSlider/RangeSlider.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { clamp, useMergedRef, useMove, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  findClosestNumber,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useDirection,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { TransitionOverride } from '../../Transition';\nimport { SliderCssVariables, SliderProvider, SliderStylesNames } from '../Slider.context';\nimport { SliderRoot } from '../SliderRoot/SliderRoot';\nimport { Thumb } from '../Thumb/Thumb';\nimport { Track } from '../Track/Track';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value';\nimport { getPosition } from '../utils/get-position/get-position';\nimport { getPrecision } from '../utils/get-precision/get-precision';\nimport {\n  getFirstMarkValue,\n  getLastMarkValue,\n  getNextMarkValue,\n  getPreviousMarkValue,\n} from '../utils/get-step-mark-value/get-step-mark-value';\nimport classes from '../Slider.module.css';\n\nexport type RangeSliderValue = [number, number];\n\nexport interface RangeSliderProps\n  extends BoxProps,\n    StylesApiProps<RangeSliderFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {\n  /** Key of `theme.colors` or any valid CSS color, controls color of track and thumb @default `theme.primaryColor` */\n  color?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, numbers are converted to rem @default `'xl'` */\n  radius?: MantineRadius;\n\n  /** Controls size of the track @default `'md'` */\n  size?: MantineSize | (string & {}) | number;\n\n  /** Minimal possible value @default `0` */\n  min?: number;\n\n  /** Maximum possible value @default `100` */\n  max?: number;\n\n  /** Domain of the slider, defines the full range of possible values @default `[min, max]` */\n  domain?: [number, number];\n\n  /** Number by which value will be incremented/decremented with thumb drag and arrows @default `1` */\n  step?: number;\n\n  /** Number of significant digits after the decimal point */\n  precision?: number;\n\n  /** Controlled component value */\n  value?: RangeSliderValue;\n\n  /** Uncontrolled component default value */\n  defaultValue?: RangeSliderValue;\n\n  /** Called when value changes */\n  onChange?: (value: RangeSliderValue) => void;\n\n  /** Called when user stops dragging slider or changes value with arrows */\n  onChangeEnd?: (value: RangeSliderValue) => void;\n\n  /** Hidden input name, use with uncontrolled component */\n  name?: string;\n\n  /** Marks displayed on the track */\n  marks?: { value: number; label?: React.ReactNode }[];\n\n  /** Function to generate label or any react node to render instead, set to null to disable label */\n  label?: React.ReactNode | ((value: number) => React.ReactNode);\n\n  /** Props passed down to the `Transition` component @default `{ transition: 'fade', duration: 0 }` */\n  labelTransitionProps?: TransitionOverride;\n\n  /** Determines whether the label should be visible when the slider is not being dragged or hovered @default `false` */\n  labelAlwaysOn?: boolean;\n\n  /** Determines whether the label should be displayed when the slider is hovered @default `true` */\n  showLabelOnHover?: boolean;\n\n  /** Content rendered inside thumb */\n  thumbChildren?: React.ReactNode;\n\n  /** Disables slider */\n  disabled?: boolean;\n\n  /** Thumb `width` and `height`, by default value is computed based on `size` prop */\n  thumbSize?: number | string;\n\n  /** A transformation function to change the scale of the slider */\n  scale?: (value: number) => number;\n\n  /** Determines whether track values representation should be inverted @default `false` */\n  inverted?: boolean;\n\n  /** Minimal range interval @default `10` */\n  minRange?: number;\n\n  /** Maximum range interval @default `Infinity` */\n  maxRange?: number;\n\n  /** First thumb `aria-label` */\n  thumbFromLabel?: string;\n\n  /** Second thumb `aria-label` */\n  thumbToLabel?: string;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Determines whether the selection should be only allowed from the given marks array @default `false` */\n  restrictToMarks?: boolean;\n\n  /** Props passed down to thumb element based on the thumb index */\n  thumbProps?: (index: 0 | 1) => React.ComponentPropsWithoutRef<'div'>;\n\n  /** Determines whether the other thumb should be pushed by the current thumb dragging when `minRange`/`maxRange` is reached @default `true` */\n  pushOnOverlap?: boolean;\n}\n\nexport type RangeSliderFactory = Factory<{\n  props: RangeSliderProps;\n  ref: HTMLDivElement;\n  stylesNames: SliderStylesNames;\n  vars: SliderCssVariables;\n}>;\n\nconst varsResolver = createVarsResolver<RangeSliderFactory>(\n  (theme, { size, color, thumbSize, radius }) => ({\n    root: {\n      '--slider-size': getSize(size, 'slider-size'),\n      '--slider-color': color ? getThemeColor(color, theme) : undefined,\n      '--slider-radius': radius === undefined ? undefined : getRadius(radius),\n      '--slider-thumb-size':\n        thumbSize !== undefined ? rem(thumbSize) : 'calc(var(--slider-size) * 2)',\n    },\n  })\n);\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: (f) => f,\n  labelTransitionProps: { transition: 'fade', duration: 0 },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  pushOnOverlap: true,\n  scale: (v) => v,\n  size: 'md',\n  maxRange: Infinity,\n} satisfies Partial<RangeSliderProps>;\n\nexport const RangeSlider = factory<RangeSliderFactory>((_props, ref) => {\n  const props = useProps('RangeSlider', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    minRange,\n    maxRange,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbFromLabel,\n    thumbToLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    pushOnOverlap,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<RangeSliderFactory>({\n    name: 'Slider',\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    attributes,\n    vars,\n    varsResolver,\n    unstyled,\n  });\n\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const { dir } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled<RangeSliderValue>({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange,\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef<HTMLDivElement[]>([]);\n  const root = useRef<HTMLDivElement>(null);\n  const thumbIndex = useRef<number | undefined>(undefined);\n  const [domainMin, domainMax] = domain || [min!, max!];\n  const positions = [\n    getPosition({ value: _value[0], min: domainMin, max: domainMax }),\n    getPosition({ value: _value[1], min: domainMin, max: domainMax }),\n  ];\n\n  const precision = _precision ?? getPrecision(step);\n\n  const _setValue = (val: RangeSliderValue) => {\n    setValue(val);\n    valueRef.current = val;\n  };\n\n  useEffect(\n    () => {\n      if (Array.isArray(value)) {\n        valueRef.current = value;\n      }\n    },\n    Array.isArray(value) ? [value[0], value[1]] : [null, null]\n  );\n\n  const setRangedValue = (val: number, index: number, triggerChangeEnd: boolean) => {\n    if (index === -1) {\n      return;\n    }\n\n    const clone: RangeSliderValue = [...valueRef.current];\n\n    if (restrictToMarks && marks) {\n      const closest = findClosestNumber(\n        val,\n        marks.map((m) => m.value)\n      );\n\n      const current = clone[index];\n      clone[index] = closest;\n      const otherIndex = index === 0 ? 1 : 0;\n\n      const lastMarkValue = getLastMarkValue(marks);\n      const firstMarkValue = getFirstMarkValue(marks);\n\n      if (closest === lastMarkValue && clone[otherIndex] === lastMarkValue) {\n        clone[index] = current;\n      } else if (closest === firstMarkValue && clone[otherIndex] === firstMarkValue) {\n        clone[index] = current;\n      } else if (closest === clone[otherIndex]) {\n        if (current > clone[otherIndex]) {\n          clone[otherIndex] = getPreviousMarkValue(closest, marks);\n        } else {\n          clone[otherIndex] = getNextMarkValue(closest, marks);\n        }\n      }\n    } else {\n      const clampedVal = clamp(val, min!, max!);\n      clone[index] = clampedVal;\n\n      if (index === 0) {\n        if (clampedVal > clone[1] - (minRange - 0.000000001)) {\n          if (pushOnOverlap) {\n            clone[1] = Math.min(val + minRange, max);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n\n        if (clampedVal > (max - (minRange - 0.000000001) || min)) {\n          clone[index] = valueRef.current[index];\n        }\n\n        if (clone[1] - val > maxRange) {\n          if (pushOnOverlap) {\n            clone[1] = val + maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n\n      if (index === 1) {\n        if (clampedVal < clone[0] + minRange) {\n          if (pushOnOverlap) {\n            clone[0] = Math.max(val - minRange, min);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n\n        if (clampedVal < clone[0] + minRange) {\n          clone[index] = valueRef.current[index];\n        }\n\n        if (clampedVal - clone[0] > maxRange) {\n          if (pushOnOverlap) {\n            clone[0] = val - maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n    }\n\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n\n    if (clone[0] > clone[1]) {\n      const temp = clone[0];\n      clone[0] = clone[1];\n      clone[1] = temp;\n    }\n\n    _setValue(clone);\n\n    if (triggerChangeEnd) {\n      onChangeEnd?.(valueRef.current);\n    }\n  };\n\n  const handleChange = (val: number) => {\n    if (!disabled && thumbIndex.current !== undefined) {\n      const nextValue = getChangeValue({\n        value: val,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision,\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n\n  const { ref: useMoveRef, active } = useMove(\n    ({ x }) => handleChange(x),\n    { onScrubEnd: () => !disabled && onChangeEnd?.(valueRef.current) },\n    dir\n  );\n\n  function handleThumbMouseDown(index: number) {\n    thumbIndex.current = index;\n  }\n\n  const handleTrackMouseDownCapture = (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    if (containerRef.current) {\n      containerRef.current.focus();\n      const rect = containerRef.current.getBoundingClientRect();\n      const changePosition = getClientPosition(event.nativeEvent);\n      const changeValue = getChangeValue({\n        value: changePosition - rect.left,\n        max,\n        min,\n        step,\n        containerWidth: rect.width,\n      });\n\n      const nearestHandle =\n        Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n      const _nearestHandle = dir === 'ltr' ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n\n      thumbIndex.current = _nearestHandle;\n    }\n  };\n\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n\n    return focused;\n  };\n\n  const handleTrackKeydownCapture = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!disabled) {\n      switch (event.key) {\n        case 'ArrowUp': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n          const nextValue =\n            restrictToMarks && marks\n              ? getNextMarkValue(valueRef.current[focusedIndex], marks)\n              : Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max);\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowRight': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n\n          const nextValue =\n            restrictToMarks && marks\n              ? (dir === 'rtl' ? getPreviousMarkValue : getNextMarkValue)(\n                  valueRef.current[focusedIndex],\n                  marks\n                )\n              : Math.min(\n                  Math.max(\n                    dir === 'rtl'\n                      ? valueRef.current[focusedIndex] - step\n                      : valueRef.current[focusedIndex] + step,\n                    min\n                  ),\n                  max\n                );\n\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowDown': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n          const nextValue =\n            restrictToMarks && marks\n              ? getPreviousMarkValue(valueRef.current[focusedIndex], marks)\n              : Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max);\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowLeft': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n\n          const nextValue =\n            restrictToMarks && marks\n              ? (dir === 'rtl' ? getNextMarkValue : getPreviousMarkValue)(\n                  valueRef.current[focusedIndex],\n                  marks\n                )\n              : Math.min(\n                  Math.max(\n                    dir === 'rtl'\n                      ? valueRef.current[focusedIndex] + step\n                      : valueRef.current[focusedIndex] - step,\n                    min\n                  ),\n                  max\n                );\n\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    }\n  };\n\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1),\n  };\n\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n\n  return (\n    <SliderProvider value={{ getStyles }}>\n      <SliderRoot\n        {...others}\n        size={size}\n        ref={useMergedRef(ref, root)}\n        disabled={disabled}\n        onMouseDownCapture={() => root.current?.focus()}\n        onKeyDownCapture={() => {\n          if (thumbs.current[0]?.parentElement?.contains(document.activeElement)) {\n            return;\n          }\n          thumbs.current[0]?.focus();\n        }}\n      >\n        <Track\n          offset={positions[0]}\n          marksOffset={_value[0]}\n          filled={positions[1] - positions[0]}\n          marks={marks}\n          inverted={inverted}\n          min={domainMin}\n          max={domainMax}\n          value={_value[1]}\n          disabled={disabled}\n          containerProps={{\n            ref: useMergedRef(containerRef, useMoveRef) as any,\n            onMouseEnter: showLabelOnHover ? () => setHovered(true) : undefined,\n            onMouseLeave: showLabelOnHover ? () => setHovered(false) : undefined,\n            onTouchStartCapture: handleTrackMouseDownCapture,\n            onTouchEndCapture: () => {\n              thumbIndex.current = -1;\n            },\n            onMouseDownCapture: handleTrackMouseDownCapture,\n            onMouseUpCapture: () => {\n              thumbIndex.current = -1;\n            },\n            onKeyDownCapture: handleTrackKeydownCapture,\n          }}\n        >\n          <Thumb\n            {...sharedThumbProps}\n            value={scale(_value[0])}\n            position={positions[0]}\n            dragging={active}\n            label={\n              typeof label === 'function'\n                ? label(getFloatingValue(scale(_value[0]), precision))\n                : label\n            }\n            ref={(node) => {\n              if (node) {\n                thumbs.current[0] = node;\n              }\n            }}\n            thumbLabel={thumbFromLabel}\n            onMouseDown={() => handleThumbMouseDown(0)}\n            onFocus={() => setFocused(0)}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps?.(0)}\n          >\n            {hasArrayThumbChildren ? thumbChildren[0] : thumbChildren}\n          </Thumb>\n\n          <Thumb\n            {...sharedThumbProps}\n            thumbLabel={thumbToLabel}\n            value={scale(_value[1])}\n            position={positions[1]}\n            dragging={active}\n            label={\n              typeof label === 'function'\n                ? label(getFloatingValue(scale(_value[1]), precision))\n                : label\n            }\n            ref={(node) => {\n              if (node) {\n                thumbs.current[1] = node;\n              }\n            }}\n            onMouseDown={() => handleThumbMouseDown(1)}\n            onFocus={() => setFocused(1)}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps?.(1)}\n          >\n            {hasArrayThumbChildren ? thumbChildren[1] : thumbChildren}\n          </Thumb>\n        </Track>\n\n        <input type=\"hidden\" name={`${name}_from`} value={_value[0]} {...hiddenInputProps} />\n        <input type=\"hidden\" name={`${name}_to`} value={_value[1]} {...hiddenInputProps} />\n      </SliderRoot>\n    </SliderProvider>\n  );\n});\n\nRangeSlider.classes = classes;\nRangeSlider.displayName = '@mantine/core/RangeSlider';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA,MAAMA,YAAA,GAAeC,kBAAA,CACnB,CAACC,KAAA,EAAO;EAAEC,IAAA;EAAMC,KAAA;EAAOC,SAAA;EAAWC;AAAA,CAAO,MAAO;EAC9CC,IAAA,EAAM;IACJ,iBAAiBC,OAAA,CAAQL,IAAA,EAAM,aAAa;IAC5C,kBAAkBC,KAAA,GAAQK,aAAA,CAAcL,KAAA,EAAOF,KAAK,IAAI;IACxD,mBAAmBI,MAAA,KAAW,SAAY,SAAYI,SAAA,CAAUJ,MAAM;IACtE,uBACED,SAAA,KAAc,SAAYM,GAAA,CAAIN,SAAS,IAAI;EAAA;AAC/C,CACF,CACF;AAEA,MAAMO,YAAA,GAAe;EACnBC,GAAA,EAAK;EACLC,GAAA,EAAK;EACLC,QAAA,EAAU;EACVC,IAAA,EAAM;EACNC,KAAA,EAAO,EAAC;EACRC,KAAA,EAAQC,CAAA,IAAMA,CAAA;EACdC,oBAAA,EAAsB;IAAEC,UAAA,EAAY;IAAQC,QAAA,EAAU;EAAA,CAAE;EACxDC,aAAA,EAAe;EACfC,gBAAA,EAAkB;EAClBC,QAAA,EAAU;EACVC,aAAA,EAAe;EACfC,KAAA,EAAQC,CAAA,IAAMA,CAAA;EACdzB,IAAA,EAAM;EACN0B,QAAA,EAAUC;AACZ;AAEO,MAAMC,WAAA,GAAcC,OAAA,CAA4B,CAACC,MAAA,EAAQC,GAAA,KAAQ;EACtE,MAAMC,KAAA,GAAQC,QAAA,CAAS,eAAexB,YAAA,EAAcqB,MAAM;EAC1D,MAAM;IACJI,UAAA;IACAC,MAAA;IACAC,KAAA;IACAC,QAAA;IACAC,WAAA;IACAtC,IAAA;IACAU,GAAA;IACAC,GAAA;IACA4B,MAAA;IACA3B,QAAA;IACAc,QAAA;IACAb,IAAA;IACA2B,SAAA,EAAWC,UAAA;IACXC,YAAA;IACAC,IAAA;IACA7B,KAAA;IACAC,KAAA;IACAE,oBAAA;IACAG,aAAA;IACAwB,cAAA;IACAC,YAAA;IACAxB,gBAAA;IACAyB,aAAA;IACAxB,QAAA;IACAyB,QAAA;IACAvB,KAAA;IACAwB,QAAA;IACAC,SAAA;IACAC,KAAA;IACAC,IAAA;IACAC,gBAAA;IACAC,eAAA;IACAC,UAAA;IACA/B,aAAA;IACAgC,UAAA;IACA,GAAGC;EAAA,CACL,GAAIxB,KAAA;EAEJ,MAAMyB,SAAA,GAAYC,SAAA,CAA8B;IAC9Cf,IAAA,EAAM;IACNX,KAAA;IACA2B,OAAA;IACAzB,UAAA;IACAe,SAAA;IACAd,MAAA;IACAe,KAAA;IACAK,UAAA;IACAJ,IAAA;IACAtD,YAAA;IACAkD;EAAA,CACD;EAED,MAAMa,YAAA,GAAeC,MAAA,CAA8B,IAAI;EACvD,MAAM;IAAEC;EAAA,CAAI,GAAIC,YAAA,EAAa;EAC7B,MAAM,CAACC,OAAA,EAASC,UAAU,IAAIC,QAAA,CAAS,EAAE;EACzC,MAAM,CAACC,OAAA,EAASC,UAAU,IAAIF,QAAA,CAAS,KAAK;EAC5C,MAAM,CAACG,MAAA,EAAQC,QAAQ,IAAIC,eAAA,CAAkC;IAC3DnC,KAAA;IACAM,YAAA;IACA8B,UAAA,EAAY,CAAC9D,GAAA,EAAKC,GAAG;IACrB0B;EAAA,CACD;EACD,MAAMoC,QAAA,GAAWZ,MAAA,CAAOQ,MAAM;EAC9B,MAAMK,MAAA,GAASb,MAAA,CAAyB,EAAE;EAC1C,MAAMzD,IAAA,GAAOyD,MAAA,CAAuB,IAAI;EACxC,MAAMc,UAAA,GAAad,MAAA,CAA2B,MAAS;EACvD,MAAM,CAACe,SAAA,EAAWC,SAAS,IAAItC,MAAA,IAAU,CAAC7B,GAAA,EAAMC,GAAI;EACpD,MAAMmE,SAAA,GAAY,CAChBC,WAAA,CAAY;IAAE3C,KAAA,EAAOiC,MAAA,CAAO,CAAC;IAAG3D,GAAA,EAAKkE,SAAA;IAAWjE,GAAA,EAAKkE;EAAA,CAAW,GAChEE,WAAA,CAAY;IAAE3C,KAAA,EAAOiC,MAAA,CAAO,CAAC;IAAG3D,GAAA,EAAKkE,SAAA;IAAWjE,GAAA,EAAKkE;EAAA,CAAW,EAClE;EAEA,MAAMrC,SAAA,GAAYC,UAAA,IAAcuC,YAAA,CAAanE,IAAI;EAEjD,MAAMoE,SAAA,GAAaC,GAAA,IAA0B;IAC3CZ,QAAA,CAASY,GAAG;IACZT,QAAA,CAASU,OAAA,GAAUD,GAAA;EACrB;EAEAE,SAAA,CACE,MAAM;IACJ,IAAIC,KAAA,CAAMC,OAAA,CAAQlD,KAAK,GAAG;MACxBqC,QAAA,CAASU,OAAA,GAAU/C,KAAA;IACrB;EACF,GACAiD,KAAA,CAAMC,OAAA,CAAQlD,KAAK,IAAI,CAACA,KAAA,CAAM,CAAC,GAAGA,KAAA,CAAM,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,EAC3D;EAEA,MAAMmD,cAAA,GAAiBA,CAACL,GAAA,EAAaM,KAAA,EAAeC,gBAAA,KAA8B;IAChF,IAAID,KAAA,KAAU,IAAI;MAChB;IACF;IAEA,MAAME,KAAA,GAA0B,CAAC,GAAGjB,QAAA,CAASU,OAAO;IAEpD,IAAI9B,eAAA,IAAmBvC,KAAA,EAAO;MAC5B,MAAM6E,OAAA,GAAUC,iBAAA,CACdV,GAAA,EACApE,KAAA,CAAM+E,GAAA,CAAKC,CAAA,IAAMA,CAAA,CAAE1D,KAAK,EAC1B;MAEA,MAAM+C,OAAA,GAAUO,KAAA,CAAMF,KAAK;MAC3BE,KAAA,CAAMF,KAAK,IAAIG,OAAA;MACf,MAAMI,UAAA,GAAaP,KAAA,KAAU,IAAI,IAAI;MAErC,MAAMQ,aAAA,GAAgBC,gBAAA,CAAiBnF,KAAK;MAC5C,MAAMoF,cAAA,GAAiBC,iBAAA,CAAkBrF,KAAK;MAE9C,IAAI6E,OAAA,KAAYK,aAAA,IAAiBN,KAAA,CAAMK,UAAU,MAAMC,aAAA,EAAe;QACpEN,KAAA,CAAMF,KAAK,IAAIL,OAAA;MACjB,WAAWQ,OAAA,KAAYO,cAAA,IAAkBR,KAAA,CAAMK,UAAU,MAAMG,cAAA,EAAgB;QAC7ER,KAAA,CAAMF,KAAK,IAAIL,OAAA;MACjB,WAAWQ,OAAA,KAAYD,KAAA,CAAMK,UAAU,GAAG;QACxC,IAAIZ,OAAA,GAAUO,KAAA,CAAMK,UAAU,GAAG;UAC/BL,KAAA,CAAMK,UAAU,IAAIK,oBAAA,CAAqBT,OAAA,EAAS7E,KAAK;QACzD,OAAO;UACL4E,KAAA,CAAMK,UAAU,IAAIM,gBAAA,CAAiBV,OAAA,EAAS7E,KAAK;QACrD;MACF;IACF,OAAO;MACL,MAAMwF,UAAA,GAAaC,KAAA,CAAMrB,GAAA,EAAKxE,GAAA,EAAMC,GAAI;MACxC+E,KAAA,CAAMF,KAAK,IAAIc,UAAA;MAEf,IAAId,KAAA,KAAU,GAAG;QACf,IAAIc,UAAA,GAAaZ,KAAA,CAAM,CAAC,KAAK9E,QAAA,GAAW,OAAc;UACpD,IAAIW,aAAA,EAAe;YACjBmE,KAAA,CAAM,CAAC,IAAIc,IAAA,CAAK9F,GAAA,CAAIwE,GAAA,GAAMtE,QAAA,EAAUD,GAAG;UACzC,OAAO;YACL+E,KAAA,CAAMF,KAAK,IAAIf,QAAA,CAASU,OAAA,CAAQK,KAAK;UACvC;QACF;QAEA,IAAIc,UAAA,IAAc3F,GAAA,IAAOC,QAAA,GAAW,SAAgBF,GAAA,GAAM;UACxDgF,KAAA,CAAMF,KAAK,IAAIf,QAAA,CAASU,OAAA,CAAQK,KAAK;QACvC;QAEA,IAAIE,KAAA,CAAM,CAAC,IAAIR,GAAA,GAAMxD,QAAA,EAAU;UAC7B,IAAIH,aAAA,EAAe;YACjBmE,KAAA,CAAM,CAAC,IAAIR,GAAA,GAAMxD,QAAA;UACnB,OAAO;YACLgE,KAAA,CAAMF,KAAK,IAAIf,QAAA,CAASU,OAAA,CAAQK,KAAK;UACvC;QACF;MACF;MAEA,IAAIA,KAAA,KAAU,GAAG;QACf,IAAIc,UAAA,GAAaZ,KAAA,CAAM,CAAC,IAAI9E,QAAA,EAAU;UACpC,IAAIW,aAAA,EAAe;YACjBmE,KAAA,CAAM,CAAC,IAAIc,IAAA,CAAK7F,GAAA,CAAIuE,GAAA,GAAMtE,QAAA,EAAUF,GAAG;UACzC,OAAO;YACLgF,KAAA,CAAMF,KAAK,IAAIf,QAAA,CAASU,OAAA,CAAQK,KAAK;UACvC;QACF;QAEA,IAAIc,UAAA,GAAaZ,KAAA,CAAM,CAAC,IAAI9E,QAAA,EAAU;UACpC8E,KAAA,CAAMF,KAAK,IAAIf,QAAA,CAASU,OAAA,CAAQK,KAAK;QACvC;QAEA,IAAIc,UAAA,GAAaZ,KAAA,CAAM,CAAC,IAAIhE,QAAA,EAAU;UACpC,IAAIH,aAAA,EAAe;YACjBmE,KAAA,CAAM,CAAC,IAAIR,GAAA,GAAMxD,QAAA;UACnB,OAAO;YACLgE,KAAA,CAAMF,KAAK,IAAIf,QAAA,CAASU,OAAA,CAAQK,KAAK;UACvC;QACF;MACF;IACF;IAEAE,KAAA,CAAM,CAAC,IAAIe,gBAAA,CAAiBf,KAAA,CAAM,CAAC,GAAGlD,SAAS;IAC/CkD,KAAA,CAAM,CAAC,IAAIe,gBAAA,CAAiBf,KAAA,CAAM,CAAC,GAAGlD,SAAS;IAE/C,IAAIkD,KAAA,CAAM,CAAC,IAAIA,KAAA,CAAM,CAAC,GAAG;MACvB,MAAMgB,IAAA,GAAOhB,KAAA,CAAM,CAAC;MACpBA,KAAA,CAAM,CAAC,IAAIA,KAAA,CAAM,CAAC;MAClBA,KAAA,CAAM,CAAC,IAAIgB,IAAA;IACb;IAEAzB,SAAA,CAAUS,KAAK;IAEf,IAAID,gBAAA,EAAkB;MACpBnD,WAAA,GAAcmC,QAAA,CAASU,OAAO;IAChC;EACF;EAEA,MAAMwB,YAAA,GAAgBzB,GAAA,IAAgB;IACpC,IAAI,CAAC5D,QAAA,IAAYqD,UAAA,CAAWQ,OAAA,KAAY,QAAW;MACjD,MAAMyB,SAAA,GAAYC,cAAA,CAAe;QAC/BzE,KAAA,EAAO8C,GAAA;QACPxE,GAAA,EAAKkE,SAAA;QACLjE,GAAA,EAAKkE,SAAA;QACLhE,IAAA;QACA2B;MAAA,CACD;MACD+C,cAAA,CAAeqB,SAAA,EAAWjC,UAAA,CAAWQ,OAAA,EAAS,KAAK;IACrD;EACF;EAEA,MAAM;IAAEpD,GAAA,EAAK+E,UAAA;IAAYC;EAAA,CAAO,GAAIC,OAAA,CAClC,CAAC;IAAEC;EAAA,CAAE,KAAMN,YAAA,CAAaM,CAAC,GACzB;IAAEC,UAAA,EAAYA,CAAA,KAAM,CAAC5F,QAAA,IAAYgB,WAAA,GAAcmC,QAAA,CAASU,OAAO;EAAA,CAAE,EACjErB,GAAA,CACF;EAEA,SAASqD,qBAAqB3B,KAAA,EAAe;IAC3Cb,UAAA,CAAWQ,OAAA,GAAUK,KAAA;EACvB;EAEA,MAAM4B,2BAAA,GACJC,KAAA,IACG;IACH,IAAIzD,YAAA,CAAauB,OAAA,EAAS;MACxBvB,YAAA,CAAauB,OAAA,CAAQmC,KAAA,EAAM;MAC3B,MAAMC,IAAA,GAAO3D,YAAA,CAAauB,OAAA,CAAQqC,qBAAA,EAAsB;MACxD,MAAMC,cAAA,GAAiBC,iBAAA,CAAkBL,KAAA,CAAMM,WAAW;MAC1D,MAAMC,WAAA,GAAcf,cAAA,CAAe;QACjCzE,KAAA,EAAOqF,cAAA,GAAiBF,IAAA,CAAKM,IAAA;QAC7BlH,GAAA;QACAD,GAAA;QACAG,IAAA;QACAiH,cAAA,EAAgBP,IAAA,CAAKQ;MAAA,CACtB;MAED,MAAMC,aAAA,GACJxB,IAAA,CAAKyB,GAAA,CAAI5D,MAAA,CAAO,CAAC,IAAIuD,WAAW,IAAIpB,IAAA,CAAKyB,GAAA,CAAI5D,MAAA,CAAO,CAAC,IAAIuD,WAAW,IAAI,IAAI;MAC9E,MAAMM,cAAA,GAAiBpE,GAAA,KAAQ,QAAQkE,aAAA,GAAgBA,aAAA,KAAkB,IAAI,IAAI;MAEjFrD,UAAA,CAAWQ,OAAA,GAAU+C,cAAA;IACvB;EACF;EAEA,MAAMC,oBAAA,GAAuBA,CAAA,KAAM;IACjC,IAAInE,OAAA,KAAY,KAAKA,OAAA,KAAY,GAAG;MAClCC,UAAA,CAAW,CAAC;MACZ,OAAO;IACT;IAEA,OAAOD,OAAA;EACT;EAEA,MAAMoE,yBAAA,GAA6Bf,KAAA,IAA+C;IAChF,IAAI,CAAC/F,QAAA,EAAU;MACb,QAAQ+F,KAAA,CAAMgB,GAAA;QACZ,KAAK;UAAW;YACdhB,KAAA,CAAMiB,cAAA,EAAe;YACrB,MAAMC,YAAA,GAAeJ,oBAAA,EAAqB;YAC1CzD,MAAA,CAAOS,OAAA,CAAQoD,YAAY,EAAEjB,KAAA,EAAM;YACnC,MAAMV,SAAA,GACJvD,eAAA,IAAmBvC,KAAA,GACfuF,gBAAA,CAAiB5B,QAAA,CAASU,OAAA,CAAQoD,YAAY,GAAGzH,KAAK,IACtD0F,IAAA,CAAK9F,GAAA,CAAI8F,IAAA,CAAK7F,GAAA,CAAI8D,QAAA,CAASU,OAAA,CAAQoD,YAAY,IAAI1H,IAAA,EAAMH,GAAG,GAAGC,GAAG;YACxE4E,cAAA,CAAekB,gBAAA,CAAiBG,SAAA,EAAWpE,SAAS,GAAG+F,YAAA,EAAc,IAAI;YACzE;UACF;QAEA,KAAK;UAAc;YACjBlB,KAAA,CAAMiB,cAAA,EAAe;YACrB,MAAMC,YAAA,GAAeJ,oBAAA,EAAqB;YAC1CzD,MAAA,CAAOS,OAAA,CAAQoD,YAAY,EAAEjB,KAAA,EAAM;YAEnC,MAAMV,SAAA,GACJvD,eAAA,IAAmBvC,KAAA,IACdgD,GAAA,KAAQ,QAAQsC,oBAAA,GAAuBC,gBAAA,EACtC5B,QAAA,CAASU,OAAA,CAAQoD,YAAY,GAC7BzH,KAAA,IAEF0F,IAAA,CAAK9F,GAAA,CACH8F,IAAA,CAAK7F,GAAA,CACHmD,GAAA,KAAQ,QACJW,QAAA,CAASU,OAAA,CAAQoD,YAAY,IAAI1H,IAAA,GACjC4D,QAAA,CAASU,OAAA,CAAQoD,YAAY,IAAI1H,IAAA,EACrCH,GAAA,CACF,EACAC,GAAA,CACF;YAEN4E,cAAA,CAAekB,gBAAA,CAAiBG,SAAA,EAAWpE,SAAS,GAAG+F,YAAA,EAAc,IAAI;YACzE;UACF;QAEA,KAAK;UAAa;YAChBlB,KAAA,CAAMiB,cAAA,EAAe;YACrB,MAAMC,YAAA,GAAeJ,oBAAA,EAAqB;YAC1CzD,MAAA,CAAOS,OAAA,CAAQoD,YAAY,EAAEjB,KAAA,EAAM;YACnC,MAAMV,SAAA,GACJvD,eAAA,IAAmBvC,KAAA,GACfsF,oBAAA,CAAqB3B,QAAA,CAASU,OAAA,CAAQoD,YAAY,GAAGzH,KAAK,IAC1D0F,IAAA,CAAK9F,GAAA,CAAI8F,IAAA,CAAK7F,GAAA,CAAI8D,QAAA,CAASU,OAAA,CAAQoD,YAAY,IAAI1H,IAAA,EAAMH,GAAG,GAAGC,GAAG;YACxE4E,cAAA,CAAekB,gBAAA,CAAiBG,SAAA,EAAWpE,SAAS,GAAG+F,YAAA,EAAc,IAAI;YACzE;UACF;QAEA,KAAK;UAAa;YAChBlB,KAAA,CAAMiB,cAAA,EAAe;YACrB,MAAMC,YAAA,GAAeJ,oBAAA,EAAqB;YAC1CzD,MAAA,CAAOS,OAAA,CAAQoD,YAAY,EAAEjB,KAAA,EAAM;YAEnC,MAAMV,SAAA,GACJvD,eAAA,IAAmBvC,KAAA,IACdgD,GAAA,KAAQ,QAAQuC,gBAAA,GAAmBD,oBAAA,EAClC3B,QAAA,CAASU,OAAA,CAAQoD,YAAY,GAC7BzH,KAAA,IAEF0F,IAAA,CAAK9F,GAAA,CACH8F,IAAA,CAAK7F,GAAA,CACHmD,GAAA,KAAQ,QACJW,QAAA,CAASU,OAAA,CAAQoD,YAAY,IAAI1H,IAAA,GACjC4D,QAAA,CAASU,OAAA,CAAQoD,YAAY,IAAI1H,IAAA,EACrCH,GAAA,CACF,EACAC,GAAA,CACF;YAEN4E,cAAA,CAAekB,gBAAA,CAAiBG,SAAA,EAAWpE,SAAS,GAAG+F,YAAA,EAAc,IAAI;YACzE;UACF;MAIA;IAEJ;EACF;EAEA,MAAMC,gBAAA,GAAmB;IACvB7H,GAAA;IACAD,GAAA;IACAV,IAAA;IACAiB,oBAAA;IACAG,aAAA;IACAqH,MAAA,EAAQA,CAAA,KAAMxE,UAAA,CAAW,EAAE;EAAA,CAC7B;EAEA,MAAMyE,qBAAA,GAAwBrD,KAAA,CAAMC,OAAA,CAAQxC,aAAa;EAEzD,sBACE6F,GAAA,CAACC,cAAA;IAAexG,KAAA,EAAO;MAAEqB;IAAA,CAAU;IACjCoF,QAAA,iBAAAC,IAAA,CAACC,UAAA;MACE,GAAGvF,MAAA;MACJxD,IAAA;MACA+B,GAAA,EAAKiH,YAAA,CAAajH,GAAA,EAAK3B,IAAI;MAC3BkB,QAAA;MACA2H,kBAAA,EAAoBA,CAAA,KAAM7I,IAAA,CAAK+E,OAAA,EAASmC,KAAA,EAAM;MAC9C4B,gBAAA,EAAkBA,CAAA,KAAM;QACtB,IAAIxE,MAAA,CAAOS,OAAA,CAAQ,CAAC,GAAGgE,aAAA,EAAeC,QAAA,CAASC,QAAA,CAASC,aAAa,GAAG;UACtE;QACF;QACA5E,MAAA,CAAOS,OAAA,CAAQ,CAAC,GAAGmC,KAAA,EAAM;MAC3B;MAEAuB,QAAA,kBAAAC,IAAA,CAACS,KAAA;QACCC,MAAA,EAAQ1E,SAAA,CAAU,CAAC;QACnB2E,WAAA,EAAapF,MAAA,CAAO,CAAC;QACrBqF,MAAA,EAAQ5E,SAAA,CAAU,CAAC,IAAIA,SAAA,CAAU,CAAC;QAClChE,KAAA;QACAkC,QAAA;QACAtC,GAAA,EAAKkE,SAAA;QACLjE,GAAA,EAAKkE,SAAA;QACLzC,KAAA,EAAOiC,MAAA,CAAO,CAAC;QACf/C,QAAA;QACAqI,cAAA,EAAgB;UACd5H,GAAA,EAAKiH,YAAA,CAAapF,YAAA,EAAckD,UAAU;UAC1C8C,YAAA,EAAcvI,gBAAA,GAAmB,MAAM+C,UAAA,CAAW,IAAI,IAAI;UAC1DyF,YAAA,EAAcxI,gBAAA,GAAmB,MAAM+C,UAAA,CAAW,KAAK,IAAI;UAC3D0F,mBAAA,EAAqB1C,2BAAA;UACrB2C,iBAAA,EAAmBA,CAAA,KAAM;YACvBpF,UAAA,CAAWQ,OAAA,GAAU;UACvB;UACA8D,kBAAA,EAAoB7B,2BAAA;UACpB4C,gBAAA,EAAkBA,CAAA,KAAM;YACtBrF,UAAA,CAAWQ,OAAA,GAAU;UACvB;UACA+D,gBAAA,EAAkBd;QAAA,CACpB;QAEAS,QAAA,kBAAAF,GAAA,CAACsB,KAAA;UACE,GAAGzB,gBAAA;UACJpG,KAAA,EAAOZ,KAAA,CAAM6C,MAAA,CAAO,CAAC,CAAC;UACtB6F,QAAA,EAAUpF,SAAA,CAAU,CAAC;UACrBqF,QAAA,EAAUpD,MAAA;UACVhG,KAAA,EACE,OAAOA,KAAA,KAAU,aACbA,KAAA,CAAM0F,gBAAA,CAAiBjF,KAAA,CAAM6C,MAAA,CAAO,CAAC,CAAC,GAAG7B,SAAS,CAAC,IACnDzB,KAAA;UAENgB,GAAA,EAAMqI,IAAA,IAAS;YACb,IAAIA,IAAA,EAAM;cACR1F,MAAA,CAAOS,OAAA,CAAQ,CAAC,IAAIiF,IAAA;YACtB;UACF;UACAC,UAAA,EAAYzH,cAAA;UACZ0H,WAAA,EAAaA,CAAA,KAAMnD,oBAAA,CAAqB,CAAC;UACzCoD,OAAA,EAASA,CAAA,KAAMtG,UAAA,CAAW,CAAC;UAC3B5C,gBAAA;UACAmJ,SAAA,EAAWrG,OAAA;UACX7C,QAAA;UACC,GAAGgC,UAAA,GAAa,CAAC;UAEjBuF,QAAA,EAAAH,qBAAA,GAAwB5F,aAAA,CAAc,CAAC,IAAIA;QAAA,EAC9C,iBAEA6F,GAAA,CAACsB,KAAA;UACE,GAAGzB,gBAAA;UACJ6B,UAAA,EAAYxH,YAAA;UACZT,KAAA,EAAOZ,KAAA,CAAM6C,MAAA,CAAO,CAAC,CAAC;UACtB6F,QAAA,EAAUpF,SAAA,CAAU,CAAC;UACrBqF,QAAA,EAAUpD,MAAA;UACVhG,KAAA,EACE,OAAOA,KAAA,KAAU,aACbA,KAAA,CAAM0F,gBAAA,CAAiBjF,KAAA,CAAM6C,MAAA,CAAO,CAAC,CAAC,GAAG7B,SAAS,CAAC,IACnDzB,KAAA;UAENgB,GAAA,EAAMqI,IAAA,IAAS;YACb,IAAIA,IAAA,EAAM;cACR1F,MAAA,CAAOS,OAAA,CAAQ,CAAC,IAAIiF,IAAA;YACtB;UACF;UACAE,WAAA,EAAaA,CAAA,KAAMnD,oBAAA,CAAqB,CAAC;UACzCoD,OAAA,EAASA,CAAA,KAAMtG,UAAA,CAAW,CAAC;UAC3B5C,gBAAA;UACAmJ,SAAA,EAAWrG,OAAA;UACX7C,QAAA;UACC,GAAGgC,UAAA,GAAa,CAAC;UAEjBuF,QAAA,EAAAH,qBAAA,GAAwB5F,aAAA,CAAc,CAAC,IAAIA;QAAA;MAC9C,EACF,iBAEA6F,GAAA,CAAC;QAAM8B,IAAA,EAAK;QAAS9H,IAAA,EAAM,GAAGA,IAAI;QAASP,KAAA,EAAOiC,MAAA,CAAO,CAAC;QAAI,GAAGjB;MAAA,CAAkB,kBACnFuF,GAAA,CAAC;QAAM8B,IAAA,EAAK;QAAS9H,IAAA,EAAM,GAAGA,IAAI;QAAOP,KAAA,EAAOiC,MAAA,CAAO,CAAC;QAAI,GAAGjB;MAAA,CAAkB;IAAA;EACnF,CACF;AAEJ,CAAC;AAEDxB,WAAA,CAAY+B,OAAA,GAAUA,OAAA;AACtB/B,WAAA,CAAY8I,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}