{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"sizes\", \"onSizesChange\", \"style\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState, useRef, useEffect } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { isScrollingWithinScrollbarBounds } from '../utils/is-scrolling-within-scrollbar-bounds.mjs';\nimport { getThumbSize } from '../utils/get-thumb-size.mjs';\nimport { toInt } from '../utils/to-int.mjs';\nimport { Scrollbar } from './Scrollbar.mjs';\nconst ScrollAreaScrollbarY = forwardRef((props, forwardedRef) => {\n  const {\n      sizes,\n      onSizesChange,\n      style\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const context = useScrollAreaContext();\n  const [computedStyle, setComputedStyle] = useState();\n  const ref = useRef(null);\n  const composeRefs = useMergedRef(forwardedRef, ref, context.onScrollbarYChange);\n  useEffect(() => {\n    if (ref.current) {\n      setComputedStyle(window.getComputedStyle(ref.current));\n    }\n  }, []);\n  return /* @__PURE__ */jsx(Scrollbar, _objectSpread(_objectSpread({}, others), {}, {\n    \"data-orientation\": \"vertical\",\n    ref: composeRefs,\n    sizes,\n    style: _objectSpread({\n      [\"--sa-thumb-height\"]: \"\".concat(getThumbSize(sizes), \"px\")\n    }, style),\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.y),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.y),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollTop + event.deltaY;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollHeight,\n          viewport: context.viewport.offsetHeight,\n          scrollbar: {\n            size: ref.current.clientHeight,\n            paddingStart: toInt(computedStyle.paddingTop),\n            paddingEnd: toInt(computedStyle.paddingBottom)\n          }\n        });\n      }\n    }\n  }));\n});\nScrollAreaScrollbarY.displayName = \"@mantine/core/ScrollAreaScrollbarY\";\nexport { ScrollAreaScrollbarY };","map":{"version":3,"names":["ScrollAreaScrollbarY","forwardRef","props","forwardedRef","sizes","onSizesChange","style","others","_objectWithoutProperties","_excluded","context","useScrollAreaContext","computedStyle","setComputedStyle","useState","ref","useRef","composeRefs","useMergedRef","onScrollbarYChange","useEffect","current","window","getComputedStyle","jsx","Scrollbar","_objectSpread","concat","getThumbSize","onThumbPointerDown","pointerPos","y","onDragScroll","onWheelScroll","event","maxScrollPos","viewport","scrollPos","scrollTop","deltaY","isScrollingWithinScrollbarBounds","preventDefault","onResize","content","scrollHeight","offsetHeight","scrollbar","size","clientHeight","paddingStart","toInt","paddingTop","paddingEnd","paddingBottom","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollbarY.tsx"],"sourcesContent":["import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { ScrollAreaScrollbarAxisProps } from '../ScrollArea.types';\nimport { getThumbSize, isScrollingWithinScrollbarBounds, toInt } from '../utils';\nimport { Scrollbar } from './Scrollbar';\n\nexport const ScrollAreaScrollbarY = forwardRef<HTMLDivElement, ScrollAreaScrollbarAxisProps>(\n  (props, forwardedRef) => {\n    const { sizes, onSizesChange, style, ...others } = props;\n    const context = useScrollAreaContext();\n    const [computedStyle, setComputedStyle] = useState<CSSStyleDeclaration>();\n    const ref = useRef<HTMLDivElement>(null);\n    const composeRefs = useMergedRef(forwardedRef, ref, context.onScrollbarYChange);\n\n    useEffect(() => {\n      if (ref.current) {\n        setComputedStyle(window.getComputedStyle(ref.current));\n      }\n    }, []);\n\n    return (\n      <Scrollbar\n        {...others}\n        data-orientation=\"vertical\"\n        ref={composeRefs}\n        sizes={sizes}\n        style={{\n          ['--sa-thumb-height' as any]: `${getThumbSize(sizes)}px`,\n          ...style,\n        }}\n        onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n        onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n        onWheelScroll={(event, maxScrollPos) => {\n          if (context.viewport) {\n            const scrollPos = context.viewport.scrollTop + event.deltaY;\n            props.onWheelScroll(scrollPos);\n            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n              event.preventDefault();\n            }\n          }\n        }}\n        onResize={() => {\n          if (ref.current && context.viewport && computedStyle) {\n            onSizesChange({\n              content: context.viewport.scrollHeight,\n              viewport: context.viewport.offsetHeight,\n              scrollbar: {\n                size: ref.current.clientHeight,\n                paddingStart: toInt(computedStyle.paddingTop),\n                paddingEnd: toInt(computedStyle.paddingBottom),\n              },\n            });\n          }\n        }}\n      />\n    );\n  }\n);\n\nScrollAreaScrollbarY.displayName = '@mantine/core/ScrollAreaScrollbarY';\n"],"mappings":";;;;;;;;;;;;;AAOO,MAAMA,oBAAA,GAAuBC,UAAA,CAClC,CAACC,KAAA,EAAOC,YAAA,KAAiB;EACvB,MAAM;MAAEC,KAAA;MAAOC,aAAA;MAAeC;IAAU,CAAO,GAAIJ,KAAA;IAAXK,MAAA,GAAAC,wBAAA,CAAWN,KAAA,EAAAO,SAAA;EACnD,MAAMC,OAAA,GAAUC,oBAAA,EAAqB;EACrC,MAAM,CAACC,aAAA,EAAeC,gBAAgB,IAAIC,QAAA,EAA8B;EACxE,MAAMC,GAAA,GAAMC,MAAA,CAAuB,IAAI;EACvC,MAAMC,WAAA,GAAcC,YAAA,CAAaf,YAAA,EAAcY,GAAA,EAAKL,OAAA,CAAQS,kBAAkB;EAE9EC,SAAA,CAAU,MAAM;IACd,IAAIL,GAAA,CAAIM,OAAA,EAAS;MACfR,gBAAA,CAAiBS,MAAA,CAAOC,gBAAA,CAAiBR,GAAA,CAAIM,OAAO,CAAC;IACvD;EACF,GAAG,EAAE;EAEL,sBACEG,GAAA,CAACC,SAAA,EAAAC,aAAA,CAAAA,aAAA,KACKnB,MAAA;IACJ,oBAAiB;IACjBQ,GAAA,EAAKE,WAAA;IACLb,KAAA;IACAE,KAAA,EAAAoB,aAAA;MACE,CAAC,mBAA0B,MAAAC,MAAA,CAAMC,YAAA,CAAaxB,KAAK,CAAC;IAAA,GACjDE,KAAA,CACL;IACAuB,kBAAA,EAAqBC,UAAA,IAAe5B,KAAA,CAAM2B,kBAAA,CAAmBC,UAAA,CAAWC,CAAC;IACzEC,YAAA,EAAeF,UAAA,IAAe5B,KAAA,CAAM8B,YAAA,CAAaF,UAAA,CAAWC,CAAC;IAC7DE,aAAA,EAAeA,CAACC,KAAA,EAAOC,YAAA,KAAiB;MACtC,IAAIzB,OAAA,CAAQ0B,QAAA,EAAU;QACpB,MAAMC,SAAA,GAAY3B,OAAA,CAAQ0B,QAAA,CAASE,SAAA,GAAYJ,KAAA,CAAMK,MAAA;QACrDrC,KAAA,CAAM+B,aAAA,CAAcI,SAAS;QAC7B,IAAIG,gCAAA,CAAiCH,SAAA,EAAWF,YAAY,GAAG;UAC7DD,KAAA,CAAMO,cAAA,EAAe;QACvB;MACF;IACF;IACAC,QAAA,EAAUA,CAAA,KAAM;MACd,IAAI3B,GAAA,CAAIM,OAAA,IAAWX,OAAA,CAAQ0B,QAAA,IAAYxB,aAAA,EAAe;QACpDP,aAAA,CAAc;UACZsC,OAAA,EAASjC,OAAA,CAAQ0B,QAAA,CAASQ,YAAA;UAC1BR,QAAA,EAAU1B,OAAA,CAAQ0B,QAAA,CAASS,YAAA;UAC3BC,SAAA,EAAW;YACTC,IAAA,EAAMhC,GAAA,CAAIM,OAAA,CAAQ2B,YAAA;YAClBC,YAAA,EAAcC,KAAA,CAAMtC,aAAA,CAAcuC,UAAU;YAC5CC,UAAA,EAAYF,KAAA,CAAMtC,aAAA,CAAcyC,aAAa;UAAA;QAC/C,CACD;MACH;IACF;EAAA,GACF;AAEJ,CACF;AAEArD,oBAAA,CAAqBsD,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}