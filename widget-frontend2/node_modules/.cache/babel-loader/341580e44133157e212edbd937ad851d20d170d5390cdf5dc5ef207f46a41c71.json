{"ast":null,"code":"'use client';\n\nimport { useRef } from 'react';\nimport { useForceUpdate } from '../use-force-update/use-force-update.mjs';\nfunction readonlySetLikeToSet(input) {\n  if (input instanceof Set) {\n    return input;\n  }\n  const result = /* @__PURE__ */new Set();\n  for (const item of input) {\n    result.add(item);\n  }\n  return result;\n}\nfunction useSet(values) {\n  const setRef = useRef(new Set(values));\n  const forceUpdate = useForceUpdate();\n  setRef.current.add = (...args) => {\n    const res = Set.prototype.add.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n  setRef.current.clear = (...args) => {\n    Set.prototype.clear.apply(setRef.current, args);\n    forceUpdate();\n  };\n  setRef.current.delete = (...args) => {\n    const res = Set.prototype.delete.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n  setRef.current.union = other => {\n    const result = new Set(setRef.current);\n    readonlySetLikeToSet(other).forEach(item => result.add(item));\n    return result;\n  };\n  setRef.current.intersection = other => {\n    const result = /* @__PURE__ */new Set();\n    const otherSet = readonlySetLikeToSet(other);\n    setRef.current.forEach(item => {\n      if (otherSet.has(item)) {\n        result.add(item);\n      }\n    });\n    return result;\n  };\n  setRef.current.difference = other => {\n    const result = /* @__PURE__ */new Set();\n    const otherSet = readonlySetLikeToSet(other);\n    setRef.current.forEach(item => {\n      if (!otherSet.has(item)) {\n        result.add(item);\n      }\n    });\n    return result;\n  };\n  setRef.current.symmetricDifference = other => {\n    const result = /* @__PURE__ */new Set();\n    const otherSet = readonlySetLikeToSet(other);\n    setRef.current.forEach(item => {\n      if (!otherSet.has(item)) {\n        result.add(item);\n      }\n    });\n    otherSet.forEach(item => {\n      if (!setRef.current.has(item)) {\n        result.add(item);\n      }\n    });\n    return result;\n  };\n  return setRef.current;\n}\nexport { readonlySetLikeToSet, useSet };","map":{"version":3,"names":["readonlySetLikeToSet","input","Set","result","item","add","useSet","values","setRef","useRef","forceUpdate","useForceUpdate","current","args","res","prototype","apply","clear","delete","union","other","forEach","intersection","otherSet","has","difference","symmetricDifference"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-set/use-set.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { useForceUpdate } from '../use-force-update/use-force-update';\n\nexport function readonlySetLikeToSet<T>(input: ReadonlySetLike<T>): Set<T> {\n  if (input instanceof Set) {\n    return input;\n  }\n  const result = new Set<T>();\n  for (const item of input as any) {\n    result.add(item);\n  }\n  return result;\n}\n\nexport function useSet<T>(values?: T[]): Set<T> {\n  const setRef = useRef(new Set(values));\n  const forceUpdate = useForceUpdate();\n\n  setRef.current.add = (...args) => {\n    const res = Set.prototype.add.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n\n  setRef.current.clear = (...args) => {\n    Set.prototype.clear.apply(setRef.current, args);\n    forceUpdate();\n  };\n\n  setRef.current.delete = (...args) => {\n    const res = Set.prototype.delete.apply(setRef.current, args);\n    forceUpdate();\n    return res;\n  };\n\n  setRef.current.union = <U>(other: ReadonlySetLike<U>): Set<T | U> => {\n    const result = new Set<T | U>(setRef.current as Set<T>);\n    readonlySetLikeToSet(other).forEach((item) => result.add(item));\n    return result;\n  };\n\n  setRef.current.intersection = <U>(other: ReadonlySetLike<U>): Set<T & U> => {\n    const result = new Set<T & U>();\n    const otherSet = readonlySetLikeToSet(other);\n    setRef.current.forEach((item) => {\n      if (otherSet.has(item as any)) {\n        result.add(item as T & U);\n      }\n    });\n    return result;\n  };\n\n  setRef.current.difference = <U>(other: ReadonlySetLike<U>): Set<T> => {\n    const result = new Set<T>();\n    const otherSet = readonlySetLikeToSet(other);\n    setRef.current.forEach((item) => {\n      if (!otherSet.has(item as any)) {\n        result.add(item);\n      }\n    });\n    return result;\n  };\n\n  setRef.current.symmetricDifference = <U>(other: ReadonlySetLike<U>): Set<T | U> => {\n    const result = new Set<T | U>();\n    const otherSet = readonlySetLikeToSet(other);\n\n    setRef.current.forEach((item) => {\n      if (!otherSet.has(item as any)) {\n        result.add(item);\n      }\n    });\n\n    otherSet.forEach((item) => {\n      if (!setRef.current.has(item as any)) {\n        result.add(item);\n      }\n    });\n\n    return result;\n  };\n\n  return setRef.current;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}