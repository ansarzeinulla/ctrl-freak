{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useId, useUncontrolled, useElementSize } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Anchor } from '../Anchor/Anchor.mjs';\nimport classes from './Spoiler.module.css.mjs';\nconst defaultProps = {\n  maxHeight: 100,\n  initialState: false\n};\nconst varsResolver = createVarsResolver((_, {\n  transitionDuration\n}) => ({\n  root: {\n    \"--spoiler-transition-duration\": transitionDuration !== void 0 ? `${transitionDuration}ms` : void 0\n  }\n}));\nconst Spoiler = factory((_props, ref) => {\n  const props = useProps(\"Spoiler\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    initialState,\n    maxHeight,\n    hideLabel,\n    showLabel,\n    children,\n    controlRef,\n    transitionDuration,\n    id,\n    expanded,\n    onExpandedChange,\n    attributes,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Spoiler\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  const _id = useId(id);\n  const regionId = `${_id}-region`;\n  const [show, setShowState] = useUncontrolled({\n    value: expanded,\n    defaultValue: initialState,\n    finalValue: false,\n    onChange: onExpandedChange\n  });\n  const {\n    ref: contentRef,\n    height\n  } = useElementSize();\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n  const spoiler = spoilerMoreContent !== null && maxHeight < height;\n  return /* @__PURE__ */jsxs(Box, {\n    ...getStyles(\"root\"),\n    id: _id,\n    ref,\n    \"data-has-spoiler\": spoiler || void 0,\n    ...others,\n    children: [spoiler && /* @__PURE__ */jsx(Anchor, {\n      component: \"button\",\n      type: \"button\",\n      ref: controlRef,\n      onClick: () => setShowState(!show),\n      \"aria-expanded\": show,\n      \"aria-controls\": regionId,\n      ...getStyles(\"control\"),\n      children: spoilerMoreContent\n    }), /* @__PURE__ */jsx(\"div\", {\n      ...getStyles(\"content\", {\n        style: {\n          maxHeight: !show ? rem(maxHeight) : height ? rem(height) : void 0\n        }\n      }),\n      \"data-reduce-motion\": true,\n      role: \"region\",\n      id: regionId,\n      children: /* @__PURE__ */jsx(\"div\", {\n        ref: contentRef,\n        children\n      })\n    })]\n  });\n});\nSpoiler.classes = classes;\nSpoiler.displayName = \"@mantine/core/Spoiler\";\nexport { Spoiler };","map":{"version":3,"names":["defaultProps","maxHeight","initialState","varsResolver","createVarsResolver","_","transitionDuration","root","Spoiler","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","hideLabel","showLabel","children","controlRef","id","expanded","onExpandedChange","attributes","others","getStyles","useStyles","name","classes","_id","useId","regionId","show","setShowState","useUncontrolled","value","defaultValue","finalValue","onChange","contentRef","height","useElementSize","spoilerMoreContent","spoiler","jsxs","Box","jsx","Anchor","component","type","onClick","rem","role","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Spoiler/Spoiler.tsx"],"sourcesContent":["import { useElementSize, useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { Anchor } from '../Anchor';\nimport classes from './Spoiler.module.css';\n\nexport type SpoilerStylesNames = 'root' | 'control' | 'content';\nexport type SpoilerCssVariables = {\n  root: '--spoiler-transition-duration';\n};\n\nexport interface SpoilerProps\n  extends BoxProps,\n    StylesApiProps<SpoilerFactory>,\n    ElementProps<'div'> {\n  /** Maximum height of the visible content, when this point is reached spoiler appears @default `100` */\n  maxHeight?: number;\n\n  /** Label for close spoiler action */\n  hideLabel: React.ReactNode;\n\n  /** Label for open spoiler action */\n  showLabel: React.ReactNode;\n\n  /** Get ref of spoiler toggle button */\n  controlRef?: React.ForwardedRef<HTMLButtonElement>;\n\n  /** Initial spoiler state, `true` to wrap content in spoiler, `false` to show content without spoiler, opened state is updated on mount */\n  initialState?: boolean;\n\n  /** Controlled expanded state value */\n  expanded?: boolean;\n\n  /** Called when expanded state changes (when spoiler visibility is toggled by the user) */\n  onExpandedChange?: (expanded: boolean) => void;\n\n  /** Spoiler reveal transition duration in ms, set 0 or null to turn off animation @default `200` */\n  transitionDuration?: number;\n}\n\nexport type SpoilerFactory = Factory<{\n  props: SpoilerProps;\n  ref: HTMLDivElement;\n  stylesNames: SpoilerStylesNames;\n  vars: SpoilerCssVariables;\n}>;\n\nconst defaultProps = {\n  maxHeight: 100,\n  initialState: false,\n} satisfies Partial<SpoilerProps>;\n\nconst varsResolver = createVarsResolver<SpoilerFactory>((_, { transitionDuration }) => ({\n  root: {\n    '--spoiler-transition-duration':\n      transitionDuration !== undefined ? `${transitionDuration}ms` : undefined,\n  },\n}));\n\nexport const Spoiler = factory<SpoilerFactory>((_props, ref) => {\n  const props = useProps('Spoiler', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    initialState,\n    maxHeight,\n    hideLabel,\n    showLabel,\n    children,\n    controlRef,\n    transitionDuration,\n    id,\n    expanded,\n    onExpandedChange,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SpoilerFactory>({\n    name: 'Spoiler',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const _id = useId(id);\n  const regionId = `${_id}-region`;\n  const [show, setShowState] = useUncontrolled({\n    value: expanded,\n    defaultValue: initialState,\n    finalValue: false,\n    onChange: onExpandedChange,\n  });\n  const { ref: contentRef, height } = useElementSize();\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n  const spoiler = spoilerMoreContent !== null && maxHeight! < height;\n\n  return (\n    <Box\n      {...getStyles('root')}\n      id={_id}\n      ref={ref}\n      data-has-spoiler={spoiler || undefined}\n      {...others}\n    >\n      {spoiler && (\n        <Anchor\n          component=\"button\"\n          type=\"button\"\n          ref={controlRef}\n          onClick={() => setShowState(!show)}\n          aria-expanded={show}\n          aria-controls={regionId}\n          {...getStyles('control')}\n        >\n          {spoilerMoreContent}\n        </Anchor>\n      )}\n      <div\n        {...getStyles('content', {\n          style: { maxHeight: !show ? rem(maxHeight) : height ? rem(height) : undefined },\n        })}\n        data-reduce-motion\n        role=\"region\"\n        id={regionId}\n      >\n        <div ref={contentRef}>{children}</div>\n      </div>\n    </Box>\n  );\n});\n\nSpoiler.classes = classes;\nSpoiler.displayName = '@mantine/core/Spoiler';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAyDA,MAAMA,YAAA,GAAe;EACnBC,SAAA,EAAW;EACXC,YAAA,EAAc;AAChB;AAEA,MAAMC,YAAA,GAAeC,kBAAA,CAAmC,CAACC,CAAA,EAAG;EAAEC;AAAA,CAAmB,MAAO;EACtFC,IAAA,EAAM;IACJ,iCACED,kBAAA,KAAuB,SAAY,GAAGA,kBAAkB,OAAO;EAAA;AAErE,EAAE;AAEK,MAAME,OAAA,GAAUC,OAAA,CAAwB,CAACC,MAAA,EAAQC,GAAA,KAAQ;EAC9D,MAAMC,KAAA,GAAQC,QAAA,CAAS,WAAWb,YAAA,EAAcU,MAAM;EACtD,MAAM;IACJI,UAAA;IACAC,SAAA;IACAC,KAAA;IACAC,MAAA;IACAC,QAAA;IACAC,IAAA;IACAjB,YAAA;IACAD,SAAA;IACAmB,SAAA;IACAC,SAAA;IACAC,QAAA;IACAC,UAAA;IACAjB,kBAAA;IACAkB,EAAA;IACAC,QAAA;IACAC,gBAAA;IACAC,UAAA;IACA,GAAGC;EAAA,CACL,GAAIhB,KAAA;EAEJ,MAAMiB,SAAA,GAAYC,SAAA,CAA0B;IAC1CC,IAAA,EAAM;IACNC,OAAA;IACApB,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAS,UAAA;IACAR,IAAA;IACAhB;EAAA,CACD;EAED,MAAM8B,GAAA,GAAMC,KAAA,CAAMV,EAAE;EACpB,MAAMW,QAAA,GAAW,GAAGF,GAAG;EACvB,MAAM,CAACG,IAAA,EAAMC,YAAY,IAAIC,eAAA,CAAgB;IAC3CC,KAAA,EAAOd,QAAA;IACPe,YAAA,EAActC,YAAA;IACduC,UAAA,EAAY;IACZC,QAAA,EAAUhB;EAAA,CACX;EACD,MAAM;IAAEf,GAAA,EAAKgC,UAAA;IAAYC;EAAA,IAAWC,cAAA,EAAe;EACnD,MAAMC,kBAAA,GAAqBV,IAAA,GAAOhB,SAAA,GAAYC,SAAA;EAC9C,MAAM0B,OAAA,GAAUD,kBAAA,KAAuB,QAAQ7C,SAAA,GAAa2C,MAAA;EAE5D,sBACEI,IAAA,CAACC,GAAA;IACE,GAAGpB,SAAA,CAAU,MAAM;IACpBL,EAAA,EAAIS,GAAA;IACJtB,GAAA;IACA,oBAAkBoC,OAAA,IAAW;IAC5B,GAAGnB,MAAA;IAEHN,QAAA,GAAAyB,OAAA,mBACCG,GAAA,CAACC,MAAA;MACCC,SAAA,EAAU;MACVC,IAAA,EAAK;MACL1C,GAAA,EAAKY,UAAA;MACL+B,OAAA,EAASA,CAAA,KAAMjB,YAAA,CAAa,CAACD,IAAI;MACjC,iBAAeA,IAAA;MACf,iBAAeD,QAAA;MACd,GAAGN,SAAA,CAAU,SAAS;MAEtBP,QAAA,EAAAwB;IAAA,EACH,iBAEFI,GAAA,CAAC;MACE,GAAGrB,SAAA,CAAU,WAAW;QACvBb,KAAA,EAAO;UAAEf,SAAA,EAAW,CAACmC,IAAA,GAAOmB,GAAA,CAAItD,SAAS,IAAI2C,MAAA,GAASW,GAAA,CAAIX,MAAM,IAAI;QAAA;MAAU,CAC/E;MACD,sBAAkB;MAClBY,IAAA,EAAK;MACLhC,EAAA,EAAIW,QAAA;MAEJb,QAAA,iBAAA4B,GAAA,CAAC;QAAIvC,GAAA,EAAKgC,UAAA;QAAarB;MAAA,CAAS;IAAA;EAClC,EACF;AAEJ,CAAC;AAEDd,OAAA,CAAQwB,OAAA,GAAUA,OAAA;AAClBxB,OAAA,CAAQiD,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}