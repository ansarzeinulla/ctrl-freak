{"ast":null,"code":"'use client';\n\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade.mjs';\nimport { isLightColor } from '../luminance/luminance.mjs';\nfunction parseThemeColor(_ref) {\n  let {\n    color,\n    theme,\n    colorScheme\n  } = _ref;\n  if (typeof color !== \"string\") {\n    throw new Error(\"[@mantine/core] Failed to parse color. Expected color to be a string, instead got \".concat(typeof color));\n  }\n  if (color === \"bright\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-bright\"\n    };\n  }\n  if (color === \"dimmed\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[6], theme.luminanceThreshold),\n      variable: \"--mantine-color-dimmed\"\n    };\n  }\n  if (color === \"white\" || color === \"black\") {\n    return {\n      color,\n      value: color === \"white\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(color === \"white\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-\".concat(color)\n    };\n  }\n  const [_color, shade] = color.split(\".\");\n  const colorShade = shade ? Number(shade) : void 0;\n  const isThemeColor = _color in theme.colors;\n  if (isThemeColor) {\n    const colorValue = colorShade !== void 0 ? theme.colors[_color][colorShade] : theme.colors[_color][getPrimaryShade(theme, colorScheme || \"light\")];\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade ? \"--mantine-color-\".concat(_color, \"-\").concat(colorShade) : \"--mantine-color-\".concat(_color, \"-filled\")\n    };\n  }\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: void 0\n  };\n}\nexport { parseThemeColor };","map":{"version":3,"names":["parseThemeColor","_ref","color","theme","colorScheme","Error","concat","value","white","black","shade","isThemeColor","isLight","isLightColor","luminanceThreshold","variable","colors","dark","gray","_color","split","colorShade","Number","colorValue","getPrimaryShade"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.ts"],"sourcesContent":["import type { CssVariable } from '../../../Box';\nimport type { MantineColorScheme, MantineColorShade, MantineTheme } from '../../theme.types';\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade';\nimport { isLightColor } from '../luminance/luminance';\n\ninterface ParseThemeColorOptions {\n  color: unknown;\n  theme: MantineTheme;\n  colorScheme?: MantineColorScheme;\n}\n\ninterface ParseThemeColorResult {\n  color: string;\n  value: string;\n  shade: MantineColorShade | undefined;\n  variable: CssVariable | undefined;\n  isThemeColor: boolean;\n  isLight: boolean;\n}\n\nexport function parseThemeColor({\n  color,\n  theme,\n  colorScheme,\n}: ParseThemeColorOptions): ParseThemeColorResult {\n  if (typeof color !== 'string') {\n    throw new Error(\n      `[@mantine/core] Failed to parse color. Expected color to be a string, instead got ${typeof color}`\n    );\n  }\n\n  if (color === 'bright') {\n    return {\n      color,\n      value: colorScheme === 'dark' ? theme.white : theme.black,\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        colorScheme === 'dark' ? theme.white : theme.black,\n        theme.luminanceThreshold\n      ),\n      variable: '--mantine-color-bright',\n    };\n  }\n\n  if (color === 'dimmed') {\n    return {\n      color,\n      value: colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n        theme.luminanceThreshold\n      ),\n      variable: '--mantine-color-dimmed',\n    };\n  }\n\n  if (color === 'white' || color === 'black') {\n    return {\n      color,\n      value: color === 'white' ? theme.white : theme.black,\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        color === 'white' ? theme.white : theme.black,\n        theme.luminanceThreshold\n      ),\n      variable: `--mantine-color-${color}`,\n    };\n  }\n\n  const [_color, shade] = color.split('.');\n  const colorShade = shade ? (Number(shade) as MantineColorShade) : undefined;\n  const isThemeColor = _color in theme.colors;\n\n  if (isThemeColor) {\n    const colorValue =\n      colorShade !== undefined\n        ? theme.colors[_color][colorShade]\n        : theme.colors[_color][getPrimaryShade(theme, colorScheme || 'light')];\n\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade\n        ? `--mantine-color-${_color}-${colorShade}`\n        : `--mantine-color-${_color}-filled`,\n    };\n  }\n\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: undefined,\n  };\n}\n"],"mappings":";;;;AAoBO,SAASA,gBAAAC,IAAA,EAIkC;EAAA,IAJlB;IAC9BC,KAAA;IACAC,KAAA;IACAC;EACF,IAAAH,IAAA;EACE,IAAI,OAAOC,KAAA,KAAU,UAAU;IAC7B,MAAM,IAAIG,KAAA,sFAAAC,MAAA,CAC6E,OAAOJ,KAAK,EACnG;EACF;EAEA,IAAIA,KAAA,KAAU,UAAU;IACtB,OAAO;MACLA,KAAA;MACAK,KAAA,EAAOH,WAAA,KAAgB,SAASD,KAAA,CAAMK,KAAA,GAAQL,KAAA,CAAMM,KAAA;MACpDC,KAAA,EAAO;MACPC,YAAA,EAAc;MACdC,OAAA,EAASC,YAAA,CACPT,WAAA,KAAgB,SAASD,KAAA,CAAMK,KAAA,GAAQL,KAAA,CAAMM,KAAA,EAC7CN,KAAA,CAAMW,kBAAA,CACR;MACAC,QAAA,EAAU;IAAA,CACZ;EACF;EAEA,IAAIb,KAAA,KAAU,UAAU;IACtB,OAAO;MACLA,KAAA;MACAK,KAAA,EAAOH,WAAA,KAAgB,SAASD,KAAA,CAAMa,MAAA,CAAOC,IAAA,CAAK,CAAC,IAAId,KAAA,CAAMa,MAAA,CAAOE,IAAA,CAAK,CAAC;MAC1ER,KAAA,EAAO;MACPC,YAAA,EAAc;MACdC,OAAA,EAASC,YAAA,CACPT,WAAA,KAAgB,SAASD,KAAA,CAAMa,MAAA,CAAOC,IAAA,CAAK,CAAC,IAAId,KAAA,CAAMa,MAAA,CAAOE,IAAA,CAAK,CAAC,GACnEf,KAAA,CAAMW,kBAAA,CACR;MACAC,QAAA,EAAU;IAAA,CACZ;EACF;EAEA,IAAIb,KAAA,KAAU,WAAWA,KAAA,KAAU,SAAS;IAC1C,OAAO;MACLA,KAAA;MACAK,KAAA,EAAOL,KAAA,KAAU,UAAUC,KAAA,CAAMK,KAAA,GAAQL,KAAA,CAAMM,KAAA;MAC/CC,KAAA,EAAO;MACPC,YAAA,EAAc;MACdC,OAAA,EAASC,YAAA,CACPX,KAAA,KAAU,UAAUC,KAAA,CAAMK,KAAA,GAAQL,KAAA,CAAMM,KAAA,EACxCN,KAAA,CAAMW,kBAAA,CACR;MACAC,QAAA,qBAAAT,MAAA,CAA6BJ,KAAK;IAAA,CACpC;EACF;EAEA,MAAM,CAACiB,MAAA,EAAQT,KAAK,IAAIR,KAAA,CAAMkB,KAAA,CAAM,GAAG;EACvC,MAAMC,UAAA,GAAaX,KAAA,GAASY,MAAA,CAAOZ,KAAK,IAA0B;EAClE,MAAMC,YAAA,GAAeQ,MAAA,IAAUhB,KAAA,CAAMa,MAAA;EAErC,IAAIL,YAAA,EAAc;IAChB,MAAMY,UAAA,GACJF,UAAA,KAAe,SACXlB,KAAA,CAAMa,MAAA,CAAOG,MAAM,EAAEE,UAAU,IAC/BlB,KAAA,CAAMa,MAAA,CAAOG,MAAM,EAAEK,eAAA,CAAgBrB,KAAA,EAAOC,WAAA,IAAe,OAAO,CAAC;IAEzE,OAAO;MACLF,KAAA,EAAOiB,MAAA;MACPZ,KAAA,EAAOgB,UAAA;MACPb,KAAA,EAAOW,UAAA;MACPV,YAAA;MACAC,OAAA,EAASC,YAAA,CAAaU,UAAA,EAAYpB,KAAA,CAAMW,kBAAkB;MAC1DC,QAAA,EAAUL,KAAA,sBAAAJ,MAAA,CACaa,MAAM,OAAAb,MAAA,CAAIe,UAAU,uBAAAf,MAAA,CACpBa,MAAM;IAAA,CAC/B;EACF;EAEA,OAAO;IACLjB,KAAA;IACAK,KAAA,EAAOL,KAAA;IACPS,YAAA;IACAC,OAAA,EAASC,YAAA,CAAaX,KAAA,EAAOC,KAAA,CAAMW,kBAAkB;IACrDJ,KAAA,EAAOW,UAAA;IACPN,QAAA,EAAU;EAAA,CACZ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}