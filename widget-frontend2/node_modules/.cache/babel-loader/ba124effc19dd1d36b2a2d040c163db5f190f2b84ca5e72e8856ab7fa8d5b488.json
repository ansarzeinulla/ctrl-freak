{"ast":null,"code":"'use client';\n\nimport { useReducer } from 'react';\nfunction useToggle() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [false, true];\n  const [[option], toggle] = useReducer((state, action) => {\n    const value = action instanceof Function ? action(state[0]) : action;\n    const index = Math.abs(state.indexOf(value));\n    return state.slice(index).concat(state.slice(0, index));\n  }, options);\n  return [option, toggle];\n}\nexport { useToggle };","map":{"version":3,"names":["useToggle","options","arguments","length","undefined","option","toggle","useReducer","state","action","value","Function","index","Math","abs","indexOf","slice","concat"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-toggle/use-toggle.ts"],"sourcesContent":["import { useReducer } from 'react';\n\ntype UseToggleAction<T> = (value?: React.SetStateAction<T>) => void;\nexport type UseToggleReturnValue<T> = [T, UseToggleAction<T>];\n\nexport function useToggle<T = boolean>(\n  options: readonly T[] = [false, true] as any\n): UseToggleReturnValue<T> {\n  const [[option], toggle] = useReducer((state: T[], action: React.SetStateAction<T>) => {\n    const value = action instanceof Function ? action(state[0]) : action;\n    const index = Math.abs(state.indexOf(value));\n\n    return state.slice(index).concat(state.slice(0, index));\n  }, options as T[]);\n\n  return [option, toggle as UseToggleAction<T>];\n}\n"],"mappings":";;;AAKO,SAASA,UAAA,EAEW;EAAA,IADzBC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,CAAC,OAAO,IAAI;EAEpC,MAAM,CAAC,CAACG,MAAM,GAAGC,MAAM,IAAIC,UAAA,CAAW,CAACC,KAAA,EAAYC,MAAA,KAAoC;IACrF,MAAMC,KAAA,GAAQD,MAAA,YAAkBE,QAAA,GAAWF,MAAA,CAAOD,KAAA,CAAM,CAAC,CAAC,IAAIC,MAAA;IAC9D,MAAMG,KAAA,GAAQC,IAAA,CAAKC,GAAA,CAAIN,KAAA,CAAMO,OAAA,CAAQL,KAAK,CAAC;IAE3C,OAAOF,KAAA,CAAMQ,KAAA,CAAMJ,KAAK,EAAEK,MAAA,CAAOT,KAAA,CAAMQ,KAAA,CAAM,GAAGJ,KAAK,CAAC;EACxD,GAAGX,OAAc;EAEjB,OAAO,CAACI,MAAA,EAAQC,MAA4B;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}