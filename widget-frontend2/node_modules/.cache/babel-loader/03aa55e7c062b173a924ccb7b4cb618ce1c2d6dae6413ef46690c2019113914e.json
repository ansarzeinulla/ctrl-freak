{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { createContext, useContext, useMemo } from 'react';\nimport { DEFAULT_THEME } from '../default-theme.mjs';\nimport { mergeMantineTheme } from '../merge-mantine-theme/merge-mantine-theme.mjs';\nconst MantineThemeContext = createContext(null);\nconst useSafeMantineTheme = () => useContext(MantineThemeContext) || DEFAULT_THEME;\nfunction useMantineTheme() {\n  const ctx = useContext(MantineThemeContext);\n  if (!ctx) {\n    throw new Error(\"@mantine/core: MantineProvider was not found in component tree, make sure you have it in your app\");\n  }\n  return ctx;\n}\nfunction MantineThemeProvider({\n  theme,\n  children,\n  inherit = true\n}) {\n  const parentTheme = useSafeMantineTheme();\n  const mergedTheme = useMemo(() => mergeMantineTheme(inherit ? parentTheme : DEFAULT_THEME, theme), [theme, parentTheme, inherit]);\n  return /* @__PURE__ */jsx(MantineThemeContext.Provider, {\n    value: mergedTheme,\n    children\n  });\n}\nMantineThemeProvider.displayName = \"@mantine/core/MantineThemeProvider\";\nexport { MantineThemeContext, MantineThemeProvider, useMantineTheme, useSafeMantineTheme };","map":{"version":3,"names":["MantineThemeContext","createContext","useSafeMantineTheme","useContext","DEFAULT_THEME","useMantineTheme","ctx","Error","MantineThemeProvider","theme","children","inherit","parentTheme","mergedTheme","useMemo","mergeMantineTheme","jsx","Provider","value","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/core/MantineProvider/MantineThemeProvider/MantineThemeProvider.tsx"],"sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { DEFAULT_THEME } from '../default-theme';\nimport { mergeMantineTheme } from '../merge-mantine-theme';\nimport { MantineTheme, MantineThemeOverride } from '../theme.types';\n\nexport const MantineThemeContext = createContext<MantineTheme | null>(null);\n\nexport const useSafeMantineTheme = () => useContext(MantineThemeContext) || DEFAULT_THEME;\n\nexport function useMantineTheme() {\n  const ctx = useContext(MantineThemeContext);\n  if (!ctx) {\n    throw new Error(\n      '@mantine/core: MantineProvider was not found in component tree, make sure you have it in your app'\n    );\n  }\n\n  return ctx;\n}\n\nexport interface MantineThemeProviderProps {\n  /** Determines whether theme should be inherited from parent MantineProvider @default `true` */\n  inherit?: boolean;\n\n  /** Theme override object */\n  theme?: MantineThemeOverride;\n\n  /** Your application or part of the application that requires different theme */\n  children?: React.ReactNode;\n}\n\nexport function MantineThemeProvider({\n  theme,\n  children,\n  inherit = true,\n}: MantineThemeProviderProps) {\n  const parentTheme = useSafeMantineTheme();\n  const mergedTheme = useMemo(\n    () => mergeMantineTheme(inherit ? parentTheme : DEFAULT_THEME, theme),\n    [theme, parentTheme, inherit]\n  );\n\n  return (\n    <MantineThemeContext.Provider value={mergedTheme}>{children}</MantineThemeContext.Provider>\n  );\n}\n\nMantineThemeProvider.displayName = '@mantine/core/MantineThemeProvider';\n"],"mappings":";;;;;;AAKO,MAAMA,mBAAA,GAAsBC,aAAA,CAAmC,IAAI;AAEnE,MAAMC,mBAAA,GAAsBA,CAAA,KAAMC,UAAA,CAAWH,mBAAmB,KAAKI,aAAA;AAErE,SAASC,gBAAA,EAAkB;EAChC,MAAMC,GAAA,GAAMH,UAAA,CAAWH,mBAAmB;EAC1C,IAAI,CAACM,GAAA,EAAK;IACR,MAAM,IAAIC,KAAA,CACR,oGACF;EACF;EAEA,OAAOD,GAAA;AACT;AAaO,SAASE,qBAAqB;EACnCC,KAAA;EACAC,QAAA;EACAC,OAAA,GAAU;AACZ,GAA8B;EAC5B,MAAMC,WAAA,GAAcV,mBAAA,EAAoB;EACxC,MAAMW,WAAA,GAAcC,OAAA,CAClB,MAAMC,iBAAA,CAAkBJ,OAAA,GAAUC,WAAA,GAAcR,aAAA,EAAeK,KAAK,GACpE,CAACA,KAAA,EAAOG,WAAA,EAAaD,OAAO,EAC9B;EAEA,sBAAAK,GAAA,CACGhB,mBAAA,CAAoBiB,QAAA,EAApB;IAA6BC,KAAA,EAAOL,WAAA;IAAcH;EAAA,CAAS;AAEhE;AAEAF,oBAAA,CAAqBW,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}