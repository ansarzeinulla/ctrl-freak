{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect.mjs';\nfunction isMacOS(userAgent) {\n  const macosPattern = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  return macosPattern.test(userAgent);\n}\nfunction isIOS(userAgent) {\n  const iosPattern = /(iPhone)|(iPad)|(iPod)/i;\n  return iosPattern.test(userAgent);\n}\nfunction isWindows(userAgent) {\n  const windowsPattern = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  return windowsPattern.test(userAgent);\n}\nfunction isAndroid(userAgent) {\n  const androidPattern = /Android/i;\n  return androidPattern.test(userAgent);\n}\nfunction isLinux(userAgent) {\n  const linuxPattern = /Linux/i;\n  return linuxPattern.test(userAgent);\n}\nfunction isChromeOS(userAgent) {\n  const chromePattern = /CrOS/i;\n  return chromePattern.test(userAgent);\n}\nfunction getOS() {\n  if (typeof window === \"undefined\") {\n    return \"undetermined\";\n  }\n  const {\n    userAgent\n  } = window.navigator;\n  if (isIOS(userAgent) || isMacOS(userAgent) && \"ontouchend\" in document) {\n    return \"ios\";\n  }\n  if (isMacOS(userAgent)) {\n    return \"macos\";\n  }\n  if (isWindows(userAgent)) {\n    return \"windows\";\n  }\n  if (isAndroid(userAgent)) {\n    return \"android\";\n  }\n  if (isLinux(userAgent)) {\n    return \"linux\";\n  }\n  if (isChromeOS(userAgent)) {\n    return \"chromeos\";\n  }\n  return \"undetermined\";\n}\nfunction useOs() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    getValueInEffect: true\n  };\n  const [value, setValue] = useState(options.getValueInEffect ? \"undetermined\" : getOS());\n  useIsomorphicEffect(() => {\n    if (options.getValueInEffect) {\n      setValue(getOS);\n    }\n  }, []);\n  return value;\n}\nexport { useOs };","map":{"version":3,"names":["isMacOS","userAgent","macosPattern","test","isIOS","iosPattern","isWindows","windowsPattern","isAndroid","androidPattern","isLinux","linuxPattern","isChromeOS","chromePattern","getOS","window","navigator","document","useOs","options","arguments","length","undefined","getValueInEffect","value","setValue","useState","useIsomorphicEffect"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-os/use-os.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect';\n\nexport type UseOSReturnValue =\n  | 'undetermined'\n  | 'macos'\n  | 'ios'\n  | 'windows'\n  | 'android'\n  | 'linux'\n  | 'chromeos';\n\nfunction isMacOS(userAgent: string): boolean {\n  const macosPattern = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n\n  return macosPattern.test(userAgent);\n}\n\nfunction isIOS(userAgent: string): boolean {\n  const iosPattern = /(iPhone)|(iPad)|(iPod)/i;\n\n  return iosPattern.test(userAgent);\n}\n\nfunction isWindows(userAgent: string): boolean {\n  const windowsPattern = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n\n  return windowsPattern.test(userAgent);\n}\n\nfunction isAndroid(userAgent: string): boolean {\n  const androidPattern = /Android/i;\n\n  return androidPattern.test(userAgent);\n}\n\nfunction isLinux(userAgent: string): boolean {\n  const linuxPattern = /Linux/i;\n\n  return linuxPattern.test(userAgent);\n}\n\nfunction isChromeOS(userAgent: string): boolean {\n  const chromePattern = /CrOS/i;\n  return chromePattern.test(userAgent);\n}\n\nfunction getOS(): UseOSReturnValue {\n  if (typeof window === 'undefined') {\n    return 'undetermined';\n  }\n\n  const { userAgent } = window.navigator;\n\n  if (isIOS(userAgent) || (isMacOS(userAgent) && 'ontouchend' in document)) {\n    return 'ios';\n  }\n  if (isMacOS(userAgent)) {\n    return 'macos';\n  }\n  if (isWindows(userAgent)) {\n    return 'windows';\n  }\n  if (isAndroid(userAgent)) {\n    return 'android';\n  }\n  if (isLinux(userAgent)) {\n    return 'linux';\n  }\n  if (isChromeOS(userAgent)) {\n    return 'chromeos';\n  }\n\n  return 'undetermined';\n}\n\nexport interface UseOsOptions {\n  getValueInEffect: boolean;\n}\n\nexport function useOs(options: UseOsOptions = { getValueInEffect: true }): UseOSReturnValue {\n  const [value, setValue] = useState<UseOSReturnValue>(\n    options.getValueInEffect ? 'undetermined' : getOS()\n  );\n\n  useIsomorphicEffect(() => {\n    if (options.getValueInEffect) {\n      setValue(getOS);\n    }\n  }, []);\n\n  return value;\n}\n"],"mappings":";;;;AAYA,SAASA,QAAQC,SAAA,EAA4B;EAC3C,MAAMC,YAAA,GAAe;EAErB,OAAOA,YAAA,CAAaC,IAAA,CAAKF,SAAS;AACpC;AAEA,SAASG,MAAMH,SAAA,EAA4B;EACzC,MAAMI,UAAA,GAAa;EAEnB,OAAOA,UAAA,CAAWF,IAAA,CAAKF,SAAS;AAClC;AAEA,SAASK,UAAUL,SAAA,EAA4B;EAC7C,MAAMM,cAAA,GAAiB;EAEvB,OAAOA,cAAA,CAAeJ,IAAA,CAAKF,SAAS;AACtC;AAEA,SAASO,UAAUP,SAAA,EAA4B;EAC7C,MAAMQ,cAAA,GAAiB;EAEvB,OAAOA,cAAA,CAAeN,IAAA,CAAKF,SAAS;AACtC;AAEA,SAASS,QAAQT,SAAA,EAA4B;EAC3C,MAAMU,YAAA,GAAe;EAErB,OAAOA,YAAA,CAAaR,IAAA,CAAKF,SAAS;AACpC;AAEA,SAASW,WAAWX,SAAA,EAA4B;EAC9C,MAAMY,aAAA,GAAgB;EACtB,OAAOA,aAAA,CAAcV,IAAA,CAAKF,SAAS;AACrC;AAEA,SAASa,MAAA,EAA0B;EACjC,IAAI,OAAOC,MAAA,KAAW,aAAa;IACjC,OAAO;EACT;EAEA,MAAM;IAAEd;EAAA,CAAU,GAAIc,MAAA,CAAOC,SAAA;EAE7B,IAAIZ,KAAA,CAAMH,SAAS,KAAMD,OAAA,CAAQC,SAAS,KAAK,gBAAgBgB,QAAA,EAAW;IACxE,OAAO;EACT;EACA,IAAIjB,OAAA,CAAQC,SAAS,GAAG;IACtB,OAAO;EACT;EACA,IAAIK,SAAA,CAAUL,SAAS,GAAG;IACxB,OAAO;EACT;EACA,IAAIO,SAAA,CAAUP,SAAS,GAAG;IACxB,OAAO;EACT;EACA,IAAIS,OAAA,CAAQT,SAAS,GAAG;IACtB,OAAO;EACT;EACA,IAAIW,UAAA,CAAWX,SAAS,GAAG;IACzB,OAAO;EACT;EAEA,OAAO;AACT;AAMO,SAASiB,MAAA,EAA4E;EAAA,IAAtEC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB;IAAEG,gBAAA,EAAkB;EAAA,CAAK;EACrE,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CACxBP,OAAA,CAAQI,gBAAA,GAAmB,iBAAiBT,KAAA,EAAM,CACpD;EAEAa,mBAAA,CAAoB,MAAM;IACxB,IAAIR,OAAA,CAAQI,gBAAA,EAAkB;MAC5BE,QAAA,CAASX,KAAK;IAChB;EACF,GAAG,EAAE;EAEL,OAAOU,KAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}