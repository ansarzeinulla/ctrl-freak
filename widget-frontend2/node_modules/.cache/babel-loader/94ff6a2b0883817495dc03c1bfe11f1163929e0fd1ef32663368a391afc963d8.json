{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { useRef, useEffect } from 'react';\nimport { useId, useMergedRef, useUncontrolled } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport '../Combobox/ComboboxHiddenInput/ComboboxHiddenInput.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Pill } from '../Pill/Pill.mjs';\nimport '../Pill/PillGroup/PillGroup.mjs';\nimport { PillsInput } from '../PillsInput/PillsInput.mjs';\nimport '../PillsInput/PillsInputField/PillsInputField.mjs';\nimport { filterPickedTags } from './filter-picked-tags.mjs';\nimport { getSplittedTags } from './get-splitted-tags.mjs';\nconst defaultProps = {\n  maxTags: Infinity,\n  acceptValueOnBlur: true,\n  splitChars: [\",\"],\n  hiddenInputValuesDivider: \",\",\n  size: \"sm\"\n};\nconst TagsInput = factory((_props, ref) => {\n  const props = useProps(\"TagsInput\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    maxTags,\n    allowDuplicates,\n    onDuplicate,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    splitChars,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    required,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    hiddenInputValuesDivider,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    acceptValueOnBlur,\n    isDuplicate,\n    attributes,\n    ...others\n  } = props;\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const inputRef = useRef(null);\n  const _ref = useMergedRef(inputRef, ref);\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    }\n  });\n  const {\n    styleProps,\n    rest: {\n      type,\n      autoComplete,\n      ...rest\n    }\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange\n  });\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: \"\",\n    onChange: onSearchChange\n  });\n  const handleSearchChange = value2 => {\n    setSearchValue(value2);\n    combobox.resetSelectedOption();\n  };\n  const getStyles = useStyles({\n    name: \"TagsInput\",\n    classes: {},\n    props,\n    classNames,\n    styles,\n    unstyled\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  const handleValueSelect = val => {\n    const isDuplicated = isDuplicate ? isDuplicate(val, _value) : _value.some(tag => tag.toLowerCase() === val.toLowerCase());\n    if (isDuplicated) {\n      onDuplicate?.(val);\n    }\n    if ((!isDuplicated || isDuplicated && allowDuplicates) && _value.length < maxTags) {\n      onOptionSubmit?.(val);\n      handleSearchChange(\"\");\n      if (val.length > 0) {\n        setValue([..._value, val]);\n      }\n    }\n  };\n  const handleInputKeydown = event => {\n    onKeyDown?.(event);\n    if (event.isPropagationStopped()) {\n      return;\n    }\n    const inputValue = _searchValue.trim();\n    const {\n      length\n    } = inputValue;\n    if (splitChars.includes(event.key) && length > 0) {\n      setValue(getSplittedTags({\n        splitChars,\n        allowDuplicates,\n        maxTags,\n        value: _searchValue,\n        currentTags: _value\n      }));\n      handleSearchChange(\"\");\n      event.preventDefault();\n    }\n    if (event.key === \"Enter\" && length > 0 && !event.nativeEvent.isComposing) {\n      event.preventDefault();\n      const hasActiveSelection = !!document.querySelector(`#${combobox.listId} [data-combobox-option][data-combobox-selected]`);\n      if (hasActiveSelection) {\n        return;\n      }\n      handleValueSelect(inputValue);\n    }\n    if (event.key === \"Backspace\" && length === 0 && _value.length > 0 && !event.nativeEvent.isComposing && !readOnly) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n  const handlePaste = event => {\n    onPaste?.(event);\n    event.preventDefault();\n    if (event.clipboardData) {\n      const pastedText = event.clipboardData.getData(\"text/plain\");\n      setValue(getSplittedTags({\n        splitChars,\n        allowDuplicates,\n        maxTags,\n        value: `${_searchValue}${pastedText}`,\n        currentTags: _value\n      }));\n      handleSearchChange(\"\");\n    }\n  };\n  const values = _value.map((item, index) => /* @__PURE__ */jsx(Pill, {\n    withRemoveButton: !readOnly,\n    onRemove: () => {\n      const next_value = _value.slice();\n      next_value.splice(index, 1);\n      setValue(next_value);\n      onRemove?.(item);\n    },\n    unstyled,\n    disabled,\n    attributes,\n    ...getStyles(\"pill\"),\n    children: item\n  }, `${item}-${index}`));\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value, _searchValue]);\n  const clearButton = /* @__PURE__ */jsx(Combobox.ClearButton, {\n    ...clearButtonProps,\n    onClear: () => {\n      setValue([]);\n      handleSearchChange(\"\");\n      inputRef.current?.focus();\n      combobox.openDropdown();\n      onClear?.();\n    }\n  });\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsxs(Combobox, {\n      store: combobox,\n      classNames: resolvedClassNames,\n      styles: resolvedStyles,\n      unstyled,\n      size,\n      readOnly,\n      __staticSelector: \"TagsInput\",\n      attributes,\n      onOptionSubmit: val => {\n        onOptionSubmit?.(val);\n        handleSearchChange(\"\");\n        _value.length < maxTags && setValue([..._value, optionsLockup[val].label]);\n        combobox.resetSelectedOption();\n      },\n      ...comboboxProps,\n      children: [/* @__PURE__ */jsx(Combobox.DropdownTarget, {\n        children: /* @__PURE__ */jsx(PillsInput, {\n          ...styleProps,\n          __staticSelector: \"TagsInput\",\n          classNames: resolvedClassNames,\n          styles: resolvedStyles,\n          unstyled,\n          size,\n          className,\n          style,\n          variant,\n          disabled,\n          radius,\n          rightSection,\n          __clearSection: clearButton,\n          __clearable: clearable && _value.length > 0 && !disabled && !readOnly,\n          rightSectionWidth,\n          rightSectionPointerEvents,\n          rightSectionProps,\n          leftSection,\n          leftSectionWidth,\n          leftSectionPointerEvents,\n          leftSectionProps,\n          inputContainer,\n          inputWrapperOrder,\n          withAsterisk,\n          required,\n          labelProps,\n          descriptionProps,\n          errorProps,\n          wrapperProps,\n          description,\n          label,\n          error,\n          withErrorStyles,\n          __stylesApiProps: {\n            ...props,\n            multiline: true\n          },\n          id: _id,\n          mod,\n          attributes,\n          children: /* @__PURE__ */jsxs(Pill.Group, {\n            disabled,\n            unstyled,\n            ...getStyles(\"pillsList\"),\n            children: [values, /* @__PURE__ */jsx(Combobox.EventsTarget, {\n              autoComplete,\n              children: /* @__PURE__ */jsx(PillsInput.Field, {\n                ...rest,\n                ref: _ref,\n                ...getStyles(\"inputField\"),\n                unstyled,\n                onKeyDown: handleInputKeydown,\n                onFocus: event => {\n                  onFocus?.(event);\n                  combobox.openDropdown();\n                },\n                onBlur: event => {\n                  onBlur?.(event);\n                  acceptValueOnBlur && handleValueSelect(_searchValue);\n                  combobox.closeDropdown();\n                },\n                onPaste: handlePaste,\n                value: _searchValue,\n                onChange: event => handleSearchChange(event.currentTarget.value),\n                required: required && _value.length === 0,\n                disabled,\n                readOnly,\n                id: _id\n              })\n            })]\n          })\n        })\n      }), /* @__PURE__ */jsx(OptionsDropdown, {\n        data: filterPickedTags({\n          data: parsedData,\n          value: _value\n        }),\n        hidden: readOnly || disabled,\n        filter,\n        search: _searchValue,\n        limit,\n        hiddenWhenEmpty: true,\n        withScrollArea,\n        maxDropdownHeight,\n        unstyled,\n        labelId: label ? `${_id}-label` : void 0,\n        \"aria-label\": label ? void 0 : others[\"aria-label\"],\n        renderOption,\n        scrollAreaProps\n      })]\n    }), /* @__PURE__ */jsx(Combobox.HiddenInput, {\n      name,\n      form,\n      value: _value,\n      valuesDivider: hiddenInputValuesDivider,\n      disabled,\n      ...hiddenInputProps\n    })]\n  });\n});\nTagsInput.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nTagsInput.displayName = \"@mantine/core/TagsInput\";\nexport { TagsInput };","map":{"version":3,"names":["defaultProps","maxTags","Infinity","acceptValueOnBlur","splitChars","hiddenInputValuesDivider","size","TagsInput","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","value","defaultValue","onChange","onKeyDown","allowDuplicates","onDuplicate","variant","data","dropdownOpened","defaultDropdownOpened","onDropdownOpen","onDropdownClose","selectFirstOptionOnChange","onOptionSubmit","comboboxProps","filter","limit","withScrollArea","maxDropdownHeight","searchValue","defaultSearchValue","onSearchChange","readOnly","disabled","onFocus","onBlur","onPaste","radius","rightSection","rightSectionWidth","rightSectionPointerEvents","rightSectionProps","leftSection","leftSectionWidth","leftSectionPointerEvents","leftSectionProps","inputContainer","inputWrapperOrder","withAsterisk","required","labelProps","descriptionProps","errorProps","wrapperProps","description","label","error","withErrorStyles","name","form","id","clearable","clearButtonProps","hiddenInputProps","mod","renderOption","onRemove","onClear","scrollAreaProps","isDuplicate","attributes","others","_id","useId","parsedData","getParsedComboboxData","optionsLockup","getOptionsLockup","inputRef","useRef","_ref","useMergedRef","combobox","useCombobox","opened","defaultOpened","resetSelectedOption","styleProps","rest","type","autoComplete","extractStyleProps","_value","setValue","useUncontrolled","finalValue","_searchValue","setSearchValue","handleSearchChange","value2","getStyles","useStyles","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","handleValueSelect","val","isDuplicated","some","tag","toLowerCase","length","handleInputKeydown","event","isPropagationStopped","inputValue","trim","includes","key","getSplittedTags","currentTags","preventDefault","nativeEvent","isComposing","hasActiveSelection","document","querySelector","listId","slice","handlePaste","clipboardData","pastedText","getData","values","map","item","index","jsx","Pill","withRemoveButton","next_value","splice","children","useEffect","selectFirstOption","clearButton","Combobox","ClearButton","current","focus","openDropdown","jsxs","Fragment","store","__staticSelector","DropdownTarget","PillsInput","__clearSection","__clearable","__stylesApiProps","multiline","Group","EventsTarget","Field","closeDropdown","currentTarget","OptionsDropdown","filterPickedTags","hidden","search","hiddenWhenEmpty","labelId","HiddenInput","valuesDivider","InputBase","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/TagsInput/TagsInput.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useId, useMergedRef, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport {\n  Combobox,\n  ComboboxLikeProps,\n  ComboboxLikeRenderOptionInput,\n  ComboboxLikeStylesNames,\n  ComboboxStringData,\n  ComboboxStringItem,\n  getOptionsLockup,\n  getParsedComboboxData,\n  OptionsDropdown,\n  useCombobox,\n} from '../Combobox';\nimport { __BaseInputProps, __InputStylesNames, InputClearButtonProps } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { Pill } from '../Pill';\nimport { PillsInput } from '../PillsInput';\nimport { ScrollAreaProps } from '../ScrollArea';\nimport { filterPickedTags } from './filter-picked-tags';\nimport { getSplittedTags } from './get-splitted-tags';\n\nexport type TagsInputStylesNames =\n  | __InputStylesNames\n  | ComboboxLikeStylesNames\n  | 'pill'\n  | 'pillsList'\n  | 'inputField';\n\nexport interface TagsInputProps\n  extends BoxProps,\n    __BaseInputProps,\n    Omit<ComboboxLikeProps, 'data'>,\n    StylesApiProps<TagsInputFactory>,\n    ElementProps<'input', 'size' | 'value' | 'defaultValue' | 'onChange'> {\n  /** Data displayed in the dropdown. Values must be unique. */\n  data?: ComboboxStringData;\n\n  /** Controlled component value */\n  value?: string[];\n\n  /** Uncontrolled component default value */\n  defaultValue?: string[];\n\n  /** Called when value changes */\n  onChange?: (value: string[]) => void;\n\n  /** Called when tag is removed */\n  onRemove?: (value: string) => void;\n\n  /** Called when the clear button is clicked */\n  onClear?: () => void;\n\n  /** Controlled search value */\n  searchValue?: string;\n\n  /** Default search value */\n  defaultSearchValue?: string;\n\n  /** Called when search changes */\n  onSearchChange?: (value: string) => void;\n\n  /** Maximum number of tags @default `Infinity` */\n  maxTags?: number;\n\n  /** If set, duplicate tags are allowed @default `false` */\n  allowDuplicates?: boolean;\n\n  /** Called when user tries to submit a duplicated tag */\n  onDuplicate?: (value: string) => void;\n\n  /** Characters that should trigger tags split, `[',']` by default */\n  splitChars?: string[];\n\n  /** If set, the clear button is displayed in the right section when the component has value @default `false` */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: InputClearButtonProps;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: Omit<React.ComponentPropsWithoutRef<'input'>, 'value'>;\n\n  /** Divider used to separate values in the hidden input `value` attribute @default `','` */\n  hiddenInputValuesDivider?: string;\n\n  /** A function to render content of the option, replaces the default content of the option */\n  renderOption?: (input: ComboboxLikeRenderOptionInput<ComboboxStringItem>) => React.ReactNode;\n\n  /** Props passed down to the underlying `ScrollArea` component in the dropdown */\n  scrollAreaProps?: ScrollAreaProps;\n\n  /** If set, the value typed in by the user but not submitted is accepted when the input is blurred @default `true` */\n  acceptValueOnBlur?: boolean;\n\n  /** Custom function to determine if a tag is duplicate. Accepts tag value and array of current values. By default, checks if the tag exists case-insensitively. */\n  isDuplicate?: (value: string, currentValues: string[]) => boolean;\n}\n\nexport type TagsInputFactory = Factory<{\n  props: TagsInputProps;\n  ref: HTMLInputElement;\n  stylesNames: TagsInputStylesNames;\n}>;\n\nconst defaultProps = {\n  maxTags: Infinity,\n  acceptValueOnBlur: true,\n  splitChars: [','],\n  hiddenInputValuesDivider: ',',\n  size: 'sm',\n} satisfies Partial<TagsInputProps>;\n\nexport const TagsInput = factory<TagsInputFactory>((_props, ref) => {\n  const props = useProps('TagsInput', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    maxTags,\n    allowDuplicates,\n    onDuplicate,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    splitChars,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    required,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    hiddenInputValuesDivider,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    acceptValueOnBlur,\n    isDuplicate,\n    attributes,\n    ...others\n  } = props;\n\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const _ref = useMergedRef(inputRef, ref);\n\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    },\n  });\n\n  const {\n    styleProps,\n    rest: { type, autoComplete, ...rest },\n  } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange,\n  });\n\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: '',\n    onChange: onSearchChange,\n  });\n\n  const handleSearchChange = (value: string) => {\n    setSearchValue(value);\n    combobox.resetSelectedOption();\n  };\n\n  const getStyles = useStyles<TagsInputFactory>({\n    name: 'TagsInput',\n    classes: {} as any,\n    props,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<TagsInputFactory>({\n    props,\n    styles,\n    classNames,\n  });\n\n  const handleValueSelect = (val: string) => {\n    const isDuplicated = isDuplicate\n      ? isDuplicate(val, _value)\n      : _value.some((tag) => tag.toLowerCase() === val.toLowerCase());\n\n    if (isDuplicated) {\n      onDuplicate?.(val);\n    }\n\n    if ((!isDuplicated || (isDuplicated && allowDuplicates)) && _value.length < maxTags) {\n      onOptionSubmit?.(val);\n      handleSearchChange('');\n      if (val.length > 0) {\n        setValue([..._value, val]);\n      }\n    }\n  };\n\n  const handleInputKeydown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (event.isPropagationStopped()) {\n      return;\n    }\n\n    const inputValue = _searchValue.trim();\n    const { length } = inputValue;\n\n    if (splitChars.includes(event.key) && length > 0) {\n      setValue(\n        getSplittedTags({\n          splitChars,\n          allowDuplicates,\n          maxTags,\n          value: _searchValue,\n          currentTags: _value,\n        })\n      );\n      handleSearchChange('');\n      event.preventDefault();\n    }\n\n    if (event.key === 'Enter' && length > 0 && !event.nativeEvent.isComposing) {\n      event.preventDefault();\n\n      const hasActiveSelection = !!document.querySelector<HTMLDivElement>(\n        `#${combobox.listId} [data-combobox-option][data-combobox-selected]`\n      );\n\n      if (hasActiveSelection) {\n        return;\n      }\n\n      handleValueSelect(inputValue);\n    }\n\n    if (\n      event.key === 'Backspace' &&\n      length === 0 &&\n      _value.length > 0 &&\n      !event.nativeEvent.isComposing &&\n      !readOnly\n    ) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    onPaste?.(event);\n    event.preventDefault();\n\n    if (event.clipboardData) {\n      const pastedText = event.clipboardData.getData('text/plain');\n      setValue(\n        getSplittedTags({\n          splitChars,\n          allowDuplicates,\n          maxTags,\n          value: `${_searchValue}${pastedText}`,\n          currentTags: _value,\n        })\n      );\n      handleSearchChange('');\n    }\n  };\n\n  const values = _value.map((item, index) => (\n    <Pill\n      key={`${item}-${index}`}\n      withRemoveButton={!readOnly}\n      onRemove={() => {\n        const next_value = _value.slice();\n        next_value.splice(index, 1);\n        setValue(next_value);\n        onRemove?.(item);\n      }}\n      unstyled={unstyled}\n      disabled={disabled}\n      attributes={attributes}\n      {...getStyles('pill')}\n    >\n      {item}\n    </Pill>\n  ));\n\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value, _searchValue]);\n\n  const clearButton = (\n    <Combobox.ClearButton\n      {...clearButtonProps}\n      onClear={() => {\n        setValue([]);\n        handleSearchChange('');\n        inputRef.current?.focus();\n        combobox.openDropdown();\n        onClear?.();\n      }}\n    />\n  );\n\n  return (\n    <>\n      <Combobox\n        store={combobox}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        size={size}\n        readOnly={readOnly}\n        __staticSelector=\"TagsInput\"\n        attributes={attributes}\n        onOptionSubmit={(val) => {\n          onOptionSubmit?.(val);\n          handleSearchChange('');\n          _value.length < maxTags && setValue([..._value, optionsLockup[val].label]);\n\n          combobox.resetSelectedOption();\n        }}\n        {...comboboxProps}\n      >\n        <Combobox.DropdownTarget>\n          <PillsInput\n            {...styleProps}\n            __staticSelector=\"TagsInput\"\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n            size={size}\n            className={className}\n            style={style}\n            variant={variant}\n            disabled={disabled}\n            radius={radius}\n            rightSection={rightSection}\n            __clearSection={clearButton}\n            __clearable={clearable && _value.length > 0 && !disabled && !readOnly}\n            rightSectionWidth={rightSectionWidth}\n            rightSectionPointerEvents={rightSectionPointerEvents}\n            rightSectionProps={rightSectionProps}\n            leftSection={leftSection}\n            leftSectionWidth={leftSectionWidth}\n            leftSectionPointerEvents={leftSectionPointerEvents}\n            leftSectionProps={leftSectionProps}\n            inputContainer={inputContainer}\n            inputWrapperOrder={inputWrapperOrder}\n            withAsterisk={withAsterisk}\n            required={required}\n            labelProps={labelProps}\n            descriptionProps={descriptionProps}\n            errorProps={errorProps}\n            wrapperProps={wrapperProps}\n            description={description}\n            label={label}\n            error={error}\n            withErrorStyles={withErrorStyles}\n            __stylesApiProps={{ ...props, multiline: true }}\n            id={_id}\n            mod={mod}\n            attributes={attributes}\n          >\n            <Pill.Group disabled={disabled} unstyled={unstyled} {...getStyles('pillsList')}>\n              {values}\n              <Combobox.EventsTarget autoComplete={autoComplete}>\n                <PillsInput.Field\n                  {...rest}\n                  ref={_ref}\n                  {...getStyles('inputField')}\n                  unstyled={unstyled}\n                  onKeyDown={handleInputKeydown}\n                  onFocus={(event) => {\n                    onFocus?.(event);\n                    combobox.openDropdown();\n                  }}\n                  onBlur={(event) => {\n                    onBlur?.(event);\n                    acceptValueOnBlur && handleValueSelect(_searchValue);\n                    combobox.closeDropdown();\n                  }}\n                  onPaste={handlePaste}\n                  value={_searchValue}\n                  onChange={(event) => handleSearchChange(event.currentTarget.value)}\n                  required={required && _value.length === 0}\n                  disabled={disabled}\n                  readOnly={readOnly}\n                  id={_id}\n                />\n              </Combobox.EventsTarget>\n            </Pill.Group>\n          </PillsInput>\n        </Combobox.DropdownTarget>\n\n        <OptionsDropdown\n          data={filterPickedTags({ data: parsedData, value: _value })}\n          hidden={readOnly || disabled}\n          filter={filter}\n          search={_searchValue}\n          limit={limit}\n          hiddenWhenEmpty\n          withScrollArea={withScrollArea}\n          maxDropdownHeight={maxDropdownHeight}\n          unstyled={unstyled}\n          labelId={label ? `${_id}-label` : undefined}\n          aria-label={label ? undefined : others['aria-label']}\n          renderOption={renderOption}\n          scrollAreaProps={scrollAreaProps}\n        />\n      </Combobox>\n      <Combobox.HiddenInput\n        name={name}\n        form={form}\n        value={_value}\n        valuesDivider={hiddenInputValuesDivider}\n        disabled={disabled}\n        {...hiddenInputProps}\n      />\n    </>\n  );\n});\n\nTagsInput.classes = { ...InputBase.classes, ...Combobox.classes };\nTagsInput.displayName = '@mantine/core/TagsInput';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}