{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"className\", \"classNames\", \"styles\", \"unstyled\", \"vars\", \"onChange\", \"onValueChange\", \"value\", \"defaultValue\", \"max\", \"min\", \"step\", \"hideControls\", \"rightSection\", \"isAllowed\", \"clampBehavior\", \"onBlur\", \"allowDecimal\", \"decimalScale\", \"onKeyDown\", \"onKeyDownCapture\", \"handlersRef\", \"startValue\", \"disabled\", \"rightSectionPointerEvents\", \"allowNegative\", \"readOnly\", \"size\", \"rightSectionWidth\", \"stepHoldInterval\", \"stepHoldDelay\", \"allowLeadingZeros\", \"withKeyboardEvents\", \"trimLeadingZeroesOnBlur\", \"attributes\"];\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useRef } from 'react';\nimport cx from 'clsx';\nimport { NumericFormat } from 'react-number-format';\nimport { useUncontrolled, clamp, assignRef, useMergedRef } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport { noop } from '../../core/utils/noop/noop.mjs';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { UnstyledButton } from '../UnstyledButton/UnstyledButton.mjs';\nimport { NumberInputChevron } from './NumberInputChevron.mjs';\nimport classes from './NumberInput.module.css.mjs';\nconst leadingDecimalZeroPattern = /^(0\\.0*|-0(\\.0*)?)$/;\nconst leadingZerosPattern = /^-?0\\d+(\\.\\d+)?\\.?$/;\nconst trailingZerosPattern = /\\.\\d*0$/;\nfunction isNumberString(value) {\n  return typeof value === \"string\" && value !== \"\" && !Number.isNaN(Number(value));\n}\nfunction canIncrement(value) {\n  if (typeof value === \"number\") {\n    return value < Number.MAX_SAFE_INTEGER;\n  }\n  return value === \"\" || isNumberString(value) && Number(value) < Number.MAX_SAFE_INTEGER;\n}\nfunction getDecimalPlaces(inputValue) {\n  return inputValue.toString().replace(\".\", \"\").length;\n}\nfunction isValidNumber(floatValue, value) {\n  return (typeof floatValue === \"number\" ? floatValue < Number.MAX_SAFE_INTEGER : !Number.isNaN(Number(floatValue))) && !Number.isNaN(floatValue) && getDecimalPlaces(value) < 14 && value !== \"\";\n}\nfunction isInRange(value, min, max) {\n  if (value === void 0) {\n    return true;\n  }\n  const minValid = min === void 0 || value >= min;\n  const maxValid = max === void 0 || value <= max;\n  return minValid && maxValid;\n}\nconst defaultProps = {\n  step: 1,\n  clampBehavior: \"blur\",\n  allowDecimal: true,\n  allowNegative: true,\n  withKeyboardEvents: true,\n  allowLeadingZeros: true,\n  trimLeadingZeroesOnBlur: true,\n  startValue: 0\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    size\n  } = _ref;\n  return {\n    controls: {\n      \"--ni-chevron-size\": getSize(size, \"ni-chevron-size\")\n    }\n  };\n});\nfunction clampAndSanitizeInput(sanitizedValue, max, min) {\n  const replaced = sanitizedValue.toString().replace(/^0+/, \"\");\n  const parsedValue = parseFloat(replaced);\n  if (Number.isNaN(parsedValue)) {\n    return replaced;\n  } else if (parsedValue > Number.MAX_SAFE_INTEGER) {\n    return max !== void 0 ? max : replaced;\n  }\n  return clamp(parsedValue, min, max);\n}\nconst NumberInput = factory((_props, ref) => {\n  const props = useProps(\"NumberInput\", defaultProps, _props);\n  const {\n      className,\n      classNames,\n      styles,\n      unstyled,\n      vars,\n      onChange,\n      onValueChange,\n      value,\n      defaultValue,\n      max,\n      min,\n      step,\n      hideControls,\n      rightSection,\n      isAllowed,\n      clampBehavior,\n      onBlur,\n      allowDecimal,\n      decimalScale,\n      onKeyDown,\n      onKeyDownCapture,\n      handlersRef,\n      startValue,\n      disabled,\n      rightSectionPointerEvents,\n      allowNegative,\n      readOnly,\n      size,\n      rightSectionWidth,\n      stepHoldInterval,\n      stepHoldDelay,\n      allowLeadingZeros,\n      withKeyboardEvents,\n      trimLeadingZeroesOnBlur,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const getStyles = useStyles({\n    name: \"NumberInput\",\n    classes,\n    props,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: \"\",\n    onChange\n  });\n  const shouldUseStepInterval = stepHoldDelay !== void 0 && stepHoldInterval !== void 0;\n  const inputRef = useRef(null);\n  const onStepTimeoutRef = useRef(null);\n  const stepCountRef = useRef(0);\n  const handleValueChange = (payload, event) => {\n    if (event.source === \"event\") {\n      setValue(isValidNumber(payload.floatValue, payload.value) && !leadingDecimalZeroPattern.test(payload.value) && !(allowLeadingZeros ? leadingZerosPattern.test(payload.value) : false) && !trailingZerosPattern.test(payload.value) ? payload.floatValue : payload.value);\n    }\n    onValueChange === null || onValueChange === void 0 || onValueChange(payload, event);\n  };\n  const getDecimalPlaces2 = inputValue => {\n    const match = String(inputValue).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) {\n      return 0;\n    }\n    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n  };\n  const adjustCursor = position => {\n    if (inputRef.current && typeof position !== \"undefined\") {\n      inputRef.current.setSelectionRange(position, position);\n    }\n  };\n  const incrementRef = useRef(noop);\n  incrementRef.current = () => {\n    if (!canIncrement(_value)) {\n      return;\n    }\n    let val;\n    const currentValuePrecision = getDecimalPlaces2(_value);\n    const stepPrecision = getDecimalPlaces2(step);\n    const maxPrecision = Math.max(currentValuePrecision, stepPrecision);\n    const factor = 10 ** maxPrecision;\n    if (!isNumberString(_value) && (typeof _value !== \"number\" || Number.isNaN(_value))) {\n      val = clamp(startValue, min, max);\n    } else if (max !== void 0) {\n      const incrementedValue = (Math.round(Number(_value) * factor) + Math.round(step * factor)) / factor;\n      val = incrementedValue <= max ? incrementedValue : max;\n    } else {\n      val = (Math.round(Number(_value) * factor) + Math.round(step * factor)) / factor;\n    }\n    const formattedValue = val.toFixed(maxPrecision);\n    setValue(parseFloat(formattedValue));\n    onValueChange === null || onValueChange === void 0 || onValueChange({\n      floatValue: parseFloat(formattedValue),\n      formattedValue,\n      value: formattedValue\n    }, {\n      source: \"increment\"\n    });\n    setTimeout(() => {\n      var _inputRef$current;\n      return adjustCursor((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value.length);\n    }, 0);\n  };\n  const decrementRef = useRef(noop);\n  decrementRef.current = () => {\n    if (!canIncrement(_value)) {\n      return;\n    }\n    let val;\n    const minValue = min !== void 0 ? min : !allowNegative ? 0 : Number.MIN_SAFE_INTEGER;\n    const currentValuePrecision = getDecimalPlaces2(_value);\n    const stepPrecision = getDecimalPlaces2(step);\n    const maxPrecision = Math.max(currentValuePrecision, stepPrecision);\n    const factor = 10 ** maxPrecision;\n    if (!isNumberString(_value) && typeof _value !== \"number\" || Number.isNaN(_value)) {\n      val = clamp(startValue, minValue, max);\n    } else {\n      const decrementedValue = (Math.round(Number(_value) * factor) - Math.round(step * factor)) / factor;\n      val = minValue !== void 0 && decrementedValue < minValue ? minValue : decrementedValue;\n    }\n    const formattedValue = val.toFixed(maxPrecision);\n    setValue(parseFloat(formattedValue));\n    onValueChange === null || onValueChange === void 0 || onValueChange({\n      floatValue: parseFloat(formattedValue),\n      formattedValue,\n      value: formattedValue\n    }, {\n      source: \"decrement\"\n    });\n    setTimeout(() => {\n      var _inputRef$current2;\n      return adjustCursor((_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.value.length);\n    }, 0);\n  };\n  const handleKeyDown = event => {\n    onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);\n    if (readOnly || !withKeyboardEvents) {\n      return;\n    }\n    if (event.key === \"ArrowUp\") {\n      var _incrementRef$current;\n      event.preventDefault();\n      (_incrementRef$current = incrementRef.current) === null || _incrementRef$current === void 0 || _incrementRef$current.call(incrementRef);\n    }\n    if (event.key === \"ArrowDown\") {\n      var _decrementRef$current;\n      event.preventDefault();\n      (_decrementRef$current = decrementRef.current) === null || _decrementRef$current === void 0 || _decrementRef$current.call(decrementRef);\n    }\n  };\n  const handleKeyDownCapture = event => {\n    onKeyDownCapture === null || onKeyDownCapture === void 0 || onKeyDownCapture(event);\n    if (event.key === \"Backspace\") {\n      const input = inputRef.current;\n      if (input && input.selectionStart === 0 && input.selectionStart === input.selectionEnd) {\n        event.preventDefault();\n        window.setTimeout(() => adjustCursor(0), 0);\n      }\n    }\n  };\n  const handleBlur = event => {\n    let sanitizedValue = _value;\n    if (clampBehavior === \"blur\" && typeof sanitizedValue === \"number\") {\n      sanitizedValue = clamp(sanitizedValue, min, max);\n    }\n    if (trimLeadingZeroesOnBlur && typeof sanitizedValue === \"string\" && getDecimalPlaces2(sanitizedValue) < 15) {\n      sanitizedValue = clampAndSanitizeInput(sanitizedValue, max, min);\n    }\n    if (_value !== sanitizedValue) {\n      setValue(sanitizedValue);\n    }\n    onBlur === null || onBlur === void 0 || onBlur(event);\n  };\n  assignRef(handlersRef, {\n    increment: incrementRef.current,\n    decrement: decrementRef.current\n  });\n  const onStepHandleChange = isIncrement => {\n    if (isIncrement) {\n      var _incrementRef$current2;\n      (_incrementRef$current2 = incrementRef.current) === null || _incrementRef$current2 === void 0 || _incrementRef$current2.call(incrementRef);\n    } else {\n      var _decrementRef$current2;\n      (_decrementRef$current2 = decrementRef.current) === null || _decrementRef$current2 === void 0 || _decrementRef$current2.call(decrementRef);\n    }\n    stepCountRef.current += 1;\n  };\n  const onStepLoop = isIncrement => {\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      const interval = typeof stepHoldInterval === \"number\" ? stepHoldInterval : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);\n    }\n  };\n  const onStep = (event, isIncrement) => {\n    var _inputRef$current3;\n    event.preventDefault();\n    (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);\n    }\n  };\n  const onStepDone = () => {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n  const controls = /* @__PURE__ */jsxs(\"div\", _objectSpread(_objectSpread({}, getStyles(\"controls\")), {}, {\n    children: [/* @__PURE__ */jsx(UnstyledButton, _objectSpread(_objectSpread({}, getStyles(\"control\")), {}, {\n      tabIndex: -1,\n      \"aria-hidden\": true,\n      disabled: disabled || typeof _value === \"number\" && max !== void 0 && _value >= max,\n      mod: {\n        direction: \"up\"\n      },\n      onMouseDown: event => event.preventDefault(),\n      onPointerDown: event => {\n        onStep(event, true);\n      },\n      onPointerUp: onStepDone,\n      onPointerLeave: onStepDone,\n      children: /* @__PURE__ */jsx(NumberInputChevron, {\n        direction: \"up\"\n      })\n    })), /* @__PURE__ */jsx(UnstyledButton, _objectSpread(_objectSpread({}, getStyles(\"control\")), {}, {\n      tabIndex: -1,\n      \"aria-hidden\": true,\n      disabled: disabled || typeof _value === \"number\" && min !== void 0 && _value <= min,\n      mod: {\n        direction: \"down\"\n      },\n      onMouseDown: event => event.preventDefault(),\n      onPointerDown: event => {\n        onStep(event, false);\n      },\n      onPointerUp: onStepDone,\n      onPointerLeave: onStepDone,\n      children: /* @__PURE__ */jsx(NumberInputChevron, {\n        direction: \"down\"\n      })\n    }))]\n  }));\n  return /* @__PURE__ */jsx(InputBase, _objectSpread(_objectSpread({\n    component: NumericFormat,\n    allowNegative,\n    className: cx(classes.root, className),\n    size\n  }, others), {}, {\n    readOnly,\n    disabled,\n    value: _value,\n    getInputRef: useMergedRef(ref, inputRef),\n    onValueChange: handleValueChange,\n    rightSection: hideControls || readOnly || !canIncrement(_value) ? rightSection : rightSection || controls,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    __staticSelector: \"NumberInput\",\n    decimalScale: allowDecimal ? decimalScale : 0,\n    onKeyDown: handleKeyDown,\n    onKeyDownCapture: handleKeyDownCapture,\n    rightSectionPointerEvents: rightSectionPointerEvents !== null && rightSectionPointerEvents !== void 0 ? rightSectionPointerEvents : disabled ? \"none\" : void 0,\n    rightSectionWidth: rightSectionWidth !== null && rightSectionWidth !== void 0 ? rightSectionWidth : \"var(--ni-right-section-width-\".concat(size || \"sm\", \")\"),\n    allowLeadingZeros,\n    onBlur: handleBlur,\n    attributes,\n    isAllowed: val => {\n      if (clampBehavior === \"strict\") {\n        if (isAllowed) {\n          return isAllowed(val) && isInRange(val.floatValue, min, max);\n        }\n        return isInRange(val.floatValue, min, max);\n      }\n      return isAllowed ? isAllowed(val) : true;\n    }\n  }));\n});\nNumberInput.classes = _objectSpread(_objectSpread({}, InputBase.classes), classes);\nNumberInput.displayName = \"@mantine/core/NumberInput\";\nexport { NumberInput };","map":{"version":3,"names":["leadingDecimalZeroPattern","leadingZerosPattern","trailingZerosPattern","isNumberString","value","Number","isNaN","canIncrement","MAX_SAFE_INTEGER","getDecimalPlaces","inputValue","toString","replace","length","isValidNumber","floatValue","isInRange","min","max","minValid","maxValid","defaultProps","step","clampBehavior","allowDecimal","allowNegative","withKeyboardEvents","allowLeadingZeros","trimLeadingZeroesOnBlur","startValue","varsResolver","createVarsResolver","_","_ref","size","controls","getSize","clampAndSanitizeInput","sanitizedValue","replaced","parsedValue","parseFloat","clamp","NumberInput","factory","_props","ref","props","useProps","className","classNames","styles","unstyled","vars","onChange","onValueChange","defaultValue","hideControls","rightSection","isAllowed","onBlur","decimalScale","onKeyDown","onKeyDownCapture","handlersRef","disabled","rightSectionPointerEvents","readOnly","rightSectionWidth","stepHoldInterval","stepHoldDelay","attributes","others","_objectWithoutProperties","_excluded","getStyles","useStyles","name","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","_value","setValue","useUncontrolled","finalValue","shouldUseStepInterval","inputRef","useRef","onStepTimeoutRef","stepCountRef","handleValueChange","payload","event","source","test","getDecimalPlaces2","match","String","Math","adjustCursor","position","current","setSelectionRange","incrementRef","noop","val","currentValuePrecision","stepPrecision","maxPrecision","factor","incrementedValue","round","formattedValue","toFixed","setTimeout","_inputRef$current","decrementRef","minValue","MIN_SAFE_INTEGER","decrementedValue","_inputRef$current2","handleKeyDown","key","_incrementRef$current","preventDefault","call","_decrementRef$current","handleKeyDownCapture","input","selectionStart","selectionEnd","window","handleBlur","assignRef","increment","decrement","onStepHandleChange","isIncrement","_incrementRef$current2","_decrementRef$current2","onStepLoop","interval","onStep","_inputRef$current3","focus","onStepDone","clearTimeout","jsxs","_objectSpread","children","jsx","UnstyledButton","tabIndex","mod","direction","onMouseDown","onPointerDown","onPointerUp","onPointerLeave","NumberInputChevron","InputBase","component","NumericFormat","cx","root","getInputRef","useMergedRef","__staticSelector","concat","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/NumberInput/NumberInput.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport cx from 'clsx';\nimport { NumberFormatValues, NumericFormat, OnValueChange } from 'react-number-format';\nimport { assignRef, clamp, useMergedRef, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSize,\n  noop,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport { __BaseInputProps, __InputStylesNames, InputVariant } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { UnstyledButton } from '../UnstyledButton';\nimport { NumberInputChevron } from './NumberInputChevron';\nimport classes from './NumberInput.module.css';\n\n// Re for negative -0, -0., -0.0, -0.00, -0.000 ... strings\n// And for positive 0., 0.0, 0.00, 0.000 ... strings\nconst leadingDecimalZeroPattern = /^(0\\.0*|-0(\\.0*)?)$/;\n\n// Re for 01, 006, 00.02, -0010, -000.293 ... and negative counterparts\nconst leadingZerosPattern = /^-?0\\d+(\\.\\d+)?\\.?$/;\n\n// Re for decimal numbers with trailing zeros like 13.0, 13.00, 5.10 ... strings\nconst trailingZerosPattern = /\\.\\d*0$/;\n\nexport interface NumberInputHandlers {\n  increment: () => void;\n  decrement: () => void;\n}\n\nfunction isNumberString(value: unknown) {\n  return typeof value === 'string' && value !== '' && !Number.isNaN(Number(value));\n}\n\nfunction canIncrement(value: number | string) {\n  if (typeof value === 'number') {\n    return value < Number.MAX_SAFE_INTEGER;\n  }\n\n  return value === '' || (isNumberString(value) && Number(value) < Number.MAX_SAFE_INTEGER);\n}\n\nfunction getDecimalPlaces(inputValue: string | number): number {\n  // All digits must be counted, parseFloat precision depends\n  // on the number of digits in the input, not only on the decimal scale\n  return inputValue.toString().replace('.', '').length;\n}\n\nfunction isValidNumber(floatValue: number | undefined, value: string): floatValue is number {\n  return (\n    (typeof floatValue === 'number'\n      ? floatValue < Number.MAX_SAFE_INTEGER\n      : !Number.isNaN(Number(floatValue))) &&\n    !Number.isNaN(floatValue) &&\n    getDecimalPlaces(value) < 14 &&\n    value !== ''\n  );\n}\n\nfunction isInRange(value: number | undefined, min: number | undefined, max: number | undefined) {\n  if (value === undefined) {\n    return true;\n  }\n\n  const minValid = min === undefined || value >= min;\n  const maxValid = max === undefined || value <= max;\n\n  return minValid && maxValid;\n}\n\nexport type NumberInputStylesNames = 'controls' | 'control' | __InputStylesNames;\nexport type NumberInputCssVariables = {\n  controls: '--ni-chevron-size';\n};\n\nexport interface NumberInputProps\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<NumberInputFactory>,\n    ElementProps<'input', 'size' | 'type' | 'onChange'> {\n  /** Controlled component value */\n  value?: number | string;\n\n  /** Uncontrolled component default value */\n  defaultValue?: number | string;\n\n  /** Called when value changes */\n  onChange?: (value: number | string) => void;\n\n  /** Called when value changes with `react-number-format` payload */\n  onValueChange?: OnValueChange;\n\n  /** Determines whether leading zeros are allowed. If set to `false`, leading zeros are removed when the input value becomes a valid number. @default `true` */\n  allowLeadingZeros?: boolean;\n\n  /** If set, negative values are allowed @default `true` */\n  allowNegative?: boolean;\n\n  /** Characters which when pressed result in a decimal separator @default `['.']` */\n  allowedDecimalSeparators?: string[];\n\n  /** Limits the number of digits that can be entered after the decimal point @default `Infinity` */\n  decimalScale?: number;\n\n  /** Character used as a decimal separator @default `'.'` */\n  decimalSeparator?: string;\n\n  /** If set, 0s are added after `decimalSeparator` to match given `decimalScale`. @default `false` */\n  fixedDecimalScale?: boolean;\n\n  /** Prefix added before the input value */\n  prefix?: string;\n\n  /** Suffix added after the input value */\n  suffix?: string;\n\n  /** Defines the thousand grouping style. */\n  thousandsGroupStyle?: 'thousand' | 'lakh' | 'wan' | 'none';\n\n  /** A function to validate the input value. If this function returns `false`, the `onChange` will not be called and the input value will not change. */\n  isAllowed?: (values: NumberFormatValues) => boolean;\n\n  /** If value is passed as string representation of numbers (unformatted) and number is used in any format props like in prefix or suffix in numeric format and format prop in pattern format then this should be passed as `true`. @default `false` */\n  valueIsNumericString?: boolean;\n\n  /** Controls input `type` attribute @default `'text'` */\n  type?: 'text' | 'tel' | 'password';\n\n  /** A character used to separate thousands */\n  thousandSeparator?: string | boolean;\n\n  /** Minimum possible value */\n  min?: number;\n\n  /** Maximum possible value */\n  max?: number;\n\n  /** Number by which value will be incremented/decremented with up/down controls and keyboard arrows @default `1` */\n  step?: number;\n\n  /** If set, the up/down controls are hidden @default `false` */\n  hideControls?: boolean;\n\n  /** Controls how value is clamped, `strict` – user is not allowed to enter values that are not in `[min, max]` range, `blur` – user is allowed to enter any values, but the value is clamped when the input loses focus (default behavior), `none` – lifts all restrictions, `[min, max]` range is applied only for controls and up/down keys */\n  clampBehavior?: 'strict' | 'blur' | 'none';\n\n  /** If set, decimal values are allowed @default `true` */\n  allowDecimal?: boolean;\n\n  /** Increment/decrement handlers */\n  handlersRef?: React.ForwardedRef<NumberInputHandlers | undefined>;\n\n  /** Value set to the input when increment/decrement buttons are clicked or up/down arrows pressed if the input is empty @default `0` */\n  startValue?: number;\n\n  /** Delay before stepping the value. Can be a number of milliseconds or a function that receives the current step count and returns the delay in milliseconds. */\n  stepHoldInterval?: number | ((stepCount: number) => number);\n\n  /** Initial delay in milliseconds before stepping the value. */\n  stepHoldDelay?: number;\n\n  /** If set, up/down keyboard events increment/decrement value @default `true` */\n  withKeyboardEvents?: boolean;\n\n  /** If set, leading zeros are removed on blur. For example, `00100` -> `100` @default `true` */\n  trimLeadingZeroesOnBlur?: boolean;\n}\n\nexport type NumberInputFactory = Factory<{\n  props: NumberInputProps;\n  ref: HTMLInputElement;\n  stylesNames: NumberInputStylesNames;\n  vars: NumberInputCssVariables;\n  variant: InputVariant;\n}>;\n\nconst defaultProps = {\n  step: 1,\n  clampBehavior: 'blur',\n  allowDecimal: true,\n  allowNegative: true,\n  withKeyboardEvents: true,\n  allowLeadingZeros: true,\n  trimLeadingZeroesOnBlur: true,\n  startValue: 0,\n} satisfies Partial<NumberInputProps>;\n\nconst varsResolver = createVarsResolver<NumberInputFactory>((_, { size }) => ({\n  controls: {\n    '--ni-chevron-size': getSize(size, 'ni-chevron-size'),\n  },\n}));\n\nfunction clampAndSanitizeInput(sanitizedValue: string | number, max?: number, min?: number) {\n  const replaced = sanitizedValue.toString().replace(/^0+/, '');\n  const parsedValue = parseFloat(replaced);\n  if (Number.isNaN(parsedValue)) {\n    return replaced;\n  } else if (parsedValue > Number.MAX_SAFE_INTEGER) {\n    return max !== undefined ? max : replaced;\n  }\n  return clamp(parsedValue, min, max);\n}\n\nexport const NumberInput = factory<NumberInputFactory>((_props, ref) => {\n  const props = useProps('NumberInput', defaultProps, _props);\n  const {\n    className,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    onChange,\n    onValueChange,\n    value,\n    defaultValue,\n    max,\n    min,\n    step,\n    hideControls,\n    rightSection,\n    isAllowed,\n    clampBehavior,\n    onBlur,\n    allowDecimal,\n    decimalScale,\n    onKeyDown,\n    onKeyDownCapture,\n    handlersRef,\n    startValue,\n    disabled,\n    rightSectionPointerEvents,\n    allowNegative,\n    readOnly,\n    size,\n    rightSectionWidth,\n    stepHoldInterval,\n    stepHoldDelay,\n    allowLeadingZeros,\n    withKeyboardEvents,\n    trimLeadingZeroesOnBlur,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<NumberInputFactory>({\n    name: 'NumberInput',\n    classes,\n    props,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<NumberInputFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: '',\n    onChange,\n  });\n\n  const shouldUseStepInterval = stepHoldDelay !== undefined && stepHoldInterval !== undefined;\n  const inputRef = useRef<HTMLInputElement>(null);\n  const onStepTimeoutRef = useRef<number | null>(null);\n  const stepCountRef = useRef<number>(0);\n\n  const handleValueChange: OnValueChange = (payload, event) => {\n    if (event.source === 'event') {\n      setValue(\n        isValidNumber(payload.floatValue, payload.value) &&\n          !leadingDecimalZeroPattern.test(payload.value) &&\n          !(allowLeadingZeros ? leadingZerosPattern.test(payload.value) : false) &&\n          !trailingZerosPattern.test(payload.value)\n          ? payload.floatValue\n          : payload.value\n      );\n    }\n    onValueChange?.(payload, event);\n  };\n\n  const getDecimalPlaces = (inputValue: number | string): number => {\n    const match = String(inputValue).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) {\n      return 0;\n    }\n    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n  };\n\n  const adjustCursor = (position?: number) => {\n    if (inputRef.current && typeof position !== 'undefined') {\n      inputRef.current.setSelectionRange(position, position);\n    }\n  };\n\n  const incrementRef = useRef<() => void>(noop);\n  incrementRef.current = () => {\n    if (!canIncrement(_value)) {\n      return;\n    }\n\n    let val: number;\n    const currentValuePrecision = getDecimalPlaces(_value);\n    const stepPrecision = getDecimalPlaces(step);\n    const maxPrecision = Math.max(currentValuePrecision, stepPrecision);\n    const factor = 10 ** maxPrecision;\n\n    if (!isNumberString(_value) && (typeof _value !== 'number' || Number.isNaN(_value))) {\n      val = clamp(startValue, min, max);\n    } else if (max !== undefined) {\n      const incrementedValue =\n        (Math.round(Number(_value) * factor) + Math.round(step * factor)) / factor;\n      val = incrementedValue <= max ? incrementedValue : max;\n    } else {\n      val = (Math.round(Number(_value) * factor) + Math.round(step * factor)) / factor;\n    }\n\n    const formattedValue = val.toFixed(maxPrecision);\n    setValue(parseFloat(formattedValue));\n    onValueChange?.(\n      { floatValue: parseFloat(formattedValue), formattedValue, value: formattedValue },\n      { source: 'increment' as any }\n    );\n    setTimeout(() => adjustCursor(inputRef.current?.value.length), 0);\n  };\n\n  const decrementRef = useRef<() => void>(noop);\n  decrementRef.current = () => {\n    if (!canIncrement(_value)) {\n      return;\n    }\n\n    let val: number;\n    const minValue = min !== undefined ? min : !allowNegative ? 0 : Number.MIN_SAFE_INTEGER;\n    const currentValuePrecision = getDecimalPlaces(_value);\n    const stepPrecision = getDecimalPlaces(step);\n    const maxPrecision = Math.max(currentValuePrecision, stepPrecision);\n    const factor = 10 ** maxPrecision;\n\n    if ((!isNumberString(_value) && typeof _value !== 'number') || Number.isNaN(_value)) {\n      val = clamp(startValue, minValue, max);\n    } else {\n      const decrementedValue =\n        (Math.round(Number(_value) * factor) - Math.round(step * factor)) / factor;\n      val = minValue !== undefined && decrementedValue < minValue ? minValue : decrementedValue;\n    }\n\n    const formattedValue = val.toFixed(maxPrecision);\n    setValue(parseFloat(formattedValue));\n    onValueChange?.(\n      { floatValue: parseFloat(formattedValue), formattedValue, value: formattedValue },\n      { source: 'decrement' as any }\n    );\n    setTimeout(() => adjustCursor(inputRef.current?.value.length), 0);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (readOnly || !withKeyboardEvents) {\n      return;\n    }\n\n    if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      incrementRef.current?.();\n    }\n\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      decrementRef.current?.();\n    }\n  };\n\n  const handleKeyDownCapture = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDownCapture?.(event);\n    if (event.key === 'Backspace') {\n      const input = inputRef.current;\n      if (input && input.selectionStart === 0 && input.selectionStart === input.selectionEnd) {\n        event.preventDefault();\n        window.setTimeout(() => adjustCursor(0), 0);\n      }\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    let sanitizedValue = _value;\n\n    if (clampBehavior === 'blur' && typeof sanitizedValue === 'number') {\n      sanitizedValue = clamp(sanitizedValue, min, max);\n    }\n\n    if (\n      trimLeadingZeroesOnBlur &&\n      typeof sanitizedValue === 'string' &&\n      getDecimalPlaces(sanitizedValue) < 15\n    ) {\n      sanitizedValue = clampAndSanitizeInput(sanitizedValue, max, min);\n    }\n\n    if (_value !== sanitizedValue) {\n      setValue(sanitizedValue);\n    }\n\n    onBlur?.(event);\n  };\n\n  assignRef(handlersRef, { increment: incrementRef.current, decrement: decrementRef.current });\n\n  const onStepHandleChange = (isIncrement: boolean) => {\n    if (isIncrement) {\n      incrementRef.current?.();\n    } else {\n      decrementRef.current?.();\n    }\n    stepCountRef.current += 1;\n  };\n\n  const onStepLoop = (isIncrement: boolean) => {\n    onStepHandleChange(isIncrement);\n\n    if (shouldUseStepInterval) {\n      const interval =\n        typeof stepHoldInterval === 'number'\n          ? stepHoldInterval\n          : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);\n    }\n  };\n\n  const onStep = (\n    event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    isIncrement: boolean\n  ) => {\n    event.preventDefault();\n    inputRef.current?.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);\n    }\n  };\n\n  const onStepDone = () => {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n\n  const controls = (\n    <div {...getStyles('controls')}>\n      <UnstyledButton\n        {...getStyles('control')}\n        tabIndex={-1}\n        aria-hidden\n        disabled={disabled || (typeof _value === 'number' && max !== undefined && _value >= max)}\n        mod={{ direction: 'up' }}\n        onMouseDown={(event) => event.preventDefault()}\n        onPointerDown={(event) => {\n          onStep(event, true);\n        }}\n        onPointerUp={onStepDone}\n        onPointerLeave={onStepDone}\n      >\n        <NumberInputChevron direction=\"up\" />\n      </UnstyledButton>\n      <UnstyledButton\n        {...getStyles('control')}\n        tabIndex={-1}\n        aria-hidden\n        disabled={disabled || (typeof _value === 'number' && min !== undefined && _value <= min)}\n        mod={{ direction: 'down' }}\n        onMouseDown={(event) => event.preventDefault()}\n        onPointerDown={(event) => {\n          onStep(event, false);\n        }}\n        onPointerUp={onStepDone}\n        onPointerLeave={onStepDone}\n      >\n        <NumberInputChevron direction=\"down\" />\n      </UnstyledButton>\n    </div>\n  );\n\n  return (\n    <InputBase\n      component={NumericFormat}\n      allowNegative={allowNegative}\n      className={cx(classes.root, className)}\n      size={size}\n      {...others}\n      readOnly={readOnly}\n      disabled={disabled}\n      value={_value}\n      getInputRef={useMergedRef(ref, inputRef)}\n      onValueChange={handleValueChange}\n      rightSection={\n        hideControls || readOnly || !canIncrement(_value) ? rightSection : rightSection || controls\n      }\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      unstyled={unstyled}\n      __staticSelector=\"NumberInput\"\n      decimalScale={allowDecimal ? decimalScale : 0}\n      onKeyDown={handleKeyDown}\n      onKeyDownCapture={handleKeyDownCapture}\n      rightSectionPointerEvents={rightSectionPointerEvents ?? (disabled ? 'none' : undefined)}\n      rightSectionWidth={rightSectionWidth ?? `var(--ni-right-section-width-${size || 'sm'})`}\n      allowLeadingZeros={allowLeadingZeros}\n      onBlur={handleBlur}\n      attributes={attributes}\n      isAllowed={(val) => {\n        if (clampBehavior === 'strict') {\n          if (isAllowed) {\n            return isAllowed(val) && isInRange(val.floatValue, min, max);\n          }\n\n          return isInRange(val.floatValue, min, max);\n        }\n\n        return isAllowed ? isAllowed(val) : true;\n      }}\n    />\n  );\n});\n\nNumberInput.classes = { ...InputBase.classes, ...classes };\nNumberInput.displayName = '@mantine/core/NumberInput';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}