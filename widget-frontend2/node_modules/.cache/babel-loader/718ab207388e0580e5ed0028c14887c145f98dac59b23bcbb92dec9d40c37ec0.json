{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"vars\", \"color\", \"block\", \"variant\", \"mod\", \"attributes\"];\nimport { jsx } from 'react/jsx-runtime';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Code.module.css.mjs';\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    color\n  } = _ref;\n  return {\n    root: {\n      \"--code-bg\": color ? getThemeColor(color, theme) : void 0\n    }\n  };\n});\nconst Code = factory((_props, ref) => {\n  const props = useProps(\"Code\", null, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      vars,\n      color,\n      block,\n      variant,\n      mod,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const getStyles = useStyles({\n    name: \"Code\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread(_objectSpread({\n    component: block ? \"pre\" : \"code\",\n    variant,\n    ref,\n    mod: [{\n      block\n    }, mod]\n  }, getStyles(\"root\")), others), {}, {\n    dir: \"ltr\"\n  }));\n});\nCode.classes = classes;\nCode.displayName = \"@mantine/core/Code\";\nexport { Code };","map":{"version":3,"names":["varsResolver","createVarsResolver","theme","_ref","color","root","getThemeColor","Code","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","block","variant","mod","attributes","others","_objectWithoutProperties","_excluded","getStyles","useStyles","name","classes","jsx","Box","_objectSpread","component","dir","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Code/Code.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Code.module.css';\n\nexport type CodeStylesNames = 'root';\nexport type CodeCssVariables = {\n  root: '--code-bg';\n};\n\nexport interface CodeProps extends BoxProps, StylesApiProps<CodeFactory>, ElementProps<'code'> {\n  /** Key of `theme.colors` or any valid CSS color, controls `background-color` of the code. By default, calculated based on the color scheme. */\n  color?: MantineColor;\n\n  /** If set, code is rendered in `pre` */\n  block?: boolean;\n}\n\nexport type CodeFactory = Factory<{\n  props: CodeProps;\n  ref: HTMLElement;\n  stylesNames: CodeStylesNames;\n  vars: CodeCssVariables;\n}>;\n\nconst varsResolver = createVarsResolver<CodeFactory>((theme, { color }) => ({\n  root: {\n    '--code-bg': color ? getThemeColor(color, theme) : undefined,\n  },\n}));\n\nexport const Code = factory<CodeFactory>((_props, ref) => {\n  const props = useProps('Code', null, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    block,\n    variant,\n    mod,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<CodeFactory>({\n    name: 'Code',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box<any>\n      component={block ? 'pre' : 'code'}\n      variant={variant}\n      ref={ref}\n      mod={[{ block }, mod]}\n      {...getStyles('root')}\n      {...others}\n      dir=\"ltr\"\n    />\n  );\n});\n\nCode.classes = classes;\nCode.displayName = '@mantine/core/Code';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAmCA,MAAMA,YAAA,GAAeC,kBAAA,CAAgC,CAACC,KAAA,EAAAC,IAAA;EAAA,IAAO;IAAEC;EAAA,CAAM,GAAAD,IAAA;EAAA,OAAO;IAC1EE,IAAA,EAAM;MACJ,aAAaD,KAAA,GAAQE,aAAA,CAAcF,KAAA,EAAOF,KAAK,IAAI;IAAA;EAEvD;AAAA,CAAE;AAEK,MAAMK,IAAA,GAAOC,OAAA,CAAqB,CAACC,MAAA,EAAQC,GAAA,KAAQ;EACxD,MAAMC,KAAA,GAAQC,QAAA,CAAS,QAAQ,MAAMH,MAAM;EAC3C,MAAM;MACJI,UAAA;MACAC,SAAA;MACAC,KAAA;MACAC,MAAA;MACAC,QAAA;MACAC,IAAA;MACAd,KAAA;MACAe,KAAA;MACAC,OAAA;MACAC,GAAA;MACAC;IACG,CACL,GAAIX,KAAA;IADCY,MAAA,GAAAC,wBAAA,CACDb,KAAA,EAAAc,SAAA;EAEJ,MAAMC,SAAA,GAAYC,SAAA,CAAuB;IACvCC,IAAA,EAAM;IACNjB,KAAA;IACAkB,OAAA;IACAf,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAK,UAAA;IACAJ,IAAA;IACAlB;EAAA,CACD;EAED,sBACE8B,GAAA,CAACC,GAAA,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA;IACCC,SAAA,EAAWd,KAAA,GAAQ,QAAQ;IAC3BC,OAAA;IACAV,GAAA;IACAW,GAAA,EAAK,CAAC;MAAEF;IAAA,GAASE,GAAG;EAAA,GAChBK,SAAA,CAAU,MAAM,IAChBH,MAAA;IACJW,GAAA,EAAI;EAAA,GACN;AAEJ,CAAC;AAED3B,IAAA,CAAKsB,OAAA,GAAUA,OAAA;AACftB,IAAA,CAAK4B,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}