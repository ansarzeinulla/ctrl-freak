{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nfunction useListState(initialValue = []) {\n  const [state, setState] = useState(initialValue);\n  const append = (...items) => setState(current => [...current, ...items]);\n  const prepend = (...items) => setState(current => [...items, ...current]);\n  const insert = (index, ...items) => setState(current => [...current.slice(0, index), ...items, ...current.slice(index)]);\n  const apply = fn => setState(current => current.map((item, index) => fn(item, index)));\n  const remove = (...indices) => setState(current => current.filter((_, index) => !indices.includes(index)));\n  const pop = () => setState(current => {\n    const cloned = [...current];\n    cloned.pop();\n    return cloned;\n  });\n  const shift = () => setState(current => {\n    const cloned = [...current];\n    cloned.shift();\n    return cloned;\n  });\n  const reorder = ({\n    from,\n    to\n  }) => setState(current => {\n    const cloned = [...current];\n    const item = current[from];\n    cloned.splice(from, 1);\n    cloned.splice(to, 0, item);\n    return cloned;\n  });\n  const swap = ({\n    from,\n    to\n  }) => setState(current => {\n    const cloned = [...current];\n    const fromItem = cloned[from];\n    const toItem = cloned[to];\n    cloned.splice(to, 1, fromItem);\n    cloned.splice(from, 1, toItem);\n    return cloned;\n  });\n  const setItem = (index, item) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = item;\n    return cloned;\n  });\n  const setItemProp = (index, prop, value) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = {\n      ...cloned[index],\n      [prop]: value\n    };\n    return cloned;\n  });\n  const applyWhere = (condition, fn) => setState(current => current.map((item, index) => condition(item, index) ? fn(item, index) : item));\n  const filter = fn => {\n    setState(current => current.filter(fn));\n  };\n  return [state, {\n    setState,\n    append,\n    prepend,\n    insert,\n    pop,\n    shift,\n    apply,\n    applyWhere,\n    remove,\n    reorder,\n    swap,\n    setItem,\n    setItemProp,\n    filter\n  }];\n}\nexport { useListState };","map":{"version":3,"names":["useListState","initialValue","state","setState","useState","append","items","current","prepend","insert","index","slice","apply","fn","map","item","remove","indices","filter","_","includes","pop","cloned","shift","reorder","from","to","splice","swap","fromItem","toItem","setItem","setItemProp","prop","value","applyWhere","condition"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-list-state/use-list-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface UseListStateHandlers<T> {\n  setState: React.Dispatch<React.SetStateAction<T[]>>;\n  append: (...items: T[]) => void;\n  prepend: (...items: T[]) => void;\n  insert: (index: number, ...items: T[]) => void;\n  pop: () => void;\n  shift: () => void;\n  apply: (fn: (item: T, index?: number) => T) => void;\n  applyWhere: (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => void;\n  remove: (...indices: number[]) => void;\n  reorder: ({ from, to }: { from: number; to: number }) => void;\n  swap: ({ from, to }: { from: number; to: number }) => void;\n  setItem: (index: number, item: T) => void;\n  setItemProp: <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) => void;\n  filter: (fn: (item: T, i: number) => boolean) => void;\n}\n\nexport type UseListStateReturnValue<T> = [T[], UseListStateHandlers<T>];\n\nexport function useListState<T>(initialValue: T[] | (() => T[]) = []): UseListStateReturnValue<T> {\n  const [state, setState] = useState(initialValue);\n\n  const append = (...items: T[]) => setState((current) => [...current, ...items]);\n  const prepend = (...items: T[]) => setState((current) => [...items, ...current]);\n\n  const insert = (index: number, ...items: T[]) =>\n    setState((current) => [...current.slice(0, index), ...items, ...current.slice(index)]);\n\n  const apply = (fn: (item: T, index?: number) => T) =>\n    setState((current) => current.map((item, index) => fn(item, index)));\n\n  const remove = (...indices: number[]) =>\n    setState((current) => current.filter((_, index) => !indices.includes(index)));\n\n  const pop = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.pop();\n      return cloned;\n    });\n\n  const shift = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.shift();\n      return cloned;\n    });\n\n  const reorder = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const item = current[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n\n      return cloned;\n    });\n\n  const swap = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const fromItem = cloned[from];\n      const toItem = cloned[to];\n\n      cloned.splice(to, 1, fromItem);\n      cloned.splice(from, 1, toItem);\n\n      return cloned;\n    });\n\n  const setItem = (index: number, item: T) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = item;\n      return cloned;\n    });\n\n  const setItemProp = <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = { ...cloned[index], [prop]: value };\n      return cloned;\n    });\n\n  const applyWhere = (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) =>\n    setState((current) =>\n      current.map((item, index) => (condition(item, index) ? fn(item, index) : item))\n    );\n\n  const filter = (fn: (item: T, i: number) => boolean) => {\n    setState((current) => current.filter(fn));\n  };\n\n  return [\n    state,\n    {\n      setState,\n      append,\n      prepend,\n      insert,\n      pop,\n      shift,\n      apply,\n      applyWhere,\n      remove,\n      reorder,\n      swap,\n      setItem,\n      setItemProp,\n      filter,\n    },\n  ];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}