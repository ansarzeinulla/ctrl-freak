{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"title\", \"withOverlay\", \"overlayProps\", \"withCloseButton\", \"closeButtonProps\", \"children\", \"opened\", \"stackId\", \"zIndex\"];\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useEffect } from 'react';\nimport '../../core/utils/units-converters/rem.mjs';\nimport { getDefaultZIndex } from '../../core/utils/get-default-z-index/get-default-z-index.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { DrawerBody } from './DrawerBody.mjs';\nimport { DrawerCloseButton } from './DrawerCloseButton.mjs';\nimport { DrawerContent } from './DrawerContent.mjs';\nimport { DrawerHeader } from './DrawerHeader.mjs';\nimport { DrawerOverlay } from './DrawerOverlay.mjs';\nimport { DrawerRoot } from './DrawerRoot.mjs';\nimport { useDrawerStackContext, DrawerStack } from './DrawerStack.mjs';\nimport { DrawerTitle } from './DrawerTitle.mjs';\nimport classes from './Drawer.module.css.mjs';\nconst defaultProps = {\n  closeOnClickOutside: true,\n  withinPortal: true,\n  lockScroll: true,\n  trapFocus: true,\n  returnFocus: true,\n  closeOnEscape: true,\n  keepMounted: false,\n  zIndex: getDefaultZIndex(\"modal\"),\n  withOverlay: true,\n  withCloseButton: true\n};\nconst Drawer = factory((_props, ref) => {\n  const _useProps = useProps(\"Drawer\", defaultProps, _props),\n    {\n      title,\n      withOverlay,\n      overlayProps,\n      withCloseButton,\n      closeButtonProps,\n      children,\n      opened,\n      stackId,\n      zIndex\n    } = _useProps,\n    others = _objectWithoutProperties(_useProps, _excluded);\n  const ctx = useDrawerStackContext();\n  const hasHeader = !!title || withCloseButton;\n  const stackProps = ctx && stackId ? {\n    closeOnEscape: ctx.currentId === stackId,\n    trapFocus: ctx.currentId === stackId,\n    zIndex: ctx.getZIndex(stackId)\n  } : {};\n  const overlayVisible = withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;\n  useEffect(() => {\n    if (ctx && stackId) {\n      opened ? ctx.addModal(stackId, zIndex || getDefaultZIndex(\"modal\")) : ctx.removeModal(stackId);\n    }\n  }, [opened, stackId, zIndex]);\n  return /* @__PURE__ */jsxs(DrawerRoot, _objectSpread(_objectSpread(_objectSpread({\n    ref,\n    opened,\n    zIndex: ctx && stackId ? ctx.getZIndex(stackId) : zIndex\n  }, others), stackProps), {}, {\n    children: [withOverlay && /* @__PURE__ */jsx(DrawerOverlay, _objectSpread({\n      visible: overlayVisible,\n      transitionProps: ctx && stackId ? {\n        duration: 0\n      } : void 0\n    }, overlayProps)), /* @__PURE__ */jsxs(DrawerContent, {\n      __hidden: ctx && stackId && opened ? stackId !== ctx.currentId : false,\n      children: [hasHeader && /* @__PURE__ */jsxs(DrawerHeader, {\n        children: [title && /* @__PURE__ */jsx(DrawerTitle, {\n          children: title\n        }), withCloseButton && /* @__PURE__ */jsx(DrawerCloseButton, _objectSpread({}, closeButtonProps))]\n      }), /* @__PURE__ */jsx(DrawerBody, {\n        children\n      })]\n    })]\n  }));\n});\nDrawer.classes = classes;\nDrawer.displayName = \"@mantine/core/Drawer\";\nDrawer.Root = DrawerRoot;\nDrawer.Overlay = DrawerOverlay;\nDrawer.Content = DrawerContent;\nDrawer.Body = DrawerBody;\nDrawer.Header = DrawerHeader;\nDrawer.Title = DrawerTitle;\nDrawer.CloseButton = DrawerCloseButton;\nDrawer.Stack = DrawerStack;\nexport { Drawer };","map":{"version":3,"names":["defaultProps","closeOnClickOutside","withinPortal","lockScroll","trapFocus","returnFocus","closeOnEscape","keepMounted","zIndex","getDefaultZIndex","withOverlay","withCloseButton","Drawer","factory","_props","ref","_useProps","useProps","title","overlayProps","closeButtonProps","children","opened","stackId","others","_objectWithoutProperties","_excluded","ctx","useDrawerStackContext","hasHeader","stackProps","currentId","getZIndex","overlayVisible","useEffect","addModal","removeModal","jsxs","DrawerRoot","_objectSpread","jsx","DrawerOverlay","visible","transitionProps","duration","DrawerContent","__hidden","DrawerHeader","DrawerTitle","DrawerCloseButton","DrawerBody","classes","displayName","Root","Overlay","Content","Body","Header","Title","CloseButton","Stack","DrawerStack"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/Drawer/Drawer.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { factory, Factory, getDefaultZIndex, useProps } from '../../core';\nimport { ModalBaseCloseButtonProps, ModalBaseOverlayProps } from '../ModalBase';\nimport { DrawerBody } from './DrawerBody';\nimport { DrawerCloseButton } from './DrawerCloseButton';\nimport { DrawerContent } from './DrawerContent';\nimport { DrawerHeader } from './DrawerHeader';\nimport { DrawerOverlay } from './DrawerOverlay';\nimport {\n  DrawerRoot,\n  DrawerRootCssVariables,\n  DrawerRootProps,\n  DrawerRootStylesNames,\n} from './DrawerRoot';\nimport { DrawerStack, useDrawerStackContext } from './DrawerStack';\nimport { DrawerTitle } from './DrawerTitle';\nimport classes from './Drawer.module.css';\n\nexport type DrawerStylesNames = DrawerRootStylesNames;\nexport type DrawerCssVariables = DrawerRootCssVariables;\n\nexport interface DrawerProps extends DrawerRootProps {\n  /** Drawer title */\n  title?: React.ReactNode;\n\n  /** If set, the overlay is displayed @default `true` */\n  withOverlay?: boolean;\n\n  /** Props passed down to the `Overlay` component, can be used to configure opacity, `background-color`, styles and other properties */\n  overlayProps?: ModalBaseOverlayProps;\n\n  /** Drawer content */\n  children?: React.ReactNode;\n\n  /** If set, the close button is displayed @default `true` */\n  withCloseButton?: boolean;\n\n  /** Props passed down to the close button */\n  closeButtonProps?: ModalBaseCloseButtonProps;\n\n  /** Id of the drawer in the `Drawer.Stack` */\n  stackId?: string;\n}\n\nexport type DrawerFactory = Factory<{\n  props: DrawerProps;\n  ref: HTMLDivElement;\n  stylesNames: DrawerStylesNames;\n  vars: DrawerCssVariables;\n  staticComponents: {\n    Root: typeof DrawerRoot;\n    Overlay: typeof DrawerOverlay;\n    Content: typeof DrawerContent;\n    Body: typeof DrawerBody;\n    Header: typeof DrawerHeader;\n    Title: typeof DrawerTitle;\n    CloseButton: typeof DrawerCloseButton;\n    Stack: typeof DrawerStack;\n  };\n}>;\n\nconst defaultProps = {\n  closeOnClickOutside: true,\n  withinPortal: true,\n  lockScroll: true,\n  trapFocus: true,\n  returnFocus: true,\n  closeOnEscape: true,\n  keepMounted: false,\n  zIndex: getDefaultZIndex('modal'),\n  withOverlay: true,\n  withCloseButton: true,\n} satisfies Partial<DrawerProps>;\n\nexport const Drawer = factory<DrawerFactory>((_props, ref) => {\n  const {\n    title,\n    withOverlay,\n    overlayProps,\n    withCloseButton,\n    closeButtonProps,\n    children,\n    opened,\n    stackId,\n    zIndex,\n    ...others\n  } = useProps('Drawer', defaultProps, _props);\n\n  const ctx = useDrawerStackContext();\n  const hasHeader = !!title || withCloseButton;\n  const stackProps =\n    ctx && stackId\n      ? {\n          closeOnEscape: ctx.currentId === stackId,\n          trapFocus: ctx.currentId === stackId,\n          zIndex: ctx.getZIndex(stackId),\n        }\n      : {};\n\n  const overlayVisible =\n    withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;\n\n  useEffect(() => {\n    if (ctx && stackId) {\n      opened\n        ? ctx.addModal(stackId, zIndex || getDefaultZIndex('modal'))\n        : ctx.removeModal(stackId);\n    }\n  }, [opened, stackId, zIndex]);\n\n  return (\n    <DrawerRoot\n      ref={ref}\n      opened={opened}\n      zIndex={ctx && stackId ? ctx.getZIndex(stackId) : zIndex}\n      {...others}\n      {...stackProps}\n    >\n      {withOverlay && (\n        <DrawerOverlay\n          visible={overlayVisible}\n          transitionProps={ctx && stackId ? { duration: 0 } : undefined}\n          {...overlayProps}\n        />\n      )}\n      <DrawerContent __hidden={ctx && stackId && opened ? stackId !== ctx.currentId : false}>\n        {hasHeader && (\n          <DrawerHeader>\n            {title && <DrawerTitle>{title}</DrawerTitle>}\n            {withCloseButton && <DrawerCloseButton {...closeButtonProps} />}\n          </DrawerHeader>\n        )}\n\n        <DrawerBody>{children}</DrawerBody>\n      </DrawerContent>\n    </DrawerRoot>\n  );\n});\n\nDrawer.classes = classes;\nDrawer.displayName = '@mantine/core/Drawer';\nDrawer.Root = DrawerRoot;\nDrawer.Overlay = DrawerOverlay;\nDrawer.Content = DrawerContent;\nDrawer.Body = DrawerBody;\nDrawer.Header = DrawerHeader;\nDrawer.Title = DrawerTitle;\nDrawer.CloseButton = DrawerCloseButton;\nDrawer.Stack = DrawerStack;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}