{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { useRandomClassName } from '../../core/Box/use-random-classname/use-random-classname.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { GridProvider } from './Grid.context.mjs';\nimport { GridCol } from './GridCol/GridCol.mjs';\nimport { GridVariables } from './GridVariables.mjs';\nimport classes from './Grid.module.css.mjs';\nconst defaultProps = {\n  gutter: \"md\",\n  grow: false,\n  columns: 12\n};\nconst varsResolver = createVarsResolver((_, {\n  justify,\n  align,\n  overflow\n}) => ({\n  root: {\n    \"--grid-justify\": justify,\n    \"--grid-align\": align,\n    \"--grid-overflow\": overflow\n  }\n}));\nconst Grid = factory((_props, ref) => {\n  const props = useProps(\"Grid\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    breakpoints,\n    type,\n    attributes,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Grid\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  const responsiveClassName = useRandomClassName();\n  if (type === \"container\" && breakpoints) {\n    return /* @__PURE__ */jsxs(GridProvider, {\n      value: {\n        getStyles,\n        grow,\n        columns,\n        breakpoints,\n        type\n      },\n      children: [/* @__PURE__ */jsx(GridVariables, {\n        selector: `.${responsiveClassName}`,\n        ...props\n      }), /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"container\"),\n        children: /* @__PURE__ */jsx(Box, {\n          ref,\n          ...getStyles(\"root\", {\n            className: responsiveClassName\n          }),\n          ...others,\n          children: /* @__PURE__ */jsx(\"div\", {\n            ...getStyles(\"inner\"),\n            children\n          })\n        })\n      })]\n    });\n  }\n  return /* @__PURE__ */jsxs(GridProvider, {\n    value: {\n      getStyles,\n      grow,\n      columns,\n      breakpoints,\n      type\n    },\n    children: [/* @__PURE__ */jsx(GridVariables, {\n      selector: `.${responsiveClassName}`,\n      ...props\n    }), /* @__PURE__ */jsx(Box, {\n      ref,\n      ...getStyles(\"root\", {\n        className: responsiveClassName\n      }),\n      ...others,\n      children: /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"inner\"),\n        children\n      })\n    })]\n  });\n});\nGrid.classes = classes;\nGrid.displayName = \"@mantine/core/Grid\";\nGrid.Col = GridCol;\nexport { Grid };","map":{"version":3,"names":["defaultProps","gutter","grow","columns","varsResolver","createVarsResolver","_","justify","align","overflow","root","Grid","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","children","breakpoints","type","attributes","others","getStyles","useStyles","name","classes","responsiveClassName","useRandomClassName","jsxs","GridProvider","value","jsx","GridVariables","selector","Box","displayName","Col","GridCol"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Grid/Grid.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSpacing,\n  StyleProp,\n  StylesApiProps,\n  useProps,\n  useRandomClassName,\n  useStyles,\n} from '../../core';\nimport { GridBreakpoints, GridProvider } from './Grid.context';\nimport { GridCol } from './GridCol/GridCol';\nimport { GridVariables } from './GridVariables';\nimport classes from './Grid.module.css';\n\nexport type GridStylesNames = 'root' | 'col' | 'inner' | 'container';\nexport type GridCssVariables = {\n  root: '--grid-justify' | '--grid-align' | '--grid-overflow';\n};\n\nexport interface GridProps extends BoxProps, StylesApiProps<GridFactory>, ElementProps<'div'> {\n  /** Gutter between columns, key of `theme.spacing` or any valid CSS value @default `'md'` */\n  gutter?: StyleProp<MantineSpacing>;\n\n  /** If set, columns in the last row expand to fill all available space @default `false` */\n  grow?: boolean;\n\n  /** Sets `justify-content` @default `flex-start` */\n  justify?: React.CSSProperties['justifyContent'];\n\n  /** Sets `align-items` @default `stretch` */\n  align?: React.CSSProperties['alignItems'];\n\n  /** Number of columns in each row @default `12` */\n  columns?: number;\n\n  /** Sets `overflow` CSS property on the root element @default `'visible'` */\n  overflow?: React.CSSProperties['overflow'];\n\n  /** Type of queries used for responsive styles @default `'media'` */\n  type?: 'media' | 'container';\n\n  /** Breakpoints values, only used with `type=\"container\"` */\n  breakpoints?: GridBreakpoints;\n}\n\nexport type GridFactory = Factory<{\n  props: GridProps;\n  ref: HTMLDivElement;\n  stylesNames: GridStylesNames;\n  vars: GridCssVariables;\n  staticComponents: {\n    Col: typeof GridCol;\n  };\n}>;\n\nconst defaultProps = {\n  gutter: 'md',\n  grow: false,\n  columns: 12,\n} satisfies Partial<GridProps>;\n\nconst varsResolver = createVarsResolver<GridFactory>((_, { justify, align, overflow }) => ({\n  root: {\n    '--grid-justify': justify,\n    '--grid-align': align,\n    '--grid-overflow': overflow,\n  },\n}));\n\nexport const Grid = factory<GridFactory>((_props, ref) => {\n  const props = useProps('Grid', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    breakpoints,\n    type,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<GridFactory>({\n    name: 'Grid',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const responsiveClassName = useRandomClassName();\n\n  if (type === 'container' && breakpoints) {\n    return (\n      <GridProvider value={{ getStyles, grow, columns, breakpoints, type }}>\n        <GridVariables selector={`.${responsiveClassName}`} {...props} />\n        <div {...getStyles('container')}>\n          <Box ref={ref} {...getStyles('root', { className: responsiveClassName })} {...others}>\n            <div {...getStyles('inner')}>{children}</div>\n          </Box>\n        </div>\n      </GridProvider>\n    );\n  }\n\n  return (\n    <GridProvider value={{ getStyles, grow, columns, breakpoints, type }}>\n      <GridVariables selector={`.${responsiveClassName}`} {...props} />\n      <Box ref={ref} {...getStyles('root', { className: responsiveClassName })} {...others}>\n        <div {...getStyles('inner')}>{children}</div>\n      </Box>\n    </GridProvider>\n  );\n});\n\nGrid.classes = classes;\nGrid.displayName = '@mantine/core/Grid';\nGrid.Col = GridCol;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AA4DA,MAAMA,YAAA,GAAe;EACnBC,MAAA,EAAQ;EACRC,IAAA,EAAM;EACNC,OAAA,EAAS;AACX;AAEA,MAAMC,YAAA,GAAeC,kBAAA,CAAgC,CAACC,CAAA,EAAG;EAAEC,OAAA;EAASC,KAAA;EAAOC;AAAA,CAAS,MAAO;EACzFC,IAAA,EAAM;IACJ,kBAAkBH,OAAA;IAClB,gBAAgBC,KAAA;IAChB,mBAAmBC;EAAA;AAEvB,EAAE;AAEK,MAAME,IAAA,GAAOC,OAAA,CAAqB,CAACC,MAAA,EAAQC,GAAA,KAAQ;EACxD,MAAMC,KAAA,GAAQC,QAAA,CAAS,QAAQhB,YAAA,EAAca,MAAM;EACnD,MAAM;IACJI,UAAA;IACAC,SAAA;IACAC,KAAA;IACAC,MAAA;IACAC,QAAA;IACAC,IAAA;IACApB,IAAA;IACAD,MAAA;IACAE,OAAA;IACAK,KAAA;IACAD,OAAA;IACAgB,QAAA;IACAC,WAAA;IACAC,IAAA;IACAC,UAAA;IACA,GAAGC;EAAA,CACL,GAAIZ,KAAA;EAEJ,MAAMa,SAAA,GAAYC,SAAA,CAAuB;IACvCC,IAAA,EAAM;IACNC,OAAA;IACAhB,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAK,UAAA;IACAJ,IAAA;IACAlB;EAAA,CACD;EAED,MAAM4B,mBAAA,GAAsBC,kBAAA,EAAmB;EAE/C,IAAIR,IAAA,KAAS,eAAeD,WAAA,EAAa;IACvC,sBACEU,IAAA,CAACC,YAAA;MAAaC,KAAA,EAAO;QAAER,SAAA;QAAW1B,IAAA;QAAMC,OAAA;QAASqB,WAAA;QAAaC;MAAA,CAAK;MACjEF,QAAA,kBAAAc,GAAA,CAACC,aAAA;QAAcC,QAAA,EAAU,IAAIP,mBAAmB;QAAK,GAAGjB;MAAA,CAAO,kBAC/DsB,GAAA,CAAC;QAAK,GAAGT,SAAA,CAAU,WAAW;QAC5BL,QAAA,iBAAAc,GAAA,CAACG,GAAA;UAAI1B,GAAA;UAAW,GAAGc,SAAA,CAAU,QAAQ;YAAEV,SAAA,EAAWc;UAAA,CAAqB;UAAI,GAAGL,MAAA;UAC5EJ,QAAA,iBAAAc,GAAA,CAAC;YAAK,GAAGT,SAAA,CAAU,OAAO;YAAIL;UAAA,CAAS;QAAA,CACzC;MAAA,CACF;IAAA,CACF;EAEJ;EAEA,sBACEW,IAAA,CAACC,YAAA;IAAaC,KAAA,EAAO;MAAER,SAAA;MAAW1B,IAAA;MAAMC,OAAA;MAASqB,WAAA;MAAaC;IAAA,CAAK;IACjEF,QAAA,kBAAAc,GAAA,CAACC,aAAA;MAAcC,QAAA,EAAU,IAAIP,mBAAmB;MAAK,GAAGjB;IAAA,CAAO,kBAC/DsB,GAAA,CAACG,GAAA;MAAI1B,GAAA;MAAW,GAAGc,SAAA,CAAU,QAAQ;QAAEV,SAAA,EAAWc;MAAA,CAAqB;MAAI,GAAGL,MAAA;MAC5EJ,QAAA,iBAAAc,GAAA,CAAC;QAAK,GAAGT,SAAA,CAAU,OAAO;QAAIL;MAAA,CAAS;IAAA,CACzC;EAAA,CACF;AAEJ,CAAC;AAEDZ,IAAA,CAAKoB,OAAA,GAAUA,OAAA;AACfpB,IAAA,CAAK8B,WAAA,GAAc;AACnB9B,IAAA,CAAK+B,GAAA,GAAMC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}