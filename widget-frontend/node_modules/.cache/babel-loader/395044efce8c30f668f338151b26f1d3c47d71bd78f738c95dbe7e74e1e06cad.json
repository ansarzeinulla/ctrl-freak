{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useState, useCallback } from 'react';\nimport { clamp } from '../utils/clamp/clamp.mjs';\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity\n};\nfunction useCounter() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    min,\n    max\n  } = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  const [count, setCount] = useState(clamp(initialValue, min, max));\n  const increment = useCallback(() => setCount(current => clamp(current + 1, min, max)), [min, max]);\n  const decrement = useCallback(() => setCount(current => clamp(current - 1, min, max)), [min, max]);\n  const set = useCallback(value => setCount(clamp(value, min, max)), [min, max]);\n  const reset = useCallback(() => setCount(clamp(initialValue, min, max)), [initialValue, min, max]);\n  return [count, {\n    increment,\n    decrement,\n    set,\n    reset\n  }];\n}\nexport { useCounter };","map":{"version":3,"names":["DEFAULT_OPTIONS","min","Infinity","max","useCounter","initialValue","arguments","length","undefined","options","_objectSpread","count","setCount","useState","clamp","increment","useCallback","current","decrement","set","value","reset"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/hooks/src/use-counter/use-counter.ts"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport { clamp } from '../utils';\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity,\n};\n\nexport interface UseCounterOptions {\n  min?: number;\n  max?: number;\n}\n\nexport interface UseCounterHandlers {\n  increment: () => void;\n  decrement: () => void;\n  set: (value: number) => void;\n  reset: () => void;\n}\n\nexport type UseCounterReturnValue = [number, UseCounterHandlers];\n\nexport function useCounter(\n  initialValue = 0,\n  options?: UseCounterOptions\n): [number, UseCounterHandlers] {\n  const { min, max } = { ...DEFAULT_OPTIONS, ...options };\n  const [count, setCount] = useState<number>(clamp(initialValue, min, max));\n\n  const increment = useCallback(\n    () => setCount((current) => clamp(current + 1, min, max)),\n    [min, max]\n  );\n\n  const decrement = useCallback(\n    () => setCount((current) => clamp(current - 1, min, max)),\n    [min, max]\n  );\n\n  const set = useCallback((value: number) => setCount(clamp(value, min, max)), [min, max]);\n\n  const reset = useCallback(\n    () => setCount(clamp(initialValue, min, max)),\n    [initialValue, min, max]\n  );\n\n  return [count, { increment, decrement, set, reset }];\n}\n"],"mappings":";;;;;AAGA,MAAMA,eAAA,GAAkB;EACtBC,GAAA,EAAK,CAAAC,QAAA;EACLC,GAAA,EAAKD;AACP;AAgBO,SAASE,WAAA,EAGgB;EAAA,IAF9BC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe;EAAA,IACfG,OAAA,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEA,MAAM;IAAEP,GAAA;IAAKE;EAAA,CAAI,GAAAO,aAAA,CAAAA,aAAA,KAASV,eAAA,GAAoBS,OAAA,CAAQ;EACtD,MAAM,CAACE,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CAAiBC,KAAA,CAAMT,YAAA,EAAcJ,GAAA,EAAKE,GAAG,CAAC;EAExE,MAAMY,SAAA,GAAYC,WAAA,CAChB,MAAMJ,QAAA,CAAUK,OAAA,IAAYH,KAAA,CAAMG,OAAA,GAAU,GAAGhB,GAAA,EAAKE,GAAG,CAAC,GACxD,CAACF,GAAA,EAAKE,GAAG,EACX;EAEA,MAAMe,SAAA,GAAYF,WAAA,CAChB,MAAMJ,QAAA,CAAUK,OAAA,IAAYH,KAAA,CAAMG,OAAA,GAAU,GAAGhB,GAAA,EAAKE,GAAG,CAAC,GACxD,CAACF,GAAA,EAAKE,GAAG,EACX;EAEA,MAAMgB,GAAA,GAAMH,WAAA,CAAaI,KAAA,IAAkBR,QAAA,CAASE,KAAA,CAAMM,KAAA,EAAOnB,GAAA,EAAKE,GAAG,CAAC,GAAG,CAACF,GAAA,EAAKE,GAAG,CAAC;EAEvF,MAAMkB,KAAA,GAAQL,WAAA,CACZ,MAAMJ,QAAA,CAASE,KAAA,CAAMT,YAAA,EAAcJ,GAAA,EAAKE,GAAG,CAAC,GAC5C,CAACE,YAAA,EAAcJ,GAAA,EAAKE,GAAG,EACzB;EAEA,OAAO,CAACQ,KAAA,EAAO;IAAEI,SAAA;IAAWG,SAAA;IAAWC,GAAA;IAAKE;EAAA,CAAO;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}