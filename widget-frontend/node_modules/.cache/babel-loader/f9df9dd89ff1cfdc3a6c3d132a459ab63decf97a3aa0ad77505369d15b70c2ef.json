{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useUncontrolled } from '@mantine/hooks';\nimport '../../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ChipGroupProvider } from '../ChipGroup.context.mjs';\nfunction ChipGroup(props) {\n  const {\n    value,\n    defaultValue,\n    onChange,\n    multiple,\n    children\n  } = useProps(\"ChipGroup\", null, props);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isChipSelected = val => Array.isArray(_value) ? _value.includes(val) : val === _value;\n  const handleChange = event => {\n    const val = event.currentTarget.value;\n    if (Array.isArray(_value)) {\n      setValue(_value.includes(val) ? _value.filter(v => v !== val) : [..._value, val]);\n    } else {\n      setValue(val);\n    }\n  };\n  return /* @__PURE__ */jsx(ChipGroupProvider, {\n    value: {\n      isChipSelected,\n      onChange: handleChange,\n      multiple\n    },\n    children\n  });\n}\nChipGroup.displayName = \"@mantine/core/ChipGroup\";\nexport { ChipGroup };","map":{"version":3,"names":["ChipGroup","props","value","defaultValue","onChange","multiple","children","useProps","_value","setValue","useUncontrolled","finalValue","isChipSelected","val","Array","isArray","includes","handleChange","event","currentTarget","filter","v","jsx","ChipGroupProvider","displayName"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/Chip/ChipGroup/ChipGroup.tsx"],"sourcesContent":["import { useUncontrolled } from '@mantine/hooks';\nimport { useProps } from '../../../core';\nimport { ChipGroupProvider } from '../ChipGroup.context';\n\nexport interface ChipGroupProps<T extends boolean = false> {\n  /** If set, multiple values can be selected */\n  multiple?: T;\n\n  /** Controlled component value */\n  value?: T extends true ? string[] : string | null;\n\n  /** Uncontrolled component initial value */\n  defaultValue?: T extends true ? string[] : string | null;\n\n  /** Called when value changes. If `multiple` prop is set, called with an array of selected values. If not, called with a string value of selected chip. */\n  onChange?: (value: T extends true ? string[] : string) => void;\n\n  /** `Chip` components and any other elements */\n  children?: React.ReactNode;\n}\n\nexport function ChipGroup<T extends boolean>(props: ChipGroupProps<T>) {\n  const { value, defaultValue, onChange, multiple, children } = useProps('ChipGroup', null, props);\n\n  const [_value, setValue] = useUncontrolled<string | null | string[]>({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as string[]) : null,\n    onChange: onChange as any,\n  });\n\n  const isChipSelected = (val: string) =>\n    Array.isArray(_value) ? _value.includes(val) : val === _value;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.currentTarget.value;\n    if (Array.isArray(_value)) {\n      setValue(_value.includes(val) ? _value.filter((v) => v !== val) : [..._value, val]);\n    } else {\n      setValue(val);\n    }\n  };\n\n  return (\n    <ChipGroupProvider value={{ isChipSelected, onChange: handleChange, multiple }}>\n      {children}\n    </ChipGroupProvider>\n  );\n}\n\nChipGroup.displayName = '@mantine/core/ChipGroup';\n"],"mappings":";;;;;;;;;;;;;;;;AAqBO,SAASA,UAA6BC,KAAA,EAA0B;EACrE,MAAM;IAAEC,KAAA;IAAOC,YAAA;IAAcC,QAAA;IAAUC,QAAA;IAAUC;EAAA,CAAS,GAAIC,QAAA,CAAS,aAAa,MAAMN,KAAK;EAE/F,MAAM,CAACO,MAAA,EAAQC,QAAQ,IAAIC,eAAA,CAA0C;IACnER,KAAA;IACAC,YAAA;IACAQ,UAAA,EAAYN,QAAA,GAAY,EAAC,GAAiB;IAC1CD;EAAA,CACD;EAED,MAAMQ,cAAA,GAAkBC,GAAA,IACtBC,KAAA,CAAMC,OAAA,CAAQP,MAAM,IAAIA,MAAA,CAAOQ,QAAA,CAASH,GAAG,IAAIA,GAAA,KAAQL,MAAA;EAEzD,MAAMS,YAAA,GAAgBC,KAAA,IAA+C;IACnE,MAAML,GAAA,GAAMK,KAAA,CAAMC,aAAA,CAAcjB,KAAA;IAChC,IAAIY,KAAA,CAAMC,OAAA,CAAQP,MAAM,GAAG;MACzBC,QAAA,CAASD,MAAA,CAAOQ,QAAA,CAASH,GAAG,IAAIL,MAAA,CAAOY,MAAA,CAAQC,CAAA,IAAMA,CAAA,KAAMR,GAAG,IAAI,CAAC,GAAGL,MAAA,EAAQK,GAAG,CAAC;IACpF,OAAO;MACLJ,QAAA,CAASI,GAAG;IACd;EACF;EAEA,sBACES,GAAA,CAACC,iBAAA;IAAkBrB,KAAA,EAAO;MAAEU,cAAA;MAAgBR,QAAA,EAAUa,YAAA;MAAcZ;IAAA,CAAS;IAC1EC;EAAA,CACH;AAEJ;AAEAN,SAAA,CAAUwB,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}