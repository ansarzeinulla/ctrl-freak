{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Textarea } from '../Textarea/Textarea.mjs';\nimport { validateJson } from './validate-json/validate-json.mjs';\nconst defaultProps = {\n  serialize: JSON.stringify,\n  deserialize: JSON.parse,\n  size: \"sm\"\n};\nconst JsonInput = factory((props, ref) => {\n  const {\n    value,\n    defaultValue,\n    onChange,\n    formatOnBlur,\n    validationError,\n    serialize,\n    deserialize,\n    onFocus,\n    onBlur,\n    readOnly,\n    error,\n    ...others\n  } = useProps(\"JsonInput\", defaultProps, props);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: \"\",\n    onChange\n  });\n  const [valid, setValid] = useState(validateJson(_value, deserialize));\n  const handleFocus = event => {\n    onFocus?.(event);\n    setValid(true);\n  };\n  const handleBlur = event => {\n    typeof onBlur === \"function\" && onBlur(event);\n    const isValid = validateJson(event.currentTarget.value, deserialize);\n    formatOnBlur && !readOnly && isValid && event.currentTarget.value.trim() !== \"\" && setValue(serialize(deserialize(event.currentTarget.value), null, 2));\n    setValid(isValid);\n  };\n  return /* @__PURE__ */jsx(Textarea, {\n    value: _value,\n    onChange: event => setValue(event.currentTarget.value),\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ref,\n    readOnly,\n    ...others,\n    autoComplete: \"off\",\n    __staticSelector: \"JsonInput\",\n    error: valid ? error : validationError || true,\n    \"data-monospace\": true\n  });\n});\nJsonInput.classes = InputBase.classes;\nJsonInput.displayName = \"@mantine/core/JsonInput\";\nexport { JsonInput };","map":{"version":3,"names":["defaultProps","serialize","JSON","stringify","deserialize","parse","size","JsonInput","factory","props","ref","value","defaultValue","onChange","formatOnBlur","validationError","onFocus","onBlur","readOnly","error","others","useProps","_value","setValue","useUncontrolled","finalValue","valid","setValid","useState","validateJson","handleFocus","event","handleBlur","isValid","currentTarget","trim","jsx","Textarea","autoComplete","__staticSelector","classes","InputBase","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/JsonInput/JsonInput.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { factory, Factory, useProps } from '../../core';\nimport { __InputStylesNames } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { Textarea, TextareaProps } from '../Textarea';\nimport { validateJson } from './validate-json/validate-json';\n\nexport interface JsonInputProps extends Omit<TextareaProps, 'onChange'> {\n  /** Controlled component value */\n  value?: string;\n\n  /** Uncontrolled component default value */\n  defaultValue?: string;\n\n  /** Called when value changes */\n  onChange?: (value: string) => void;\n\n  /** Determines whether the value should be formatted on blur @default `false` */\n  formatOnBlur?: boolean;\n\n  /** Error message displayed when value is not valid JSON */\n  validationError?: React.ReactNode;\n\n  /** Function to serialize value into a string, used for value formatting @default `JSON.stringify` */\n  serialize?: typeof JSON.stringify;\n\n  /** Function to deserialize string value, used for value formatting and input JSON validation, must throw error if string cannot be processed @default `JSON.parse` */\n  deserialize?: typeof JSON.parse;\n}\n\nexport type JsonInputFactory = Factory<{\n  props: JsonInputProps;\n  ref: HTMLTextAreaElement;\n  stylesNames: __InputStylesNames;\n}>;\n\nconst defaultProps = {\n  serialize: JSON.stringify,\n  deserialize: JSON.parse,\n  size: 'sm',\n} satisfies Partial<JsonInputProps>;\n\nexport const JsonInput = factory<JsonInputFactory>((props, ref) => {\n  const {\n    value,\n    defaultValue,\n    onChange,\n    formatOnBlur,\n    validationError,\n    serialize,\n    deserialize,\n    onFocus,\n    onBlur,\n    readOnly,\n    error,\n    ...others\n  } = useProps('JsonInput', defaultProps, props);\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: '',\n    onChange,\n  });\n\n  const [valid, setValid] = useState(validateJson(_value, deserialize));\n\n  const handleFocus = (event: React.FocusEvent<HTMLTextAreaElement>) => {\n    onFocus?.(event);\n    setValid(true);\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLTextAreaElement>) => {\n    typeof onBlur === 'function' && onBlur(event);\n    const isValid = validateJson(event.currentTarget.value, deserialize);\n    formatOnBlur &&\n      !readOnly &&\n      isValid &&\n      event.currentTarget.value.trim() !== '' &&\n      setValue(serialize(deserialize(event.currentTarget.value), null, 2));\n    setValid(isValid);\n  };\n\n  return (\n    <Textarea\n      value={_value}\n      onChange={(event) => setValue(event.currentTarget.value)}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      ref={ref}\n      readOnly={readOnly}\n      {...others}\n      autoComplete=\"off\"\n      __staticSelector=\"JsonInput\"\n      error={valid ? error : validationError || true}\n      data-monospace\n    />\n  );\n});\n\nJsonInput.classes = InputBase.classes;\nJsonInput.displayName = '@mantine/core/JsonInput';\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAqCA,MAAMA,YAAA,GAAe;EACnBC,SAAA,EAAWC,IAAA,CAAKC,SAAA;EAChBC,WAAA,EAAaF,IAAA,CAAKG,KAAA;EAClBC,IAAA,EAAM;AACR;AAEO,MAAMC,SAAA,GAAYC,OAAA,CAA0B,CAACC,KAAA,EAAOC,GAAA,KAAQ;EACjE,MAAM;IACJC,KAAA;IACAC,YAAA;IACAC,QAAA;IACAC,YAAA;IACAC,eAAA;IACAd,SAAA;IACAG,WAAA;IACAY,OAAA;IACAC,MAAA;IACAC,QAAA;IACAC,KAAA;IACA,GAAGC;EAAA,CACL,GAAIC,QAAA,CAAS,aAAarB,YAAA,EAAcS,KAAK;EAE7C,MAAM,CAACa,MAAA,EAAQC,QAAQ,IAAIC,eAAA,CAAgB;IACzCb,KAAA;IACAC,YAAA;IACAa,UAAA,EAAY;IACZZ;EAAA,CACD;EAED,MAAM,CAACa,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CAASC,YAAA,CAAaP,MAAA,EAAQlB,WAAW,CAAC;EAEpE,MAAM0B,WAAA,GAAeC,KAAA,IAAiD;IACpEf,OAAA,GAAUe,KAAK;IACfJ,QAAA,CAAS,IAAI;EACf;EAEA,MAAMK,UAAA,GAAcD,KAAA,IAAiD;IACnE,OAAOd,MAAA,KAAW,cAAcA,MAAA,CAAOc,KAAK;IAC5C,MAAME,OAAA,GAAUJ,YAAA,CAAaE,KAAA,CAAMG,aAAA,CAAcvB,KAAA,EAAOP,WAAW;IACnEU,YAAA,IACE,CAACI,QAAA,IACDe,OAAA,IACAF,KAAA,CAAMG,aAAA,CAAcvB,KAAA,CAAMwB,IAAA,EAAK,KAAM,MACrCZ,QAAA,CAAStB,SAAA,CAAUG,WAAA,CAAY2B,KAAA,CAAMG,aAAA,CAAcvB,KAAK,GAAG,MAAM,CAAC,CAAC;IACrEgB,QAAA,CAASM,OAAO;EAClB;EAEA,sBACEG,GAAA,CAACC,QAAA;IACC1B,KAAA,EAAOW,MAAA;IACPT,QAAA,EAAWkB,KAAA,IAAUR,QAAA,CAASQ,KAAA,CAAMG,aAAA,CAAcvB,KAAK;IACvDK,OAAA,EAASc,WAAA;IACTb,MAAA,EAAQe,UAAA;IACRtB,GAAA;IACAQ,QAAA;IACC,GAAGE,MAAA;IACJkB,YAAA,EAAa;IACbC,gBAAA,EAAiB;IACjBpB,KAAA,EAAOO,KAAA,GAAQP,KAAA,GAAQJ,eAAA,IAAmB;IAC1C,kBAAc;EAAA,EAChB;AAEJ,CAAC;AAEDR,SAAA,CAAUiC,OAAA,GAAUC,SAAA,CAAUD,OAAA;AAC9BjC,SAAA,CAAUmC,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}