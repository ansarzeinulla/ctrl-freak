{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport cx from 'clsx';\nimport '../../Checkbox/Checkbox.mjs';\nimport '../../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../../Checkbox/CheckIcon.mjs';\nimport '../../Checkbox/CheckboxIndicator/CheckboxIndicator.mjs';\nimport '../../Checkbox/CheckboxCard/CheckboxCard.mjs';\nimport '../../Checkbox/CheckboxCard/CheckboxCard.context.mjs';\nimport '../../Checkbox/CheckboxGroup.context.mjs';\nimport { ScrollArea } from '../../ScrollArea/ScrollArea.mjs';\nimport { Combobox } from '../Combobox.mjs';\nimport { defaultOptionsFilter } from './default-options-filter.mjs';\nimport { isEmptyComboboxData } from './is-empty-combobox-data.mjs';\nimport { isOptionsGroup } from './is-options-group.mjs';\nimport { validateOptions } from './validate-options.mjs';\nimport classes from '../Combobox.module.css.mjs';\nfunction isValueChecked(value, optionValue) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\nfunction Option(_ref) {\n  let {\n    data,\n    withCheckIcon,\n    value,\n    checkIconPosition,\n    unstyled,\n    renderOption\n  } = _ref;\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && /* @__PURE__ */jsx(CheckIcon, {\n      className: classes.optionsDropdownCheckIcon\n    });\n    const defaultContent = /* @__PURE__ */jsxs(Fragment, {\n      children: [checkIconPosition === \"left\" && check, /* @__PURE__ */jsx(\"span\", {\n        children: data.label\n      }), checkIconPosition === \"right\" && check]\n    });\n    return /* @__PURE__ */jsx(Combobox.Option, {\n      value: data.value,\n      disabled: data.disabled,\n      className: cx({\n        [classes.optionsDropdownOption]: !unstyled\n      }),\n      \"data-reverse\": checkIconPosition === \"right\" || void 0,\n      \"data-checked\": checked || void 0,\n      \"aria-selected\": checked,\n      active: checked,\n      children: typeof renderOption === \"function\" ? renderOption({\n        option: data,\n        checked\n      }) : defaultContent\n    });\n  }\n  const options = data.items.map(item => /* @__PURE__ */jsx(Option, {\n    data: item,\n    value,\n    unstyled,\n    withCheckIcon,\n    checkIconPosition,\n    renderOption\n  }, item.value));\n  return /* @__PURE__ */jsx(Combobox.Group, {\n    label: data.group,\n    children: options\n  });\n}\nfunction OptionsDropdown(_ref2) {\n  let {\n    data,\n    hidden,\n    hiddenWhenEmpty,\n    filter,\n    search,\n    limit,\n    maxDropdownHeight,\n    withScrollArea = true,\n    filterOptions = true,\n    withCheckIcon = false,\n    value,\n    checkIconPosition,\n    nothingFoundMessage,\n    unstyled,\n    labelId,\n    renderOption,\n    scrollAreaProps,\n    \"aria-label\": ariaLabel\n  } = _ref2;\n  validateOptions(data);\n  const shouldFilter = typeof search === \"string\";\n  const filteredData = shouldFilter ? (filter || defaultOptionsFilter)({\n    options: data,\n    search: filterOptions ? search : \"\",\n    limit: limit !== null && limit !== void 0 ? limit : Infinity\n  }) : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n  const options = filteredData.map(item => /* @__PURE__ */jsx(Option, {\n    data: item,\n    withCheckIcon,\n    value,\n    checkIconPosition,\n    unstyled,\n    renderOption\n  }, isOptionsGroup(item) ? item.group : item.value));\n  return /* @__PURE__ */jsx(Combobox.Dropdown, {\n    hidden: hidden || hiddenWhenEmpty && isEmpty,\n    \"data-composed\": true,\n    children: /* @__PURE__ */jsxs(Combobox.Options, {\n      labelledBy: labelId,\n      \"aria-label\": ariaLabel,\n      children: [withScrollArea ? /* @__PURE__ */jsx(ScrollArea.Autosize, _objectSpread(_objectSpread({\n        mah: maxDropdownHeight !== null && maxDropdownHeight !== void 0 ? maxDropdownHeight : 220,\n        type: \"scroll\",\n        scrollbarSize: \"var(--combobox-padding)\",\n        offsetScrollbars: \"y\"\n      }, scrollAreaProps), {}, {\n        children: options\n      })) : options, isEmpty && nothingFoundMessage && /* @__PURE__ */jsx(Combobox.Empty, {\n        children: nothingFoundMessage\n      })]\n    })\n  });\n}\nexport { OptionsDropdown };","map":{"version":3,"names":["isValueChecked","value","optionValue","Array","isArray","includes","Option","_ref","data","withCheckIcon","checkIconPosition","unstyled","renderOption","isOptionsGroup","checked","check","jsx","CheckIcon","className","classes","optionsDropdownCheckIcon","defaultContent","jsxs","Fragment","children","label","Combobox","disabled","cx","optionsDropdownOption","active","option","options","items","map","item","Group","group","OptionsDropdown","_ref2","hidden","hiddenWhenEmpty","filter","search","limit","maxDropdownHeight","withScrollArea","filterOptions","nothingFoundMessage","labelId","scrollAreaProps","ariaLabel","validateOptions","shouldFilter","filteredData","defaultOptionsFilter","Infinity","isEmpty","isEmptyComboboxData","Dropdown","Options","labelledBy","ScrollArea","Autosize","_objectSpread","mah","type","scrollbarSize","offsetScrollbars","Empty"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/OptionsDropdown.tsx"],"sourcesContent":["import cx from 'clsx';\nimport { CheckIcon } from '../../Checkbox';\nimport { ScrollArea, ScrollAreaProps } from '../../ScrollArea/ScrollArea';\nimport { Combobox } from '../Combobox';\nimport { ComboboxItem, ComboboxLikeRenderOptionInput, ComboboxParsedItem } from '../Combobox.types';\nimport { defaultOptionsFilter, FilterOptionsInput } from './default-options-filter';\nimport { isEmptyComboboxData } from './is-empty-combobox-data';\nimport { isOptionsGroup } from './is-options-group';\nimport { validateOptions } from './validate-options';\nimport classes from '../Combobox.module.css';\n\nexport type OptionsFilter = (input: FilterOptionsInput) => ComboboxParsedItem[];\n\nexport interface OptionsGroup {\n  group: string;\n  items: ComboboxItem[];\n}\n\nexport type OptionsData = (ComboboxItem | OptionsGroup)[];\n\ninterface OptionProps {\n  data: ComboboxItem | OptionsGroup;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  unstyled: boolean | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n}\n\nfunction isValueChecked(value: string | string[] | undefined | null, optionValue: string) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\n\nfunction Option({\n  data,\n  withCheckIcon,\n  value,\n  checkIconPosition,\n  unstyled,\n  renderOption,\n}: OptionProps) {\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && (\n      <CheckIcon className={classes.optionsDropdownCheckIcon} />\n    );\n\n    const defaultContent = (\n      <>\n        {checkIconPosition === 'left' && check}\n        <span>{data.label}</span>\n        {checkIconPosition === 'right' && check}\n      </>\n    );\n\n    return (\n      <Combobox.Option\n        value={data.value}\n        disabled={data.disabled}\n        className={cx({ [classes.optionsDropdownOption]: !unstyled })}\n        data-reverse={checkIconPosition === 'right' || undefined}\n        data-checked={checked || undefined}\n        aria-selected={checked}\n        active={checked}\n      >\n        {typeof renderOption === 'function'\n          ? renderOption({ option: data, checked })\n          : defaultContent}\n      </Combobox.Option>\n    );\n  }\n\n  const options = data.items.map((item) => (\n    <Option\n      data={item}\n      value={value}\n      key={item.value}\n      unstyled={unstyled}\n      withCheckIcon={withCheckIcon}\n      checkIconPosition={checkIconPosition}\n      renderOption={renderOption}\n    />\n  ));\n\n  return <Combobox.Group label={data.group}>{options}</Combobox.Group>;\n}\n\nexport interface OptionsDropdownProps {\n  data: OptionsData;\n  filter: OptionsFilter | undefined;\n  search: string | undefined;\n  limit: number | undefined;\n  withScrollArea: boolean | undefined;\n  maxDropdownHeight: number | string | undefined;\n  hidden?: boolean;\n  hiddenWhenEmpty?: boolean;\n  filterOptions?: boolean;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  nothingFoundMessage?: React.ReactNode;\n  unstyled: boolean | undefined;\n  labelId: string | undefined;\n  'aria-label': string | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n  scrollAreaProps: ScrollAreaProps | undefined;\n}\n\nexport function OptionsDropdown({\n  data,\n  hidden,\n  hiddenWhenEmpty,\n  filter,\n  search,\n  limit,\n  maxDropdownHeight,\n  withScrollArea = true,\n  filterOptions = true,\n  withCheckIcon = false,\n  value,\n  checkIconPosition,\n  nothingFoundMessage,\n  unstyled,\n  labelId,\n  renderOption,\n  scrollAreaProps,\n  'aria-label': ariaLabel,\n}: OptionsDropdownProps) {\n  validateOptions(data);\n\n  const shouldFilter = typeof search === 'string';\n  const filteredData = shouldFilter\n    ? (filter || defaultOptionsFilter)({\n        options: data,\n        search: filterOptions ? search : '',\n        limit: limit ?? Infinity,\n      })\n    : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n\n  const options = filteredData.map((item) => (\n    <Option\n      data={item}\n      key={isOptionsGroup(item) ? item.group : item.value}\n      withCheckIcon={withCheckIcon}\n      value={value}\n      checkIconPosition={checkIconPosition}\n      unstyled={unstyled}\n      renderOption={renderOption}\n    />\n  ));\n\n  return (\n    <Combobox.Dropdown hidden={hidden || (hiddenWhenEmpty && isEmpty)} data-composed>\n      <Combobox.Options labelledBy={labelId} aria-label={ariaLabel}>\n        {withScrollArea ? (\n          <ScrollArea.Autosize\n            mah={maxDropdownHeight ?? 220}\n            type=\"scroll\"\n            scrollbarSize=\"var(--combobox-padding)\"\n            offsetScrollbars=\"y\"\n            {...scrollAreaProps}\n          >\n            {options}\n          </ScrollArea.Autosize>\n        ) : (\n          options\n        )}\n        {isEmpty && nothingFoundMessage && <Combobox.Empty>{nothingFoundMessage}</Combobox.Empty>}\n      </Combobox.Options>\n    </Combobox.Dropdown>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}