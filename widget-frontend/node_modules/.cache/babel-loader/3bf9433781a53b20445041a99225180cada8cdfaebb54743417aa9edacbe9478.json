{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport { isElement } from '../../core/utils/is-element/is-element.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nfunction FocusTrap({\n  children,\n  active = true,\n  refProp = \"ref\",\n  innerRef\n}) {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, innerRef);\n  if (!isElement(children)) {\n    return children;\n  }\n  return cloneElement(children, {\n    [refProp]: ref\n  });\n}\nfunction FocusTrapInitialFocus(props) {\n  return /* @__PURE__ */jsx(VisuallyHidden, {\n    tabIndex: -1,\n    \"data-autofocus\": true,\n    ...props\n  });\n}\nFocusTrap.displayName = \"@mantine/core/FocusTrap\";\nFocusTrapInitialFocus.displayName = \"@mantine/core/FocusTrapInitialFocus\";\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\nexport { FocusTrap, FocusTrapInitialFocus };","map":{"version":3,"names":["FocusTrap","children","active","refProp","innerRef","focusTrapRef","useFocusTrap","ref","useMergedRef","isElement","cloneElement","FocusTrapInitialFocus","props","jsx","VisuallyHidden","tabIndex","displayName","InitialFocus"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/FocusTrap/FocusTrap.tsx"],"sourcesContent":["import { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core';\nimport { VisuallyHidden } from '../VisuallyHidden';\n\nexport interface FocusTrapProps {\n  /** Element to trap focus at, must support ref prop */\n  children: any;\n\n  /** If set to `false`, disables focus trap */\n  active?: boolean;\n\n  /** Prop that is used to access element ref @default `'ref'` */\n  refProp?: string;\n\n  /** Ref to combine with the focus trap ref */\n  innerRef?: React.ForwardedRef<any>;\n}\n\nexport function FocusTrap({\n  children,\n  active = true,\n  refProp = 'ref',\n  innerRef,\n}: FocusTrapProps): React.ReactElement {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, innerRef);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, { [refProp]: ref });\n}\n\nexport function FocusTrapInitialFocus(props: React.ComponentPropsWithoutRef<'span'>) {\n  return <VisuallyHidden tabIndex={-1} data-autofocus {...props} />;\n}\n\nFocusTrap.displayName = '@mantine/core/FocusTrap';\nFocusTrapInitialFocus.displayName = '@mantine/core/FocusTrapInitialFocus';\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\n"],"mappings":";;;;;;;;;;;;;;;;AAmBO,SAASA,UAAU;EACxBC,QAAA;EACAC,MAAA,GAAS;EACTC,OAAA,GAAU;EACVC;AACF,GAAuC;EACrC,MAAMC,YAAA,GAAeC,YAAA,CAAaJ,MAAM;EACxC,MAAMK,GAAA,GAAMC,YAAA,CAAaH,YAAA,EAAcD,QAAQ;EAE/C,IAAI,CAACK,SAAA,CAAUR,QAAQ,GAAG;IACxB,OAAOA,QAAA;EACT;EAEA,OAAOS,YAAA,CAAaT,QAAA,EAAU;IAAE,CAACE,OAAO,GAAGI;EAAA,CAAK;AAClD;AAEO,SAASI,sBAAsBC,KAAA,EAA+C;EACnF,sBAAAC,GAAA,CAAQC,cAAA;IAAeC,QAAA,EAAU;IAAI,kBAAc;IAAE,GAAGH;EAAA,CAAO;AACjE;AAEAZ,SAAA,CAAUgB,WAAA,GAAc;AACxBL,qBAAA,CAAsBK,WAAA,GAAc;AACpChB,SAAA,CAAUiB,YAAA,GAAeN,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}