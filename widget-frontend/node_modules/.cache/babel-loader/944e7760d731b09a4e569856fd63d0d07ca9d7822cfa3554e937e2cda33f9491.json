{"ast":null,"code":"'use client';\n\nimport { cssVariablesObjectToString } from './css-variables-object-to-string.mjs';\nimport { wrapWithSelector } from './wrap-with-selector.mjs';\nfunction convertCssVariables(input, selector) {\n  const sharedVariables = cssVariablesObjectToString(input.variables);\n  const shared = sharedVariables ? wrapWithSelector(selector, sharedVariables) : \"\";\n  const dark = cssVariablesObjectToString(input.dark);\n  const light = cssVariablesObjectToString(input.light);\n  const darkForced = dark ? selector === \":host\" ? wrapWithSelector(\"\".concat(selector, \"([data-mantine-color-scheme=\\\"dark\\\"])\"), dark) : wrapWithSelector(\"\".concat(selector, \"[data-mantine-color-scheme=\\\"dark\\\"]\"), dark) : \"\";\n  const lightForced = light ? selector === \":host\" ? wrapWithSelector(\"\".concat(selector, \"([data-mantine-color-scheme=\\\"light\\\"])\"), light) : wrapWithSelector(\"\".concat(selector, \"[data-mantine-color-scheme=\\\"light\\\"]\"), light) : \"\";\n  return \"\".concat(shared, \"\\n\\n\").concat(darkForced, \"\\n\\n\").concat(lightForced);\n}\nexport { convertCssVariables };","map":{"version":3,"names":["convertCssVariables","input","selector","sharedVariables","cssVariablesObjectToString","variables","shared","wrapWithSelector","dark","light","darkForced","concat","lightForced"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/core/MantineProvider/convert-css-variables/convert-css-variables.ts"],"sourcesContent":["import { CSSVariables, cssVariablesObjectToString } from './css-variables-object-to-string';\nimport { wrapWithSelector } from './wrap-with-selector';\n\nexport interface ConvertCSSVariablesInput {\n  /** Shared CSS variables that should be accessible independent from color scheme */\n  variables: CSSVariables;\n\n  /** CSS variables available only in dark color scheme */\n  dark: CSSVariables;\n\n  /** CSS variables available only in light color scheme */\n  light: CSSVariables;\n}\n\nexport function convertCssVariables(input: ConvertCSSVariablesInput, selector: string) {\n  const sharedVariables = cssVariablesObjectToString(input.variables);\n  const shared = sharedVariables ? wrapWithSelector(selector, sharedVariables) : '';\n  const dark = cssVariablesObjectToString(input.dark);\n  const light = cssVariablesObjectToString(input.light);\n\n  const darkForced = dark\n    ? selector === ':host'\n      ? wrapWithSelector(`${selector}([data-mantine-color-scheme=\"dark\"])`, dark)\n      : wrapWithSelector(`${selector}[data-mantine-color-scheme=\"dark\"]`, dark)\n    : '';\n\n  const lightForced = light\n    ? selector === ':host'\n      ? wrapWithSelector(`${selector}([data-mantine-color-scheme=\"light\"])`, light)\n      : wrapWithSelector(`${selector}[data-mantine-color-scheme=\"light\"]`, light)\n    : '';\n\n  return `${shared}\\n\\n${darkForced}\\n\\n${lightForced}`;\n}\n"],"mappings":";;;;AAcO,SAASA,oBAAoBC,KAAA,EAAiCC,QAAA,EAAkB;EACrF,MAAMC,eAAA,GAAkBC,0BAAA,CAA2BH,KAAA,CAAMI,SAAS;EAClE,MAAMC,MAAA,GAASH,eAAA,GAAkBI,gBAAA,CAAiBL,QAAA,EAAUC,eAAe,IAAI;EAC/E,MAAMK,IAAA,GAAOJ,0BAAA,CAA2BH,KAAA,CAAMO,IAAI;EAClD,MAAMC,KAAA,GAAQL,0BAAA,CAA2BH,KAAA,CAAMQ,KAAK;EAEpD,MAAMC,UAAA,GAAaF,IAAA,GACfN,QAAA,KAAa,UACXK,gBAAA,IAAAI,MAAA,CAAoBT,QAAQ,6CAAwCM,IAAI,IACxED,gBAAA,IAAAI,MAAA,CAAoBT,QAAQ,2CAAsCM,IAAI,IACxE;EAEJ,MAAMI,WAAA,GAAcH,KAAA,GAChBP,QAAA,KAAa,UACXK,gBAAA,IAAAI,MAAA,CAAoBT,QAAQ,8CAAyCO,KAAK,IAC1EF,gBAAA,IAAAI,MAAA,CAAoBT,QAAQ,4CAAuCO,KAAK,IAC1E;EAEJ,UAAAE,MAAA,CAAUL,MAAM,UAAAK,MAAA,CAAOD,UAAU,UAAAC,MAAA,CAAOC,WAAW;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}