{"ast":null,"code":"function isHexColor(hex) {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}([0-9A-F]{2})?$/i;\n  return HEX_REGEXP.test(hex);\n}\nfunction hexToRgba(color) {\n  let hexString = color.replace(\"#\", \"\");\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split(\"\");\n    hexString = [shorthandHex[0], shorthandHex[0], shorthandHex[1], shorthandHex[1], shorthandHex[2], shorthandHex[2]].join(\"\");\n  }\n  if (hexString.length === 8) {\n    const alpha = parseInt(hexString.slice(6, 8), 16) / 255;\n    return {\n      r: parseInt(hexString.slice(0, 2), 16),\n      g: parseInt(hexString.slice(2, 4), 16),\n      b: parseInt(hexString.slice(4, 6), 16),\n      a: alpha\n    };\n  }\n  const parsed = parseInt(hexString, 16);\n  const r = parsed >> 16 & 255;\n  const g = parsed >> 8 & 255;\n  const b = parsed & 255;\n  return {\n    r,\n    g,\n    b,\n    a: 1\n  };\n}\nfunction rgbStringToRgba(color) {\n  const [r, g, b, a] = color.replace(/[^0-9,./]/g, \"\").split(/[/,]/).map(Number);\n  return {\n    r,\n    g,\n    b,\n    a: a === void 0 ? 1 : a\n  };\n}\nfunction hslStringToRgba(hslaString) {\n  const hslaRegex = /^hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*(,\\s*(0?\\.\\d+|\\d+(\\.\\d+)?))?\\s*\\)$/i;\n  const matches = hslaString.match(hslaRegex);\n  if (!matches) {\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    };\n  }\n  const h = parseInt(matches[1], 10);\n  const s = parseInt(matches[2], 10) / 100;\n  const l = parseInt(matches[3], 10) / 100;\n  const a = matches[5] ? parseFloat(matches[5]) : void 0;\n  const chroma = (1 - Math.abs(2 * l - 1)) * s;\n  const huePrime = h / 60;\n  const x = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  const m = l - chroma / 2;\n  let r;\n  let g;\n  let b;\n  if (huePrime >= 0 && huePrime < 1) {\n    r = chroma;\n    g = x;\n    b = 0;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    r = x;\n    g = chroma;\n    b = 0;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    r = 0;\n    g = chroma;\n    b = x;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    r = 0;\n    g = x;\n    b = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    r = x;\n    g = 0;\n    b = chroma;\n  } else {\n    r = chroma;\n    g = 0;\n    b = x;\n  }\n  return {\n    r: Math.round((r + m) * 255),\n    g: Math.round((g + m) * 255),\n    b: Math.round((b + m) * 255),\n    a: a || 1\n  };\n}\nfunction toRgba(color) {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n  if (color.startsWith(\"rgb\")) {\n    return rgbStringToRgba(color);\n  }\n  if (color.startsWith(\"hsl\")) {\n    return hslStringToRgba(color);\n  }\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  };\n}\nexport { toRgba };","map":{"version":3,"names":["isHexColor","hex","HEX_REGEXP","test","hexToRgba","color","hexString","replace","length","shorthandHex","split","join","alpha","parseInt","slice","r","g","b","a","parsed","rgbStringToRgba","map","Number","hslStringToRgba","hslaString","hslaRegex","matches","match","h","s","l","parseFloat","chroma","Math","abs","huePrime","x","m","round","toRgba","startsWith"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/core/MantineProvider/color-functions/to-rgba/to-rgba.ts"],"sourcesContent":["export interface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction isHexColor(hex: string): boolean {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}([0-9A-F]{2})?$/i;\n\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color: string): RGBA {\n  let hexString = color.replace('#', '');\n\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split('');\n    hexString = [\n      shorthandHex[0],\n      shorthandHex[0],\n      shorthandHex[1],\n      shorthandHex[1],\n      shorthandHex[2],\n      shorthandHex[2],\n    ].join('');\n  }\n\n  if (hexString.length === 8) {\n    const alpha = parseInt(hexString.slice(6, 8), 16) / 255;\n\n    return {\n      r: parseInt(hexString.slice(0, 2), 16),\n      g: parseInt(hexString.slice(2, 4), 16),\n      b: parseInt(hexString.slice(4, 6), 16),\n      a: alpha,\n    };\n  }\n\n  const parsed = parseInt(hexString, 16);\n  const r = (parsed >> 16) & 255;\n  const g = (parsed >> 8) & 255;\n  const b = parsed & 255;\n\n  return {\n    r,\n    g,\n    b,\n    a: 1,\n  };\n}\n\nfunction rgbStringToRgba(color: string): RGBA {\n  const [r, g, b, a] = color\n    .replace(/[^0-9,./]/g, '')\n    .split(/[/,]/)\n    .map(Number);\n\n  return { r, g, b, a: a === undefined ? 1 : a };\n}\n\nfunction hslStringToRgba(hslaString: string): RGBA {\n  const hslaRegex =\n    /^hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*(,\\s*(0?\\.\\d+|\\d+(\\.\\d+)?))?\\s*\\)$/i;\n\n  const matches = hslaString.match(hslaRegex);\n  if (!matches) {\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1,\n    };\n  }\n\n  const h = parseInt(matches[1], 10);\n  const s = parseInt(matches[2], 10) / 100;\n  const l = parseInt(matches[3], 10) / 100;\n  const a = matches[5] ? parseFloat(matches[5]) : undefined;\n\n  const chroma = (1 - Math.abs(2 * l - 1)) * s;\n  const huePrime = h / 60;\n  const x = chroma * (1 - Math.abs((huePrime % 2) - 1));\n  const m = l - chroma / 2;\n\n  let r: number;\n  let g: number;\n  let b: number;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    r = chroma;\n    g = x;\n    b = 0;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    r = x;\n    g = chroma;\n    b = 0;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    r = 0;\n    g = chroma;\n    b = x;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    r = 0;\n    g = x;\n    b = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    r = x;\n    g = 0;\n    b = chroma;\n  } else {\n    r = chroma;\n    g = 0;\n    b = x;\n  }\n\n  return {\n    r: Math.round((r + m) * 255),\n    g: Math.round((g + m) * 255),\n    b: Math.round((b + m) * 255),\n    a: a || 1,\n  };\n}\n\nexport function toRgba(color: string): RGBA {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith('rgb')) {\n    return rgbStringToRgba(color);\n  }\n\n  if (color.startsWith('hsl')) {\n    return hslStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}