{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"title\", \"withOverlay\", \"overlayProps\", \"withCloseButton\", \"closeButtonProps\", \"children\", \"radius\", \"opened\", \"stackId\", \"zIndex\"];\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useEffect } from 'react';\nimport '../../core/utils/units-converters/rem.mjs';\nimport { getDefaultZIndex } from '../../core/utils/get-default-z-index/get-default-z-index.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ModalBody } from './ModalBody.mjs';\nimport { ModalCloseButton } from './ModalCloseButton.mjs';\nimport { ModalContent } from './ModalContent.mjs';\nimport { ModalHeader } from './ModalHeader.mjs';\nimport { ModalOverlay } from './ModalOverlay.mjs';\nimport { ModalRoot } from './ModalRoot.mjs';\nimport { useModalStackContext, ModalStack } from './ModalStack.mjs';\nimport { ModalTitle } from './ModalTitle.mjs';\nimport classes from './Modal.module.css.mjs';\nconst defaultProps = {\n  closeOnClickOutside: true,\n  withinPortal: true,\n  lockScroll: true,\n  trapFocus: true,\n  returnFocus: true,\n  closeOnEscape: true,\n  keepMounted: false,\n  zIndex: getDefaultZIndex(\"modal\"),\n  transitionProps: {\n    duration: 200,\n    transition: \"fade-down\"\n  },\n  withOverlay: true,\n  withCloseButton: true\n};\nconst Modal = factory((_props, ref) => {\n  const _useProps = useProps(\"Modal\", defaultProps, _props),\n    {\n      title,\n      withOverlay,\n      overlayProps,\n      withCloseButton,\n      closeButtonProps,\n      children,\n      radius,\n      opened,\n      stackId,\n      zIndex\n    } = _useProps,\n    others = _objectWithoutProperties(_useProps, _excluded);\n  const ctx = useModalStackContext();\n  const hasHeader = !!title || withCloseButton;\n  const stackProps = ctx && stackId ? {\n    closeOnEscape: ctx.currentId === stackId,\n    trapFocus: ctx.currentId === stackId,\n    zIndex: ctx.getZIndex(stackId)\n  } : {};\n  const overlayVisible = withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;\n  useEffect(() => {\n    if (ctx && stackId) {\n      opened ? ctx.addModal(stackId, zIndex || getDefaultZIndex(\"modal\")) : ctx.removeModal(stackId);\n    }\n  }, [opened, stackId, zIndex]);\n  return /* @__PURE__ */jsxs(ModalRoot, _objectSpread(_objectSpread(_objectSpread({\n    ref,\n    radius,\n    opened,\n    zIndex: ctx && stackId ? ctx.getZIndex(stackId) : zIndex\n  }, others), stackProps), {}, {\n    children: [withOverlay && /* @__PURE__ */jsx(ModalOverlay, _objectSpread({\n      visible: overlayVisible,\n      transitionProps: ctx && stackId ? {\n        duration: 0\n      } : void 0\n    }, overlayProps)), /* @__PURE__ */jsxs(ModalContent, {\n      radius,\n      __hidden: ctx && stackId && opened ? stackId !== ctx.currentId : false,\n      children: [hasHeader && /* @__PURE__ */jsxs(ModalHeader, {\n        children: [title && /* @__PURE__ */jsx(ModalTitle, {\n          children: title\n        }), withCloseButton && /* @__PURE__ */jsx(ModalCloseButton, _objectSpread({}, closeButtonProps))]\n      }), /* @__PURE__ */jsx(ModalBody, {\n        children\n      })]\n    })]\n  }));\n});\nModal.classes = classes;\nModal.displayName = \"@mantine/core/Modal\";\nModal.Root = ModalRoot;\nModal.Overlay = ModalOverlay;\nModal.Content = ModalContent;\nModal.Body = ModalBody;\nModal.Header = ModalHeader;\nModal.Title = ModalTitle;\nModal.CloseButton = ModalCloseButton;\nModal.Stack = ModalStack;\nexport { Modal };","map":{"version":3,"names":["defaultProps","closeOnClickOutside","withinPortal","lockScroll","trapFocus","returnFocus","closeOnEscape","keepMounted","zIndex","getDefaultZIndex","transitionProps","duration","transition","withOverlay","withCloseButton","Modal","factory","_props","ref","_useProps","useProps","title","overlayProps","closeButtonProps","children","radius","opened","stackId","others","_objectWithoutProperties","_excluded","ctx","useModalStackContext","hasHeader","stackProps","currentId","getZIndex","overlayVisible","useEffect","addModal","removeModal","jsxs","ModalRoot","_objectSpread","jsx","ModalOverlay","visible","ModalContent","__hidden","ModalHeader","ModalTitle","ModalCloseButton","ModalBody","classes","displayName","Root","Overlay","Content","Body","Header","Title","CloseButton","Stack","ModalStack"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Modal/Modal.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { factory, Factory, getDefaultZIndex, useProps } from '../../core';\nimport { ModalBaseCloseButtonProps, ModalBaseOverlayProps } from '../ModalBase';\nimport { ModalBody } from './ModalBody';\nimport { ModalCloseButton } from './ModalCloseButton';\nimport { ModalContent } from './ModalContent';\nimport { ModalHeader } from './ModalHeader';\nimport { ModalOverlay } from './ModalOverlay';\nimport {\n  ModalRoot,\n  ModalRootCssVariables,\n  ModalRootProps,\n  ModalRootStylesNames,\n} from './ModalRoot';\nimport { ModalStack, useModalStackContext } from './ModalStack';\nimport { ModalTitle } from './ModalTitle';\nimport classes from './Modal.module.css';\n\nexport type ModalStylesNames = ModalRootStylesNames;\nexport type ModalCssVariables = ModalRootCssVariables;\n\nexport interface ModalProps extends ModalRootProps {\n  __staticSelector?: string;\n\n  /** Modal title */\n  title?: React.ReactNode;\n\n  /** If set, the overlay is rendered @default `true` */\n  withOverlay?: boolean;\n\n  /** Props passed down to the `Overlay` component, use to configure opacity, `background-color`, styles and other properties */\n  overlayProps?: ModalBaseOverlayProps;\n\n  /** Modal content */\n  children?: React.ReactNode;\n\n  /** If set, the close button is rendered @default `true` */\n  withCloseButton?: boolean;\n\n  /** Props passed down to the close button */\n  closeButtonProps?: ModalBaseCloseButtonProps;\n\n  /** Id of the modal in the `Modal.Stack` */\n  stackId?: string;\n}\n\nexport type ModalFactory = Factory<{\n  props: ModalProps;\n  ref: HTMLDivElement;\n  stylesNames: ModalStylesNames;\n  vars: ModalCssVariables;\n  staticComponents: {\n    Root: typeof ModalRoot;\n    Overlay: typeof ModalOverlay;\n    Content: typeof ModalContent;\n    Body: typeof ModalBody;\n    Header: typeof ModalHeader;\n    Title: typeof ModalTitle;\n    CloseButton: typeof ModalCloseButton;\n    Stack: typeof ModalStack;\n  };\n}>;\n\nconst defaultProps = {\n  closeOnClickOutside: true,\n  withinPortal: true,\n  lockScroll: true,\n  trapFocus: true,\n  returnFocus: true,\n  closeOnEscape: true,\n  keepMounted: false,\n  zIndex: getDefaultZIndex('modal'),\n  transitionProps: { duration: 200, transition: 'fade-down' },\n  withOverlay: true,\n  withCloseButton: true,\n} satisfies Partial<ModalProps>;\n\nexport const Modal = factory<ModalFactory>((_props, ref) => {\n  const {\n    title,\n    withOverlay,\n    overlayProps,\n    withCloseButton,\n    closeButtonProps,\n    children,\n    radius,\n    opened,\n    stackId,\n    zIndex,\n    ...others\n  } = useProps('Modal', defaultProps, _props);\n  const ctx = useModalStackContext();\n  const hasHeader = !!title || withCloseButton;\n  const stackProps =\n    ctx && stackId\n      ? {\n          closeOnEscape: ctx.currentId === stackId,\n          trapFocus: ctx.currentId === stackId,\n          zIndex: ctx.getZIndex(stackId),\n        }\n      : {};\n\n  const overlayVisible =\n    withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;\n\n  useEffect(() => {\n    if (ctx && stackId) {\n      opened\n        ? ctx.addModal(stackId, zIndex || getDefaultZIndex('modal'))\n        : ctx.removeModal(stackId);\n    }\n  }, [opened, stackId, zIndex]);\n\n  return (\n    <ModalRoot\n      ref={ref}\n      radius={radius}\n      opened={opened}\n      zIndex={ctx && stackId ? ctx.getZIndex(stackId) : zIndex}\n      {...others}\n      {...stackProps}\n    >\n      {withOverlay && (\n        <ModalOverlay\n          visible={overlayVisible}\n          transitionProps={ctx && stackId ? { duration: 0 } : undefined}\n          {...overlayProps}\n        />\n      )}\n      <ModalContent\n        radius={radius}\n        __hidden={ctx && stackId && opened ? stackId !== ctx.currentId : false}\n      >\n        {hasHeader && (\n          <ModalHeader>\n            {title && <ModalTitle>{title}</ModalTitle>}\n            {withCloseButton && <ModalCloseButton {...closeButtonProps} />}\n          </ModalHeader>\n        )}\n\n        <ModalBody>{children}</ModalBody>\n      </ModalContent>\n    </ModalRoot>\n  );\n});\n\nModal.classes = classes;\nModal.displayName = '@mantine/core/Modal';\nModal.Root = ModalRoot;\nModal.Overlay = ModalOverlay;\nModal.Content = ModalContent;\nModal.Body = ModalBody;\nModal.Header = ModalHeader;\nModal.Title = ModalTitle;\nModal.CloseButton = ModalCloseButton;\nModal.Stack = ModalStack;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}