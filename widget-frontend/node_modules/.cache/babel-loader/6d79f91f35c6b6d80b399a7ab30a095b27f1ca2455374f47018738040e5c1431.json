{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"scrollbarSize\", \"vars\", \"type\", \"scrollHideDelay\", \"viewportProps\", \"viewportRef\", \"onScrollPositionChange\", \"children\", \"offsetScrollbars\", \"scrollbars\", \"onBottomReached\", \"onTopReached\", \"overscrollBehavior\", \"attributes\"],\n  _excluded2 = [\"children\", \"classNames\", \"styles\", \"scrollbarSize\", \"scrollHideDelay\", \"type\", \"dir\", \"offsetScrollbars\", \"viewportRef\", \"onScrollPositionChange\", \"unstyled\", \"variant\", \"viewportProps\", \"scrollbars\", \"style\", \"vars\", \"onBottomReached\", \"onTopReached\", \"onOverflowChange\"];\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useState, useRef, useEffect } from 'react';\nimport { useMergeRefs } from '@floating-ui/react';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ScrollAreaCorner } from './ScrollAreaCorner/ScrollAreaCorner.mjs';\nimport { ScrollAreaRoot } from './ScrollAreaRoot/ScrollAreaRoot.mjs';\nimport { ScrollAreaScrollbar } from './ScrollAreaScrollbar/ScrollAreaScrollbar.mjs';\nimport { ScrollAreaThumb } from './ScrollAreaThumb/ScrollAreaThumb.mjs';\nimport { ScrollAreaViewport } from './ScrollAreaViewport/ScrollAreaViewport.mjs';\nimport classes from './ScrollArea.module.css.mjs';\nconst defaultProps = {\n  scrollHideDelay: 1e3,\n  type: \"hover\",\n  scrollbars: \"xy\"\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    scrollbarSize,\n    overscrollBehavior\n  } = _ref;\n  return {\n    root: {\n      \"--scrollarea-scrollbar-size\": rem(scrollbarSize),\n      \"--scrollarea-over-scroll-behavior\": overscrollBehavior\n    }\n  };\n});\nconst ScrollArea = factory((_props, ref) => {\n  const props = useProps(\"ScrollArea\", defaultProps, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      scrollbarSize,\n      vars,\n      type,\n      scrollHideDelay,\n      viewportProps,\n      viewportRef,\n      onScrollPositionChange,\n      children,\n      offsetScrollbars,\n      scrollbars,\n      onBottomReached,\n      onTopReached,\n      overscrollBehavior,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const [scrollbarHovered, setScrollbarHovered] = useState(false);\n  const [verticalThumbVisible, setVerticalThumbVisible] = useState(false);\n  const [horizontalThumbVisible, setHorizontalThumbVisible] = useState(false);\n  const getStyles = useStyles({\n    name: \"ScrollArea\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  const localViewportRef = useRef(null);\n  const combinedViewportRef = useMergeRefs([viewportRef, localViewportRef]);\n  useEffect(() => {\n    if (!localViewportRef.current) {\n      return;\n    }\n    if (offsetScrollbars !== \"present\") {\n      return;\n    }\n    const element = localViewportRef.current;\n    const observer = new ResizeObserver(() => {\n      const {\n        scrollHeight,\n        clientHeight,\n        scrollWidth,\n        clientWidth\n      } = element;\n      setVerticalThumbVisible(scrollHeight > clientHeight);\n      setHorizontalThumbVisible(scrollWidth > clientWidth);\n    });\n    observer.observe(element);\n    return () => observer.disconnect();\n  }, [localViewportRef, offsetScrollbars]);\n  return /* @__PURE__ */jsxs(ScrollAreaRoot, _objectSpread(_objectSpread(_objectSpread({\n    getStyles,\n    type: type === \"never\" ? \"always\" : type,\n    scrollHideDelay,\n    ref,\n    scrollbars\n  }, getStyles(\"root\")), others), {}, {\n    children: [/* @__PURE__ */jsx(ScrollAreaViewport, _objectSpread(_objectSpread(_objectSpread({}, viewportProps), getStyles(\"viewport\", {\n      style: viewportProps === null || viewportProps === void 0 ? void 0 : viewportProps.style\n    })), {}, {\n      ref: combinedViewportRef,\n      \"data-offset-scrollbars\": offsetScrollbars === true ? \"xy\" : offsetScrollbars || void 0,\n      \"data-scrollbars\": scrollbars || void 0,\n      \"data-horizontal-hidden\": offsetScrollbars === \"present\" && !horizontalThumbVisible ? \"true\" : void 0,\n      \"data-vertical-hidden\": offsetScrollbars === \"present\" && !verticalThumbVisible ? \"true\" : void 0,\n      onScroll: e => {\n        var _viewportProps$onScro;\n        viewportProps === null || viewportProps === void 0 || (_viewportProps$onScro = viewportProps.onScroll) === null || _viewportProps$onScro === void 0 || _viewportProps$onScro.call(viewportProps, e);\n        onScrollPositionChange === null || onScrollPositionChange === void 0 || onScrollPositionChange({\n          x: e.currentTarget.scrollLeft,\n          y: e.currentTarget.scrollTop\n        });\n        const {\n          scrollTop,\n          scrollHeight,\n          clientHeight\n        } = e.currentTarget;\n        if (scrollTop - (scrollHeight - clientHeight) >= -0.6) {\n          onBottomReached === null || onBottomReached === void 0 || onBottomReached();\n        }\n        if (scrollTop === 0) {\n          onTopReached === null || onTopReached === void 0 || onTopReached();\n        }\n      },\n      children\n    })), (scrollbars === \"xy\" || scrollbars === \"x\") && /* @__PURE__ */jsx(ScrollAreaScrollbar, _objectSpread(_objectSpread({}, getStyles(\"scrollbar\")), {}, {\n      orientation: \"horizontal\",\n      \"data-hidden\": type === \"never\" || offsetScrollbars === \"present\" && !horizontalThumbVisible ? true : void 0,\n      forceMount: true,\n      onMouseEnter: () => setScrollbarHovered(true),\n      onMouseLeave: () => setScrollbarHovered(false),\n      children: /* @__PURE__ */jsx(ScrollAreaThumb, _objectSpread({}, getStyles(\"thumb\")))\n    })), (scrollbars === \"xy\" || scrollbars === \"y\") && /* @__PURE__ */jsx(ScrollAreaScrollbar, _objectSpread(_objectSpread({}, getStyles(\"scrollbar\")), {}, {\n      orientation: \"vertical\",\n      \"data-hidden\": type === \"never\" || offsetScrollbars === \"present\" && !verticalThumbVisible ? true : void 0,\n      forceMount: true,\n      onMouseEnter: () => setScrollbarHovered(true),\n      onMouseLeave: () => setScrollbarHovered(false),\n      children: /* @__PURE__ */jsx(ScrollAreaThumb, _objectSpread({}, getStyles(\"thumb\")))\n    })), /* @__PURE__ */jsx(ScrollAreaCorner, _objectSpread(_objectSpread({}, getStyles(\"corner\")), {}, {\n      \"data-hovered\": scrollbarHovered || void 0,\n      \"data-hidden\": type === \"never\" || void 0\n    }))]\n  }));\n});\nScrollArea.displayName = \"@mantine/core/ScrollArea\";\nconst ScrollAreaAutosize = factory((props, ref) => {\n  const _useProps = useProps(\"ScrollAreaAutosize\", defaultProps, props),\n    {\n      children,\n      classNames,\n      styles,\n      scrollbarSize,\n      scrollHideDelay,\n      type,\n      dir,\n      offsetScrollbars,\n      viewportRef,\n      onScrollPositionChange,\n      unstyled,\n      variant,\n      viewportProps,\n      scrollbars,\n      style,\n      vars,\n      onBottomReached,\n      onTopReached,\n      onOverflowChange\n    } = _useProps,\n    others = _objectWithoutProperties(_useProps, _excluded2);\n  const viewportObserverRef = useRef(null);\n  const combinedViewportRef = useMergeRefs([viewportRef, viewportObserverRef]);\n  const [overflowing, setOverflowing] = useState(false);\n  const didMount = useRef(false);\n  useEffect(() => {\n    if (!onOverflowChange) {\n      return;\n    }\n    const el = viewportObserverRef.current;\n    if (!el) {\n      return;\n    }\n    const update = () => {\n      const isOverflowing = el.scrollHeight > el.clientHeight;\n      if (isOverflowing !== overflowing) {\n        if (didMount.current) {\n          onOverflowChange === null || onOverflowChange === void 0 || onOverflowChange(isOverflowing);\n        } else {\n          didMount.current = true;\n          if (isOverflowing) {\n            onOverflowChange === null || onOverflowChange === void 0 || onOverflowChange(true);\n          }\n        }\n        setOverflowing(isOverflowing);\n      }\n    };\n    update();\n    const ro = new ResizeObserver(update);\n    ro.observe(el);\n    return () => ro.disconnect();\n  }, [onOverflowChange, overflowing]);\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread({}, others), {}, {\n    ref,\n    style: [{\n      display: \"flex\",\n      overflow: \"hidden\"\n    }, style],\n    children: /* @__PURE__ */jsx(Box, {\n      style: _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        overflow: \"hidden\"\n      }, scrollbars === \"y\" && {\n        minWidth: 0\n      }), scrollbars === \"x\" && {\n        minHeight: 0\n      }), scrollbars === \"xy\" && {\n        minWidth: 0,\n        minHeight: 0\n      }), scrollbars === false && {\n        minWidth: 0,\n        minHeight: 0\n      }),\n      children: /* @__PURE__ */jsx(ScrollArea, {\n        classNames,\n        styles,\n        scrollHideDelay,\n        scrollbarSize,\n        type,\n        dir,\n        offsetScrollbars,\n        viewportRef: combinedViewportRef,\n        onScrollPositionChange,\n        unstyled,\n        variant,\n        viewportProps,\n        vars,\n        scrollbars,\n        onBottomReached,\n        onTopReached,\n        \"data-autosize\": \"true\",\n        children\n      })\n    })\n  }));\n});\nScrollArea.classes = classes;\nScrollAreaAutosize.displayName = \"@mantine/core/ScrollAreaAutosize\";\nScrollAreaAutosize.classes = classes;\nScrollArea.Autosize = ScrollAreaAutosize;\nexport { ScrollArea, ScrollAreaAutosize };","map":{"version":3,"names":["defaultProps","scrollHideDelay","type","scrollbars","varsResolver","createVarsResolver","_","_ref","scrollbarSize","overscrollBehavior","root","rem","ScrollArea","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","viewportProps","viewportRef","onScrollPositionChange","children","offsetScrollbars","onBottomReached","onTopReached","attributes","others","_objectWithoutProperties","_excluded","scrollbarHovered","setScrollbarHovered","useState","verticalThumbVisible","setVerticalThumbVisible","horizontalThumbVisible","setHorizontalThumbVisible","getStyles","useStyles","name","classes","localViewportRef","useRef","combinedViewportRef","useMergeRefs","useEffect","current","element","observer","ResizeObserver","scrollHeight","clientHeight","scrollWidth","clientWidth","observe","disconnect","jsxs","ScrollAreaRoot","_objectSpread","jsx","ScrollAreaViewport","onScroll","e","_viewportProps$onScro","call","x","currentTarget","scrollLeft","y","scrollTop","ScrollAreaScrollbar","orientation","forceMount","onMouseEnter","onMouseLeave","ScrollAreaThumb","ScrollAreaCorner","displayName","ScrollAreaAutosize","_useProps","dir","variant","onOverflowChange","_excluded2","viewportObserverRef","overflowing","setOverflowing","didMount","el","update","isOverflowing","ro","Box","display","overflow","flexDirection","flex","minWidth","minHeight","Autosize"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/ScrollArea/ScrollArea.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { useMergeRefs } from '@floating-ui/react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { ScrollAreaCorner } from './ScrollAreaCorner/ScrollAreaCorner';\nimport { ScrollAreaRoot } from './ScrollAreaRoot/ScrollAreaRoot';\nimport { ScrollAreaScrollbar } from './ScrollAreaScrollbar/ScrollAreaScrollbar';\nimport { ScrollAreaThumb } from './ScrollAreaThumb/ScrollAreaThumb';\nimport { ScrollAreaViewport } from './ScrollAreaViewport/ScrollAreaViewport';\nimport classes from './ScrollArea.module.css';\n\nexport type ScrollAreaStylesNames =\n  | 'root'\n  | 'viewport'\n  | 'scrollbar'\n  | 'thumb'\n  | 'corner'\n  | 'content';\n\nexport type ScrollAreaCssVariables = {\n  root: '--scrollarea-scrollbar-size';\n};\n\nexport interface ScrollAreaProps\n  extends BoxProps,\n    StylesApiProps<ScrollAreaFactory>,\n    ElementProps<'div'> {\n  /** Scrollbar size, any valid CSS value for width/height, numbers are converted to rem, default value is 0.75rem */\n  scrollbarSize?: number | string;\n\n  /**\n   * Defines scrollbars behavior, `hover` by default\n   * - `hover` – scrollbars are visible when mouse is over the scroll area\n   * - `scroll` – scrollbars are visible when the scroll area is scrolled\n   * - `always` – scrollbars are always visible\n   * - `never` – scrollbars are always hidden\n   * - `auto` – similar to `overflow: auto` – scrollbars are always visible when the content is overflowing\n   * */\n  type?: 'auto' | 'always' | 'scroll' | 'hover' | 'never';\n\n  /** Scroll hide delay in ms, applicable only when type is set to `hover` or `scroll` @default `1000` */\n  scrollHideDelay?: number;\n\n  /** Axis at which scrollbars must be rendered @default `'xy'` */\n  scrollbars?: 'x' | 'y' | 'xy' | false;\n\n  /** Determines whether scrollbars should be offset with padding on given axis @default `false` */\n  offsetScrollbars?: boolean | 'x' | 'y' | 'present';\n\n  /** Assigns viewport element (scrollable container) ref */\n  viewportRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Props passed down to the viewport element */\n  viewportProps?: React.ComponentPropsWithRef<'div'>;\n\n  /** Called with current position (`x` and `y` coordinates) when viewport is scrolled */\n  onScrollPositionChange?: (position: { x: number; y: number }) => void;\n\n  /** Called when scrollarea is scrolled all the way to the bottom */\n  onBottomReached?: () => void;\n\n  /** Called when scrollarea is scrolled all the way to the top */\n  onTopReached?: () => void;\n\n  /** Defines `overscroll-behavior` of the viewport */\n  overscrollBehavior?: React.CSSProperties['overscrollBehavior'];\n}\n\nexport interface ScrollAreaAutosizeProps extends ScrollAreaProps {\n  /** Called when content overflows due to max-height, making the container scrollable */\n  onOverflowChange?: (overflowing: boolean) => void;\n}\n\nexport type ScrollAreaFactory = Factory<{\n  props: ScrollAreaProps;\n  ref: HTMLDivElement;\n  stylesNames: ScrollAreaStylesNames;\n  vars: ScrollAreaCssVariables;\n  staticComponents: {\n    Autosize: typeof ScrollAreaAutosize;\n  };\n}>;\n\nexport type ScrollAreaAutosizeFactory = Factory<{\n  props: ScrollAreaAutosizeProps;\n  ref: HTMLDivElement;\n  stylesNames: ScrollAreaStylesNames;\n  vars: ScrollAreaCssVariables;\n}>;\n\nconst defaultProps = {\n  scrollHideDelay: 1000,\n  type: 'hover',\n  scrollbars: 'xy',\n} satisfies Partial<ScrollAreaProps>;\n\nconst varsResolver = createVarsResolver<ScrollAreaFactory>(\n  (_, { scrollbarSize, overscrollBehavior }) => ({\n    root: {\n      '--scrollarea-scrollbar-size': rem(scrollbarSize),\n      '--scrollarea-over-scroll-behavior': overscrollBehavior,\n    },\n  })\n);\n\nexport const ScrollArea = factory<ScrollAreaFactory>((_props, ref) => {\n  const props = useProps('ScrollArea', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    scrollbarSize,\n    vars,\n    type,\n    scrollHideDelay,\n    viewportProps,\n    viewportRef,\n    onScrollPositionChange,\n    children,\n    offsetScrollbars,\n    scrollbars,\n    onBottomReached,\n    onTopReached,\n    overscrollBehavior,\n    attributes,\n    ...others\n  } = props;\n\n  const [scrollbarHovered, setScrollbarHovered] = useState(false);\n  const [verticalThumbVisible, setVerticalThumbVisible] = useState(false);\n  const [horizontalThumbVisible, setHorizontalThumbVisible] = useState(false);\n\n  const getStyles = useStyles<ScrollAreaFactory>({\n    name: 'ScrollArea',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const localViewportRef = useRef<HTMLDivElement>(null);\n  const combinedViewportRef = useMergeRefs([viewportRef, localViewportRef]);\n\n  useEffect(() => {\n    if (!localViewportRef.current) {\n      return;\n    }\n\n    if (offsetScrollbars !== 'present') {\n      return;\n    }\n\n    const element = localViewportRef.current;\n\n    const observer = new ResizeObserver(() => {\n      const { scrollHeight, clientHeight, scrollWidth, clientWidth } = element;\n      setVerticalThumbVisible(scrollHeight > clientHeight);\n      setHorizontalThumbVisible(scrollWidth > clientWidth);\n    });\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, [localViewportRef, offsetScrollbars]);\n\n  return (\n    <ScrollAreaRoot\n      getStyles={getStyles}\n      type={type === 'never' ? 'always' : type}\n      scrollHideDelay={scrollHideDelay}\n      ref={ref}\n      scrollbars={scrollbars}\n      {...getStyles('root')}\n      {...others}\n    >\n      <ScrollAreaViewport\n        {...viewportProps}\n        {...getStyles('viewport', { style: viewportProps?.style })}\n        ref={combinedViewportRef}\n        data-offset-scrollbars={offsetScrollbars === true ? 'xy' : offsetScrollbars || undefined}\n        data-scrollbars={scrollbars || undefined}\n        data-horizontal-hidden={\n          offsetScrollbars === 'present' && !horizontalThumbVisible ? 'true' : undefined\n        }\n        data-vertical-hidden={\n          offsetScrollbars === 'present' && !verticalThumbVisible ? 'true' : undefined\n        }\n        onScroll={(e) => {\n          viewportProps?.onScroll?.(e);\n          onScrollPositionChange?.({ x: e.currentTarget.scrollLeft, y: e.currentTarget.scrollTop });\n          const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n          // threshold of -0.6 is required for some browsers that use sub-pixel rendering\n          if (scrollTop - (scrollHeight - clientHeight) >= -0.6) {\n            onBottomReached?.();\n          }\n          if (scrollTop === 0) {\n            onTopReached?.();\n          }\n        }}\n      >\n        {children}\n      </ScrollAreaViewport>\n\n      {(scrollbars === 'xy' || scrollbars === 'x') && (\n        <ScrollAreaScrollbar\n          {...getStyles('scrollbar')}\n          orientation=\"horizontal\"\n          data-hidden={\n            type === 'never' || (offsetScrollbars === 'present' && !horizontalThumbVisible)\n              ? true\n              : undefined\n          }\n          forceMount\n          onMouseEnter={() => setScrollbarHovered(true)}\n          onMouseLeave={() => setScrollbarHovered(false)}\n        >\n          <ScrollAreaThumb {...getStyles('thumb')} />\n        </ScrollAreaScrollbar>\n      )}\n\n      {(scrollbars === 'xy' || scrollbars === 'y') && (\n        <ScrollAreaScrollbar\n          {...getStyles('scrollbar')}\n          orientation=\"vertical\"\n          data-hidden={\n            type === 'never' || (offsetScrollbars === 'present' && !verticalThumbVisible)\n              ? true\n              : undefined\n          }\n          forceMount\n          onMouseEnter={() => setScrollbarHovered(true)}\n          onMouseLeave={() => setScrollbarHovered(false)}\n        >\n          <ScrollAreaThumb {...getStyles('thumb')} />\n        </ScrollAreaScrollbar>\n      )}\n\n      <ScrollAreaCorner\n        {...getStyles('corner')}\n        data-hovered={scrollbarHovered || undefined}\n        data-hidden={type === 'never' || undefined}\n      />\n    </ScrollAreaRoot>\n  );\n});\n\nScrollArea.displayName = '@mantine/core/ScrollArea';\n\nexport const ScrollAreaAutosize = factory<ScrollAreaAutosizeFactory>((props, ref) => {\n  const {\n    children,\n    classNames,\n    styles,\n    scrollbarSize,\n    scrollHideDelay,\n    type,\n    dir,\n    offsetScrollbars,\n    viewportRef,\n    onScrollPositionChange,\n    unstyled,\n    variant,\n    viewportProps,\n    scrollbars,\n    style,\n    vars,\n    onBottomReached,\n    onTopReached,\n    onOverflowChange,\n    ...others\n  } = useProps('ScrollAreaAutosize', defaultProps, props as ScrollAreaAutosizeProps);\n\n  // Overflow detection (Autosize-only)\n  const viewportObserverRef = useRef<HTMLDivElement>(null);\n  const combinedViewportRef = useMergeRefs([viewportRef, viewportObserverRef]);\n\n  const [overflowing, setOverflowing] = useState(false);\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (!onOverflowChange) {\n      return;\n    }\n\n    const el = viewportObserverRef.current;\n\n    if (!el) {\n      return;\n    }\n\n    const update = () => {\n      const isOverflowing = el.scrollHeight > el.clientHeight;\n\n      if (isOverflowing !== overflowing) {\n        if (didMount.current) {\n          onOverflowChange?.(isOverflowing);\n        } else {\n          didMount.current = true;\n          if (isOverflowing) {\n            onOverflowChange?.(true);\n          }\n        }\n\n        setOverflowing(isOverflowing);\n      }\n    };\n\n    update();\n    const ro = new ResizeObserver(update);\n    ro.observe(el);\n    return () => ro.disconnect();\n  }, [onOverflowChange, overflowing]);\n\n  return (\n    <Box {...others} ref={ref} style={[{ display: 'flex', overflow: 'hidden' }, style]}>\n      <Box\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n          ...(scrollbars === 'y' && { minWidth: 0 }),\n          ...(scrollbars === 'x' && { minHeight: 0 }),\n          ...(scrollbars === 'xy' && { minWidth: 0, minHeight: 0 }),\n          ...(scrollbars === false && { minWidth: 0, minHeight: 0 }),\n        }}\n      >\n        <ScrollArea\n          classNames={classNames}\n          styles={styles}\n          scrollHideDelay={scrollHideDelay}\n          scrollbarSize={scrollbarSize}\n          type={type}\n          dir={dir}\n          offsetScrollbars={offsetScrollbars}\n          viewportRef={combinedViewportRef}\n          onScrollPositionChange={onScrollPositionChange}\n          unstyled={unstyled}\n          variant={variant}\n          viewportProps={viewportProps}\n          vars={vars}\n          scrollbars={scrollbars}\n          onBottomReached={onBottomReached}\n          onTopReached={onTopReached}\n          data-autosize=\"true\"\n        >\n          {children}\n        </ScrollArea>\n      </Box>\n    </Box>\n  );\n});\n\nScrollArea.classes = classes;\nScrollAreaAutosize.displayName = '@mantine/core/ScrollAreaAutosize';\nScrollAreaAutosize.classes = classes;\nScrollArea.Autosize = ScrollAreaAutosize;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}