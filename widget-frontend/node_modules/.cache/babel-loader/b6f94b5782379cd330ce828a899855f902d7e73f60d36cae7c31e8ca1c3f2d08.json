{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"vars\", \"width\", \"height\", \"circle\", \"visible\", \"radius\", \"animate\", \"mod\", \"attributes\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Skeleton.module.css.mjs';\nconst defaultProps = {\n  visible: true,\n  animate: true\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    width,\n    height,\n    radius,\n    circle\n  } = _ref;\n  return {\n    root: {\n      \"--skeleton-height\": rem(height),\n      \"--skeleton-width\": circle ? rem(height) : rem(width),\n      \"--skeleton-radius\": circle ? \"1000px\" : radius === void 0 ? void 0 : getRadius(radius)\n    }\n  };\n});\nconst Skeleton = factory((_props, ref) => {\n  const props = useProps(\"Skeleton\", defaultProps, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      vars,\n      width,\n      height,\n      circle,\n      visible,\n      radius,\n      animate,\n      mod,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const getStyles = useStyles({\n    name: \"Skeleton\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread({\n    ref\n  }, getStyles(\"root\")), {}, {\n    mod: [{\n      visible,\n      animate\n    }, mod]\n  }, others));\n});\nSkeleton.classes = classes;\nSkeleton.displayName = \"@mantine/core/Skeleton\";\nexport { Skeleton };","map":{"version":3,"names":["defaultProps","visible","animate","varsResolver","createVarsResolver","_","_ref","width","height","radius","circle","root","rem","getRadius","Skeleton","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","mod","attributes","others","_objectWithoutProperties","_excluded","getStyles","useStyles","name","classes","jsx","Box","_objectSpread","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Skeleton/Skeleton.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getRadius,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Skeleton.module.css';\n\nexport type SkeletonStylesNames = 'root';\nexport type SkeletonCssVariables = {\n  root: '--skeleton-width' | '--skeleton-height' | '--skeleton-radius';\n};\n\nexport interface SkeletonProps\n  extends BoxProps,\n    StylesApiProps<SkeletonFactory>,\n    ElementProps<'div'> {\n  /** Determines whether Skeleton overlay should be displayed @default `true` */\n  visible?: boolean;\n\n  /** Skeleton `height`, numbers are converted to rem @default `auto` */\n  height?: React.CSSProperties['height'];\n\n  /** Skeleton `width`, numbers are converted to rem, ignored when `circle` prop is set. @default `100%` */\n  width?: React.CSSProperties['width'];\n\n  /** If set, Skeleton `width` and `border-radius` are equal to its `height` @default `false` */\n  circle?: boolean;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius. Numbers are converted to rem. @default `theme.defaultRadius` */\n  radius?: React.CSSProperties['borderRadius'];\n\n  /** Enables animation @default `true` */\n  animate?: boolean;\n}\n\nexport type SkeletonFactory = Factory<{\n  props: SkeletonProps;\n  ref: HTMLDivElement;\n  stylesNames: SkeletonStylesNames;\n  vars: SkeletonCssVariables;\n}>;\n\nconst defaultProps = {\n  visible: true,\n  animate: true,\n} satisfies Partial<SkeletonProps>;\n\nconst varsResolver = createVarsResolver<SkeletonFactory>(\n  (_, { width, height, radius, circle }) => ({\n    root: {\n      '--skeleton-height': rem(height),\n      '--skeleton-width': circle ? rem(height) : rem(width),\n      '--skeleton-radius': circle ? '1000px' : radius === undefined ? undefined : getRadius(radius),\n    },\n  })\n);\n\nexport const Skeleton = factory<SkeletonFactory>((_props, ref) => {\n  const props = useProps('Skeleton', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    width,\n    height,\n    circle,\n    visible,\n    radius,\n    animate,\n    mod,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SkeletonFactory>({\n    name: 'Skeleton',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  return <Box ref={ref} {...getStyles('root')} mod={[{ visible, animate }, mod]} {...others} />;\n});\n\nSkeleton.classes = classes;\nSkeleton.displayName = '@mantine/core/Skeleton';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAkDA,MAAMA,YAAA,GAAe;EACnBC,OAAA,EAAS;EACTC,OAAA,EAAS;AACX;AAEA,MAAMC,YAAA,GAAeC,kBAAA,CACnB,CAACC,CAAA,EAAAC,IAAA;EAAA,IAAG;IAAEC,KAAA;IAAOC,MAAA;IAAQC,MAAA;IAAQC;EAAA,CAAO,GAAAJ,IAAA;EAAA,OAAO;IACzCK,IAAA,EAAM;MACJ,qBAAqBC,GAAA,CAAIJ,MAAM;MAC/B,oBAAoBE,MAAA,GAASE,GAAA,CAAIJ,MAAM,IAAII,GAAA,CAAIL,KAAK;MACpD,qBAAqBG,MAAA,GAAS,WAAWD,MAAA,KAAW,SAAY,SAAYI,SAAA,CAAUJ,MAAM;IAAA;EAC9F,CACF;AAAA,CACF;AAEO,MAAMK,QAAA,GAAWC,OAAA,CAAyB,CAACC,MAAA,EAAQC,GAAA,KAAQ;EAChE,MAAMC,KAAA,GAAQC,QAAA,CAAS,YAAYnB,YAAA,EAAcgB,MAAM;EACvD,MAAM;MACJI,UAAA;MACAC,SAAA;MACAC,KAAA;MACAC,MAAA;MACAC,QAAA;MACAC,IAAA;MACAlB,KAAA;MACAC,MAAA;MACAE,MAAA;MACAT,OAAA;MACAQ,MAAA;MACAP,OAAA;MACAwB,GAAA;MACAC;IACG,CACL,GAAIT,KAAA;IADCU,MAAA,GAAAC,wBAAA,CACDX,KAAA,EAAAY,SAAA;EAEJ,MAAMC,SAAA,GAAYC,SAAA,CAA2B;IAC3CC,IAAA,EAAM;IACNC,OAAA;IACAhB,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAG,UAAA;IACAF,IAAA;IACAtB;EAAA,CACD;EAED,sBAAAgC,GAAA,CAAQC,GAAA,EAAAC,aAAA,CAAAA,aAAA;IAAIpB;EAAA,GAAcc,SAAA,CAAU,MAAM;IAAGL,GAAA,EAAK,CAAC;MAAEzB,OAAA;MAASC;IAAA,CAAQ,EAAGwB,GAAG;EAAA,GAAOE,MAAA,CAAQ;AAC7F,CAAC;AAEDd,QAAA,CAASoB,OAAA,GAAUA,OAAA;AACnBpB,QAAA,CAASwB,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}