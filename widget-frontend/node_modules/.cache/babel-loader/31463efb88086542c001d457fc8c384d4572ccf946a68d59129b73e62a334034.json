{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\nfunction exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === \"function\") {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === \"function\") {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === \"function\") {\n    return _document.mozCancelFullScreen();\n  }\n  return null;\n}\nfunction enterFullScreen(element) {\n  const _element = element;\n  return _element.requestFullscreen?.() || _element.msRequestFullscreen?.() || _element.webkitEnterFullscreen?.() || _element.webkitRequestFullscreen?.() || _element.mozRequestFullscreen?.();\n}\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\nfunction addEvents(element, {\n  onFullScreen,\n  onError\n}) {\n  prefixes.forEach(prefix => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n  const _ref = useRef(null);\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    return void 0;\n  }, [_ref.current]);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\nexport { useFullscreen };","map":{"version":3,"names":["getFullscreenElement","_document","window","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","webkitExitFullscreen","mozCancelFullScreen","enterFullScreen","element","_element","requestFullscreen","msRequestFullscreen","webkitEnterFullscreen","webkitRequestFullscreen","mozRequestFullscreen","prefixes","addEvents","onFullScreen","onError","forEach","prefix","addEventListener","removeEventListener","useFullscreen","fullscreen","setFullscreen","useState","_ref","useRef","handleFullscreenChange","useCallback","event","target","handleFullscreenError","console","error","toggle","current","ref","documentElement","useEffect"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-fullscreen/use-fullscreen.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === 'function') {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === 'function') {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === 'function') {\n    return _document.mozCancelFullScreen();\n  }\n\n  return null;\n}\n\nfunction enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport interface UseFullscreenReturnValue<T extends HTMLElement = any> {\n  ref: React.RefCallback<T | null>;\n  toggle: () => Promise<void>;\n  fullscreen: boolean;\n}\n\nexport function useFullscreen<T extends HTMLElement = any>(): UseFullscreenReturnValue<T> {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>(null);\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current!);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, [_ref.current]);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}