{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"sizes\", \"hasThumb\", \"onThumbChange\", \"onThumbPointerUp\", \"onThumbPointerDown\", \"onThumbPositionChange\", \"onDragScroll\", \"onWheelScroll\", \"onResize\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState, useRef, useEffect } from 'react';\nimport { useMergedRef, useCallbackRef, useDebouncedCallback } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { useResizeObserver } from '../use-resize-observer.mjs';\nimport { composeEventHandlers } from '../utils/compose-event-handlers.mjs';\nimport { ScrollbarProvider } from './Scrollbar.context.mjs';\nconst Scrollbar = forwardRef((props, forwardedRef) => {\n  const {\n      sizes,\n      hasThumb,\n      onThumbChange,\n      onThumbPointerUp,\n      onThumbPointerDown,\n      onThumbPositionChange,\n      onDragScroll,\n      onWheelScroll,\n      onResize\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded);\n  const context = useScrollAreaContext();\n  const [scrollbar, setScrollbar] = useState(null);\n  const composeRefs = useMergedRef(forwardedRef, node => setScrollbar(node));\n  const rectRef = useRef(null);\n  const prevWebkitUserSelectRef = useRef(\"\");\n  const {\n    viewport\n  } = context;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebouncedCallback(onResize, 10);\n  const handleDragScroll = event => {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x,\n        y\n      });\n    }\n  };\n  useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar === null || scrollbar === void 0 ? void 0 : scrollbar.contains(element);\n      if (isScrollbarWheel) {\n        handleWheelScroll(event, maxScrollPos);\n      }\n    };\n    document.addEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */jsx(ScrollbarProvider, {\n    value: {\n      scrollbar,\n      hasThumb,\n      onThumbChange: useCallbackRef(onThumbChange),\n      onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n      onThumbPositionChange: handleThumbPositionChange,\n      onThumbPointerDown: useCallbackRef(onThumbPointerDown)\n    },\n    children: /* @__PURE__ */jsx(\"div\", _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n      ref: composeRefs,\n      \"data-mantine-scrollbar\": true,\n      style: _objectSpread({\n        position: \"absolute\"\n      }, scrollbarProps.style),\n      onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n        event.preventDefault();\n        const mainPointer = 0;\n        if (event.button === mainPointer) {\n          const element = event.target;\n          element.setPointerCapture(event.pointerId);\n          rectRef.current = scrollbar.getBoundingClientRect();\n          prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n          document.body.style.webkitUserSelect = \"none\";\n          handleDragScroll(event);\n        }\n      }),\n      onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),\n      onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n        const element = event.target;\n        if (element.hasPointerCapture(event.pointerId)) {\n          event.preventDefault();\n          element.releasePointerCapture(event.pointerId);\n        }\n      }),\n      onLostPointerCapture: () => {\n        document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n        rectRef.current = null;\n      }\n    }))\n  });\n});\nexport { Scrollbar };","map":{"version":3,"names":["Scrollbar","forwardRef","props","forwardedRef","sizes","hasThumb","onThumbChange","onThumbPointerUp","onThumbPointerDown","onThumbPositionChange","onDragScroll","onWheelScroll","onResize","scrollbarProps","_objectWithoutProperties","_excluded","context","useScrollAreaContext","scrollbar","setScrollbar","useState","composeRefs","useMergedRef","node","rectRef","useRef","prevWebkitUserSelectRef","viewport","maxScrollPos","content","handleWheelScroll","useCallbackRef","handleThumbPositionChange","handleResize","useDebouncedCallback","handleDragScroll","event","current","x","clientX","left","y","clientY","top","useEffect","handleWheel","element","target","isScrollbarWheel","contains","document","addEventListener","passive","removeEventListener","useResizeObserver","jsx","ScrollbarProvider","value","children","_objectSpread","ref","style","position","onPointerDown","composeEventHandlers","preventDefault","mainPointer","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture","onLostPointerCapture"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/Scrollbar.tsx"],"sourcesContent":["import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { useCallbackRef, useDebouncedCallback, useMergedRef } from '@mantine/hooks';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { Sizes } from '../ScrollArea.types';\nimport { useResizeObserver } from '../use-resize-observer';\nimport { composeEventHandlers } from '../utils';\nimport { ScrollbarContextValue, ScrollbarProvider } from './Scrollbar.context';\n\nexport interface ScrollbarPrivateProps {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContextValue['onThumbChange'];\n  onThumbPointerUp: ScrollbarContextValue['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContextValue['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContextValue['onThumbPositionChange'];\n  onWheelScroll: (event: WheelEvent, maxScrollPos: number) => void;\n  onDragScroll: (pointerPos: { x: number; y: number }) => void;\n  onResize: () => void;\n}\n\ninterface ScrollbarProps\n  extends ScrollbarPrivateProps,\n    Omit<React.ComponentPropsWithoutRef<'div'>, 'onResize'> {}\n\nexport const Scrollbar = forwardRef<HTMLDivElement, ScrollbarProps>((props, forwardedRef) => {\n  const {\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const [scrollbar, setScrollbar] = useState<HTMLDivElement | null>(null);\n  const composeRefs = useMergedRef(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = useRef<string>('');\n  const { viewport } = context;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebouncedCallback(onResize, 10);\n\n  const handleDragScroll = (event: React.PointerEvent<HTMLElement>) => {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  };\n\n  useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) {\n        handleWheelScroll(event, maxScrollPos);\n      }\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      value={{\n        scrollbar,\n        hasThumb,\n        onThumbChange: useCallbackRef(onThumbChange),\n        onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n        onThumbPositionChange: handleThumbPositionChange,\n        onThumbPointerDown: useCallbackRef(onThumbPointerDown),\n      }}\n    >\n      <div\n        {...scrollbarProps}\n        ref={composeRefs}\n        data-mantine-scrollbar\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          event.preventDefault();\n\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            /* eslint-disable @typescript-eslint/no-deprecated */\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            event.preventDefault();\n            element.releasePointerCapture(event.pointerId);\n          }\n        })}\n        onLostPointerCapture={() => {\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          /* eslint-enable @typescript-eslint/no-deprecated */\n          rectRef.current = null;\n        }}\n      />\n    </ScrollbarProvider>\n  );\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}