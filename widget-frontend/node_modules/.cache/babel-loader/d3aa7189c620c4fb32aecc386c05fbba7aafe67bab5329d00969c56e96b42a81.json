{"ast":null,"code":"'use client';\n\nfunction memoize(func) {\n  const cache = /* @__PURE__ */new Map();\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = func(...args);\n    cache.set(key, result);\n    return result;\n  };\n}\nexport { memoize };","map":{"version":3,"names":["memoize","func","cache","Map","_len","arguments","length","args","Array","_key","key","JSON","stringify","has","get","result","set"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/core/utils/memoize/memoize.ts"],"sourcesContent":["export function memoize<T extends (...args: any[]) => any>(\n  func: T\n): (...args: Parameters<T>) => ReturnType<T> {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return (...args: Parameters<T>): ReturnType<T> => {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key) as ReturnType<T>;\n    }\n\n    const result = func(...args);\n    cache.set(key, result);\n    return result;\n  };\n}\n"],"mappings":";;AAAO,SAASA,QACdC,IAAA,EAC2C;EAC3C,MAAMC,KAAA,sBAAYC,GAAA,EAA2B;EAE7C,OAAO,YAA2C;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAvCC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACT,MAAMC,GAAA,GAAMC,IAAA,CAAKC,SAAA,CAAUL,IAAI;IAC/B,IAAIL,KAAA,CAAMW,GAAA,CAAIH,GAAG,GAAG;MAClB,OAAOR,KAAA,CAAMY,GAAA,CAAIJ,GAAG;IACtB;IAEA,MAAMK,MAAA,GAASd,IAAA,CAAK,GAAGM,IAAI;IAC3BL,KAAA,CAAMc,GAAA,CAAIN,GAAA,EAAKK,MAAM;IACrB,OAAOA,MAAA;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}