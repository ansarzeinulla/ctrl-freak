{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"styles\", \"value\", \"onChange\", \"onChangeEnd\", \"size\", \"min\", \"max\", \"domain\", \"minRange\", \"maxRange\", \"step\", \"precision\", \"defaultValue\", \"name\", \"marks\", \"label\", \"labelTransitionProps\", \"labelAlwaysOn\", \"thumbFromLabel\", \"thumbToLabel\", \"showLabelOnHover\", \"thumbChildren\", \"disabled\", \"unstyled\", \"scale\", \"inverted\", \"className\", \"style\", \"vars\", \"hiddenInputProps\", \"restrictToMarks\", \"thumbProps\", \"pushOnOverlap\", \"attributes\"];\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useRef, useState, useEffect } from 'react';\nimport { useUncontrolled, useMove, useMergedRef, clamp } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport { getRadius, getSize } from '../../../core/utils/get-size/get-size.mjs';\nimport { findClosestNumber } from '../../../core/utils/find-closest-number/find-closest-number.mjs';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { SliderProvider } from '../Slider.context.mjs';\nimport { SliderRoot } from '../SliderRoot/SliderRoot.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport { Track } from '../Track/Track.mjs';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value.mjs';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position.mjs';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value.mjs';\nimport { getPosition } from '../utils/get-position/get-position.mjs';\nimport { getPrecision } from '../utils/get-precision/get-precision.mjs';\nimport { getNextMarkValue, getPreviousMarkValue, getLastMarkValue, getFirstMarkValue } from '../utils/get-step-mark-value/get-step-mark-value.mjs';\nimport classes from '../Slider.module.css.mjs';\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    color,\n    thumbSize,\n    radius\n  } = _ref;\n  return {\n    root: {\n      \"--slider-size\": getSize(size, \"slider-size\"),\n      \"--slider-color\": color ? getThemeColor(color, theme) : void 0,\n      \"--slider-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--slider-thumb-size\": thumbSize !== void 0 ? rem(thumbSize) : \"calc(var(--slider-size) * 2)\"\n    }\n  };\n});\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: f => f,\n  labelTransitionProps: {\n    transition: \"fade\",\n    duration: 0\n  },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  pushOnOverlap: true,\n  scale: v => v,\n  size: \"md\",\n  maxRange: Infinity\n};\nconst RangeSlider = factory((_props, ref) => {\n  const props = useProps(\"RangeSlider\", defaultProps, _props);\n  const {\n      classNames,\n      styles,\n      value,\n      onChange,\n      onChangeEnd,\n      size,\n      min,\n      max,\n      domain,\n      minRange,\n      maxRange,\n      step,\n      precision: _precision,\n      defaultValue,\n      name,\n      marks,\n      label,\n      labelTransitionProps,\n      labelAlwaysOn,\n      thumbFromLabel,\n      thumbToLabel,\n      showLabelOnHover,\n      thumbChildren,\n      disabled,\n      unstyled,\n      scale,\n      inverted,\n      className,\n      style,\n      vars,\n      hiddenInputProps,\n      restrictToMarks,\n      thumbProps,\n      pushOnOverlap,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const getStyles = useStyles({\n    name: \"Slider\",\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    attributes,\n    vars,\n    varsResolver,\n    unstyled\n  });\n  const containerRef = useRef(null);\n  const {\n    dir\n  } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef([]);\n  const root = useRef(null);\n  const thumbIndex = useRef(void 0);\n  const [domainMin, domainMax] = domain || [min, max];\n  const positions = [getPosition({\n    value: _value[0],\n    min: domainMin,\n    max: domainMax\n  }), getPosition({\n    value: _value[1],\n    min: domainMin,\n    max: domainMax\n  })];\n  const precision = _precision !== null && _precision !== void 0 ? _precision : getPrecision(step);\n  const _setValue = val => {\n    setValue(val);\n    valueRef.current = val;\n  };\n  useEffect(() => {\n    if (Array.isArray(value)) {\n      valueRef.current = value;\n    }\n  }, Array.isArray(value) ? [value[0], value[1]] : [null, null]);\n  const setRangedValue = (val, index, triggerChangeEnd) => {\n    if (index === -1) {\n      return;\n    }\n    const clone = [...valueRef.current];\n    if (restrictToMarks && marks) {\n      const closest = findClosestNumber(val, marks.map(m => m.value));\n      const current = clone[index];\n      clone[index] = closest;\n      const otherIndex = index === 0 ? 1 : 0;\n      const lastMarkValue = getLastMarkValue(marks);\n      const firstMarkValue = getFirstMarkValue(marks);\n      if (closest === lastMarkValue && clone[otherIndex] === lastMarkValue) {\n        clone[index] = current;\n      } else if (closest === firstMarkValue && clone[otherIndex] === firstMarkValue) {\n        clone[index] = current;\n      } else if (closest === clone[otherIndex]) {\n        if (current > clone[otherIndex]) {\n          clone[otherIndex] = getPreviousMarkValue(closest, marks);\n        } else {\n          clone[otherIndex] = getNextMarkValue(closest, marks);\n        }\n      }\n    } else {\n      const clampedVal = clamp(val, min, max);\n      clone[index] = clampedVal;\n      if (index === 0) {\n        if (clampedVal > clone[1] - (minRange - 1e-9)) {\n          if (pushOnOverlap) {\n            clone[1] = Math.min(val + minRange, max);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n        if (clampedVal > (max - (minRange - 1e-9) || min)) {\n          clone[index] = valueRef.current[index];\n        }\n        if (clone[1] - val > maxRange) {\n          if (pushOnOverlap) {\n            clone[1] = val + maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n      if (index === 1) {\n        if (clampedVal < clone[0] + minRange) {\n          if (pushOnOverlap) {\n            clone[0] = Math.max(val - minRange, min);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n        if (clampedVal < clone[0] + minRange) {\n          clone[index] = valueRef.current[index];\n        }\n        if (clampedVal - clone[0] > maxRange) {\n          if (pushOnOverlap) {\n            clone[0] = val - maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n    }\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n    if (clone[0] > clone[1]) {\n      const temp = clone[0];\n      clone[0] = clone[1];\n      clone[1] = temp;\n    }\n    _setValue(clone);\n    if (triggerChangeEnd) {\n      onChangeEnd === null || onChangeEnd === void 0 || onChangeEnd(valueRef.current);\n    }\n  };\n  const handleChange = val => {\n    if (!disabled && thumbIndex.current !== void 0) {\n      const nextValue = getChangeValue({\n        value: val,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n  const {\n    ref: useMoveRef,\n    active\n  } = useMove(_ref2 => {\n    let {\n      x\n    } = _ref2;\n    return handleChange(x);\n  }, {\n    onScrubEnd: () => !disabled && (onChangeEnd === null || onChangeEnd === void 0 ? void 0 : onChangeEnd(valueRef.current))\n  }, dir);\n  function handleThumbMouseDown(index) {\n    thumbIndex.current = index;\n  }\n  const handleTrackMouseDownCapture = event => {\n    if (containerRef.current) {\n      containerRef.current.focus();\n      const rect = containerRef.current.getBoundingClientRect();\n      const changePosition = getClientPosition(event.nativeEvent);\n      const changeValue = getChangeValue({\n        value: changePosition - rect.left,\n        max,\n        min,\n        step,\n        containerWidth: rect.width\n      });\n      const nearestHandle = Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n      const _nearestHandle = dir === \"ltr\" ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n      thumbIndex.current = _nearestHandle;\n    }\n  };\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n    return focused;\n  };\n  const handleTrackKeydownCapture = event => {\n    if (!disabled) {\n      switch (event.key) {\n        case \"ArrowUp\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? getNextMarkValue(valueRef.current[focusedIndex], marks) : Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? (dir === \"rtl\" ? getPreviousMarkValue : getNextMarkValue)(valueRef.current[focusedIndex], marks) : Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] - step : valueRef.current[focusedIndex] + step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowDown\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? getPreviousMarkValue(valueRef.current[focusedIndex], marks) : Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n        case \"ArrowLeft\":\n          {\n            event.preventDefault();\n            const focusedIndex = getFocusedThumbIndex();\n            thumbs.current[focusedIndex].focus();\n            const nextValue = restrictToMarks && marks ? (dir === \"rtl\" ? getNextMarkValue : getPreviousMarkValue)(valueRef.current[focusedIndex], marks) : Math.min(Math.max(dir === \"rtl\" ? valueRef.current[focusedIndex] + step : valueRef.current[focusedIndex] - step, min), max);\n            setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n            break;\n          }\n      }\n    }\n  };\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1)\n  };\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n  return /* @__PURE__ */jsx(SliderProvider, {\n    value: {\n      getStyles\n    },\n    children: /* @__PURE__ */jsxs(SliderRoot, _objectSpread(_objectSpread({}, others), {}, {\n      size,\n      ref: useMergedRef(ref, root),\n      disabled,\n      onMouseDownCapture: () => {\n        var _root$current;\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n      },\n      onKeyDownCapture: () => {\n        var _thumbs$current$, _thumbs$current$2;\n        if ((_thumbs$current$ = thumbs.current[0]) !== null && _thumbs$current$ !== void 0 && (_thumbs$current$ = _thumbs$current$.parentElement) !== null && _thumbs$current$ !== void 0 && _thumbs$current$.contains(document.activeElement)) {\n          return;\n        }\n        (_thumbs$current$2 = thumbs.current[0]) === null || _thumbs$current$2 === void 0 || _thumbs$current$2.focus();\n      },\n      children: [/* @__PURE__ */jsxs(Track, {\n        offset: positions[0],\n        marksOffset: _value[0],\n        filled: positions[1] - positions[0],\n        marks,\n        inverted,\n        min: domainMin,\n        max: domainMax,\n        value: _value[1],\n        disabled,\n        containerProps: {\n          ref: useMergedRef(containerRef, useMoveRef),\n          onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,\n          onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0,\n          onTouchStartCapture: handleTrackMouseDownCapture,\n          onTouchEndCapture: () => {\n            thumbIndex.current = -1;\n          },\n          onMouseDownCapture: handleTrackMouseDownCapture,\n          onMouseUpCapture: () => {\n            thumbIndex.current = -1;\n          },\n          onKeyDownCapture: handleTrackKeydownCapture\n        },\n        children: [/* @__PURE__ */jsx(Thumb, _objectSpread(_objectSpread(_objectSpread({}, sharedThumbProps), {}, {\n          value: scale(_value[0]),\n          position: positions[0],\n          dragging: active,\n          label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[0]), precision)) : label,\n          ref: node => {\n            if (node) {\n              thumbs.current[0] = node;\n            }\n          },\n          thumbLabel: thumbFromLabel,\n          onMouseDown: () => handleThumbMouseDown(0),\n          onFocus: () => setFocused(0),\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled\n        }, thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps(0)), {}, {\n          children: hasArrayThumbChildren ? thumbChildren[0] : thumbChildren\n        })), /* @__PURE__ */jsx(Thumb, _objectSpread(_objectSpread(_objectSpread({}, sharedThumbProps), {}, {\n          thumbLabel: thumbToLabel,\n          value: scale(_value[1]),\n          position: positions[1],\n          dragging: active,\n          label: typeof label === \"function\" ? label(getFloatingValue(scale(_value[1]), precision)) : label,\n          ref: node => {\n            if (node) {\n              thumbs.current[1] = node;\n            }\n          },\n          onMouseDown: () => handleThumbMouseDown(1),\n          onFocus: () => setFocused(1),\n          showLabelOnHover,\n          isHovered: hovered,\n          disabled\n        }, thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps(1)), {}, {\n          children: hasArrayThumbChildren ? thumbChildren[1] : thumbChildren\n        }))]\n      }), /* @__PURE__ */jsx(\"input\", _objectSpread({\n        type: \"hidden\",\n        name: \"\".concat(name, \"_from\"),\n        value: _value[0]\n      }, hiddenInputProps)), /* @__PURE__ */jsx(\"input\", _objectSpread({\n        type: \"hidden\",\n        name: \"\".concat(name, \"_to\"),\n        value: _value[1]\n      }, hiddenInputProps))]\n    }))\n  });\n});\nRangeSlider.classes = classes;\nRangeSlider.displayName = \"@mantine/core/RangeSlider\";\nexport { RangeSlider };","map":{"version":3,"names":["varsResolver","createVarsResolver","theme","_ref","size","color","thumbSize","radius","root","getSize","getThemeColor","getRadius","rem","defaultProps","min","max","minRange","step","marks","label","f","labelTransitionProps","transition","duration","labelAlwaysOn","showLabelOnHover","disabled","pushOnOverlap","scale","v","maxRange","Infinity","RangeSlider","factory","_props","ref","props","useProps","classNames","styles","value","onChange","onChangeEnd","domain","precision","_precision","defaultValue","name","thumbFromLabel","thumbToLabel","thumbChildren","unstyled","inverted","className","style","vars","hiddenInputProps","restrictToMarks","thumbProps","attributes","others","_objectWithoutProperties","_excluded","getStyles","useStyles","classes","containerRef","useRef","dir","useDirection","focused","setFocused","useState","hovered","setHovered","_value","setValue","useUncontrolled","finalValue","valueRef","thumbs","thumbIndex","domainMin","domainMax","positions","getPosition","getPrecision","_setValue","val","current","useEffect","Array","isArray","setRangedValue","index","triggerChangeEnd","clone","closest","findClosestNumber","map","m","otherIndex","lastMarkValue","getLastMarkValue","firstMarkValue","getFirstMarkValue","getPreviousMarkValue","getNextMarkValue","clampedVal","clamp","Math","getFloatingValue","temp","handleChange","nextValue","getChangeValue","useMoveRef","active","useMove","_ref2","x","onScrubEnd","handleThumbMouseDown","handleTrackMouseDownCapture","event","focus","rect","getBoundingClientRect","changePosition","getClientPosition","nativeEvent","changeValue","left","containerWidth","width","nearestHandle","abs","_nearestHandle","getFocusedThumbIndex","handleTrackKeydownCapture","key","preventDefault","focusedIndex","sharedThumbProps","onBlur","hasArrayThumbChildren","jsx","SliderProvider","children","jsxs","SliderRoot","_objectSpread","useMergedRef","onMouseDownCapture","_root$current","onKeyDownCapture","_thumbs$current$","_thumbs$current$2","parentElement","contains","document","activeElement","Track","offset","marksOffset","filled","containerProps","onMouseEnter","onMouseLeave","onTouchStartCapture","onTouchEndCapture","onMouseUpCapture","Thumb","position","dragging","node","thumbLabel","onMouseDown","onFocus","isHovered","type","concat","displayName"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/Slider/RangeSlider/RangeSlider.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { clamp, useMergedRef, useMove, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  findClosestNumber,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useDirection,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { TransitionOverride } from '../../Transition';\nimport { SliderCssVariables, SliderProvider, SliderStylesNames } from '../Slider.context';\nimport { SliderRoot } from '../SliderRoot/SliderRoot';\nimport { Thumb } from '../Thumb/Thumb';\nimport { Track } from '../Track/Track';\nimport { getChangeValue } from '../utils/get-change-value/get-change-value';\nimport { getClientPosition } from '../utils/get-client-position/get-client-position';\nimport { getFloatingValue } from '../utils/get-floating-value/get-gloating-value';\nimport { getPosition } from '../utils/get-position/get-position';\nimport { getPrecision } from '../utils/get-precision/get-precision';\nimport {\n  getFirstMarkValue,\n  getLastMarkValue,\n  getNextMarkValue,\n  getPreviousMarkValue,\n} from '../utils/get-step-mark-value/get-step-mark-value';\nimport classes from '../Slider.module.css';\n\nexport type RangeSliderValue = [number, number];\n\nexport interface RangeSliderProps\n  extends BoxProps,\n    StylesApiProps<RangeSliderFactory>,\n    ElementProps<'div', 'onChange' | 'value' | 'defaultValue'> {\n  /** Key of `theme.colors` or any valid CSS color, controls color of track and thumb @default `theme.primaryColor` */\n  color?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, numbers are converted to rem @default `'xl'` */\n  radius?: MantineRadius;\n\n  /** Controls size of the track @default `'md'` */\n  size?: MantineSize | (string & {}) | number;\n\n  /** Minimal possible value @default `0` */\n  min?: number;\n\n  /** Maximum possible value @default `100` */\n  max?: number;\n\n  /** Domain of the slider, defines the full range of possible values @default `[min, max]` */\n  domain?: [number, number];\n\n  /** Number by which value will be incremented/decremented with thumb drag and arrows @default `1` */\n  step?: number;\n\n  /** Number of significant digits after the decimal point */\n  precision?: number;\n\n  /** Controlled component value */\n  value?: RangeSliderValue;\n\n  /** Uncontrolled component default value */\n  defaultValue?: RangeSliderValue;\n\n  /** Called when value changes */\n  onChange?: (value: RangeSliderValue) => void;\n\n  /** Called when user stops dragging slider or changes value with arrows */\n  onChangeEnd?: (value: RangeSliderValue) => void;\n\n  /** Hidden input name, use with uncontrolled component */\n  name?: string;\n\n  /** Marks displayed on the track */\n  marks?: { value: number; label?: React.ReactNode }[];\n\n  /** Function to generate label or any react node to render instead, set to null to disable label */\n  label?: React.ReactNode | ((value: number) => React.ReactNode);\n\n  /** Props passed down to the `Transition` component @default `{ transition: 'fade', duration: 0 }` */\n  labelTransitionProps?: TransitionOverride;\n\n  /** Determines whether the label should be visible when the slider is not being dragged or hovered @default `false` */\n  labelAlwaysOn?: boolean;\n\n  /** Determines whether the label should be displayed when the slider is hovered @default `true` */\n  showLabelOnHover?: boolean;\n\n  /** Content rendered inside thumb */\n  thumbChildren?: React.ReactNode;\n\n  /** Disables slider */\n  disabled?: boolean;\n\n  /** Thumb `width` and `height`, by default value is computed based on `size` prop */\n  thumbSize?: number | string;\n\n  /** A transformation function to change the scale of the slider */\n  scale?: (value: number) => number;\n\n  /** Determines whether track values representation should be inverted @default `false` */\n  inverted?: boolean;\n\n  /** Minimal range interval @default `10` */\n  minRange?: number;\n\n  /** Maximum range interval @default `Infinity` */\n  maxRange?: number;\n\n  /** First thumb `aria-label` */\n  thumbFromLabel?: string;\n\n  /** Second thumb `aria-label` */\n  thumbToLabel?: string;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Determines whether the selection should be only allowed from the given marks array @default `false` */\n  restrictToMarks?: boolean;\n\n  /** Props passed down to thumb element based on the thumb index */\n  thumbProps?: (index: 0 | 1) => React.ComponentPropsWithoutRef<'div'>;\n\n  /** Determines whether the other thumb should be pushed by the current thumb dragging when `minRange`/`maxRange` is reached @default `true` */\n  pushOnOverlap?: boolean;\n}\n\nexport type RangeSliderFactory = Factory<{\n  props: RangeSliderProps;\n  ref: HTMLDivElement;\n  stylesNames: SliderStylesNames;\n  vars: SliderCssVariables;\n}>;\n\nconst varsResolver = createVarsResolver<RangeSliderFactory>(\n  (theme, { size, color, thumbSize, radius }) => ({\n    root: {\n      '--slider-size': getSize(size, 'slider-size'),\n      '--slider-color': color ? getThemeColor(color, theme) : undefined,\n      '--slider-radius': radius === undefined ? undefined : getRadius(radius),\n      '--slider-thumb-size':\n        thumbSize !== undefined ? rem(thumbSize) : 'calc(var(--slider-size) * 2)',\n    },\n  })\n);\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  minRange: 10,\n  step: 1,\n  marks: [],\n  label: (f) => f,\n  labelTransitionProps: { transition: 'fade', duration: 0 },\n  labelAlwaysOn: false,\n  showLabelOnHover: true,\n  disabled: false,\n  pushOnOverlap: true,\n  scale: (v) => v,\n  size: 'md',\n  maxRange: Infinity,\n} satisfies Partial<RangeSliderProps>;\n\nexport const RangeSlider = factory<RangeSliderFactory>((_props, ref) => {\n  const props = useProps('RangeSlider', defaultProps, _props);\n  const {\n    classNames,\n    styles,\n    value,\n    onChange,\n    onChangeEnd,\n    size,\n    min,\n    max,\n    domain,\n    minRange,\n    maxRange,\n    step,\n    precision: _precision,\n    defaultValue,\n    name,\n    marks,\n    label,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbFromLabel,\n    thumbToLabel,\n    showLabelOnHover,\n    thumbChildren,\n    disabled,\n    unstyled,\n    scale,\n    inverted,\n    className,\n    style,\n    vars,\n    hiddenInputProps,\n    restrictToMarks,\n    thumbProps,\n    pushOnOverlap,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<RangeSliderFactory>({\n    name: 'Slider',\n    props,\n    classes,\n    classNames,\n    className,\n    styles,\n    style,\n    attributes,\n    vars,\n    varsResolver,\n    unstyled,\n  });\n\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const { dir } = useDirection();\n  const [focused, setFocused] = useState(-1);\n  const [hovered, setHovered] = useState(false);\n  const [_value, setValue] = useUncontrolled<RangeSliderValue>({\n    value,\n    defaultValue,\n    finalValue: [min, max],\n    onChange,\n  });\n  const valueRef = useRef(_value);\n  const thumbs = useRef<HTMLDivElement[]>([]);\n  const root = useRef<HTMLDivElement>(null);\n  const thumbIndex = useRef<number | undefined>(undefined);\n  const [domainMin, domainMax] = domain || [min!, max!];\n  const positions = [\n    getPosition({ value: _value[0], min: domainMin, max: domainMax }),\n    getPosition({ value: _value[1], min: domainMin, max: domainMax }),\n  ];\n\n  const precision = _precision ?? getPrecision(step);\n\n  const _setValue = (val: RangeSliderValue) => {\n    setValue(val);\n    valueRef.current = val;\n  };\n\n  useEffect(\n    () => {\n      if (Array.isArray(value)) {\n        valueRef.current = value;\n      }\n    },\n    Array.isArray(value) ? [value[0], value[1]] : [null, null]\n  );\n\n  const setRangedValue = (val: number, index: number, triggerChangeEnd: boolean) => {\n    if (index === -1) {\n      return;\n    }\n\n    const clone: RangeSliderValue = [...valueRef.current];\n\n    if (restrictToMarks && marks) {\n      const closest = findClosestNumber(\n        val,\n        marks.map((m) => m.value)\n      );\n\n      const current = clone[index];\n      clone[index] = closest;\n      const otherIndex = index === 0 ? 1 : 0;\n\n      const lastMarkValue = getLastMarkValue(marks);\n      const firstMarkValue = getFirstMarkValue(marks);\n\n      if (closest === lastMarkValue && clone[otherIndex] === lastMarkValue) {\n        clone[index] = current;\n      } else if (closest === firstMarkValue && clone[otherIndex] === firstMarkValue) {\n        clone[index] = current;\n      } else if (closest === clone[otherIndex]) {\n        if (current > clone[otherIndex]) {\n          clone[otherIndex] = getPreviousMarkValue(closest, marks);\n        } else {\n          clone[otherIndex] = getNextMarkValue(closest, marks);\n        }\n      }\n    } else {\n      const clampedVal = clamp(val, min!, max!);\n      clone[index] = clampedVal;\n\n      if (index === 0) {\n        if (clampedVal > clone[1] - (minRange - 0.000000001)) {\n          if (pushOnOverlap) {\n            clone[1] = Math.min(val + minRange, max);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n\n        if (clampedVal > (max - (minRange - 0.000000001) || min)) {\n          clone[index] = valueRef.current[index];\n        }\n\n        if (clone[1] - val > maxRange) {\n          if (pushOnOverlap) {\n            clone[1] = val + maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n\n      if (index === 1) {\n        if (clampedVal < clone[0] + minRange) {\n          if (pushOnOverlap) {\n            clone[0] = Math.max(val - minRange, min);\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n\n        if (clampedVal < clone[0] + minRange) {\n          clone[index] = valueRef.current[index];\n        }\n\n        if (clampedVal - clone[0] > maxRange) {\n          if (pushOnOverlap) {\n            clone[0] = val - maxRange;\n          } else {\n            clone[index] = valueRef.current[index];\n          }\n        }\n      }\n    }\n\n    clone[0] = getFloatingValue(clone[0], precision);\n    clone[1] = getFloatingValue(clone[1], precision);\n\n    if (clone[0] > clone[1]) {\n      const temp = clone[0];\n      clone[0] = clone[1];\n      clone[1] = temp;\n    }\n\n    _setValue(clone);\n\n    if (triggerChangeEnd) {\n      onChangeEnd?.(valueRef.current);\n    }\n  };\n\n  const handleChange = (val: number) => {\n    if (!disabled && thumbIndex.current !== undefined) {\n      const nextValue = getChangeValue({\n        value: val,\n        min: domainMin,\n        max: domainMax,\n        step,\n        precision,\n      });\n      setRangedValue(nextValue, thumbIndex.current, false);\n    }\n  };\n\n  const { ref: useMoveRef, active } = useMove(\n    ({ x }) => handleChange(x),\n    { onScrubEnd: () => !disabled && onChangeEnd?.(valueRef.current) },\n    dir\n  );\n\n  function handleThumbMouseDown(index: number) {\n    thumbIndex.current = index;\n  }\n\n  const handleTrackMouseDownCapture = (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    if (containerRef.current) {\n      containerRef.current.focus();\n      const rect = containerRef.current.getBoundingClientRect();\n      const changePosition = getClientPosition(event.nativeEvent);\n      const changeValue = getChangeValue({\n        value: changePosition - rect.left,\n        max,\n        min,\n        step,\n        containerWidth: rect.width,\n      });\n\n      const nearestHandle =\n        Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;\n      const _nearestHandle = dir === 'ltr' ? nearestHandle : nearestHandle === 1 ? 0 : 1;\n\n      thumbIndex.current = _nearestHandle;\n    }\n  };\n\n  const getFocusedThumbIndex = () => {\n    if (focused !== 1 && focused !== 0) {\n      setFocused(0);\n      return 0;\n    }\n\n    return focused;\n  };\n\n  const handleTrackKeydownCapture = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!disabled) {\n      switch (event.key) {\n        case 'ArrowUp': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n          const nextValue =\n            restrictToMarks && marks\n              ? getNextMarkValue(valueRef.current[focusedIndex], marks)\n              : Math.min(Math.max(valueRef.current[focusedIndex] + step, min), max);\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowRight': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n\n          const nextValue =\n            restrictToMarks && marks\n              ? (dir === 'rtl' ? getPreviousMarkValue : getNextMarkValue)(\n                  valueRef.current[focusedIndex],\n                  marks\n                )\n              : Math.min(\n                  Math.max(\n                    dir === 'rtl'\n                      ? valueRef.current[focusedIndex] - step\n                      : valueRef.current[focusedIndex] + step,\n                    min\n                  ),\n                  max\n                );\n\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowDown': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n          const nextValue =\n            restrictToMarks && marks\n              ? getPreviousMarkValue(valueRef.current[focusedIndex], marks)\n              : Math.min(Math.max(valueRef.current[focusedIndex] - step, min), max);\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        case 'ArrowLeft': {\n          event.preventDefault();\n          const focusedIndex = getFocusedThumbIndex();\n          thumbs.current[focusedIndex].focus();\n\n          const nextValue =\n            restrictToMarks && marks\n              ? (dir === 'rtl' ? getNextMarkValue : getPreviousMarkValue)(\n                  valueRef.current[focusedIndex],\n                  marks\n                )\n              : Math.min(\n                  Math.max(\n                    dir === 'rtl'\n                      ? valueRef.current[focusedIndex] + step\n                      : valueRef.current[focusedIndex] - step,\n                    min\n                  ),\n                  max\n                );\n\n          setRangedValue(getFloatingValue(nextValue, precision), focusedIndex, true);\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    }\n  };\n\n  const sharedThumbProps = {\n    max,\n    min,\n    size,\n    labelTransitionProps,\n    labelAlwaysOn,\n    onBlur: () => setFocused(-1),\n  };\n\n  const hasArrayThumbChildren = Array.isArray(thumbChildren);\n\n  return (\n    <SliderProvider value={{ getStyles }}>\n      <SliderRoot\n        {...others}\n        size={size}\n        ref={useMergedRef(ref, root)}\n        disabled={disabled}\n        onMouseDownCapture={() => root.current?.focus()}\n        onKeyDownCapture={() => {\n          if (thumbs.current[0]?.parentElement?.contains(document.activeElement)) {\n            return;\n          }\n          thumbs.current[0]?.focus();\n        }}\n      >\n        <Track\n          offset={positions[0]}\n          marksOffset={_value[0]}\n          filled={positions[1] - positions[0]}\n          marks={marks}\n          inverted={inverted}\n          min={domainMin}\n          max={domainMax}\n          value={_value[1]}\n          disabled={disabled}\n          containerProps={{\n            ref: useMergedRef(containerRef, useMoveRef) as any,\n            onMouseEnter: showLabelOnHover ? () => setHovered(true) : undefined,\n            onMouseLeave: showLabelOnHover ? () => setHovered(false) : undefined,\n            onTouchStartCapture: handleTrackMouseDownCapture,\n            onTouchEndCapture: () => {\n              thumbIndex.current = -1;\n            },\n            onMouseDownCapture: handleTrackMouseDownCapture,\n            onMouseUpCapture: () => {\n              thumbIndex.current = -1;\n            },\n            onKeyDownCapture: handleTrackKeydownCapture,\n          }}\n        >\n          <Thumb\n            {...sharedThumbProps}\n            value={scale(_value[0])}\n            position={positions[0]}\n            dragging={active}\n            label={\n              typeof label === 'function'\n                ? label(getFloatingValue(scale(_value[0]), precision))\n                : label\n            }\n            ref={(node) => {\n              if (node) {\n                thumbs.current[0] = node;\n              }\n            }}\n            thumbLabel={thumbFromLabel}\n            onMouseDown={() => handleThumbMouseDown(0)}\n            onFocus={() => setFocused(0)}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps?.(0)}\n          >\n            {hasArrayThumbChildren ? thumbChildren[0] : thumbChildren}\n          </Thumb>\n\n          <Thumb\n            {...sharedThumbProps}\n            thumbLabel={thumbToLabel}\n            value={scale(_value[1])}\n            position={positions[1]}\n            dragging={active}\n            label={\n              typeof label === 'function'\n                ? label(getFloatingValue(scale(_value[1]), precision))\n                : label\n            }\n            ref={(node) => {\n              if (node) {\n                thumbs.current[1] = node;\n              }\n            }}\n            onMouseDown={() => handleThumbMouseDown(1)}\n            onFocus={() => setFocused(1)}\n            showLabelOnHover={showLabelOnHover}\n            isHovered={hovered}\n            disabled={disabled}\n            {...thumbProps?.(1)}\n          >\n            {hasArrayThumbChildren ? thumbChildren[1] : thumbChildren}\n          </Thumb>\n        </Track>\n\n        <input type=\"hidden\" name={`${name}_from`} value={_value[0]} {...hiddenInputProps} />\n        <input type=\"hidden\" name={`${name}_to`} value={_value[1]} {...hiddenInputProps} />\n      </SliderRoot>\n    </SliderProvider>\n  );\n});\n\nRangeSlider.classes = classes;\nRangeSlider.displayName = '@mantine/core/RangeSlider';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}