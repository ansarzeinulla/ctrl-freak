{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getSafeId } from '../../core/utils/get-safe-id/get-safe-id.mjs';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { getWithProps } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { AccordionProvider } from './Accordion.context.mjs';\nimport { AccordionChevron } from './AccordionChevron.mjs';\nimport { AccordionControl } from './AccordionControl/AccordionControl.mjs';\nimport { AccordionItem } from './AccordionItem/AccordionItem.mjs';\nimport { AccordionPanel } from './AccordionPanel/AccordionPanel.mjs';\nimport classes from './Accordion.module.css.mjs';\nconst defaultProps = {\n  multiple: false,\n  disableChevronRotation: false,\n  chevronPosition: \"right\",\n  variant: \"default\",\n  chevronSize: \"auto\",\n  chevronIconSize: 16\n};\nconst varsResolver = createVarsResolver((_, {\n  transitionDuration,\n  chevronSize,\n  radius\n}) => ({\n  root: {\n    \"--accordion-transition-duration\": transitionDuration === void 0 ? void 0 : `${transitionDuration}ms`,\n    \"--accordion-chevron-size\": chevronSize === void 0 ? void 0 : rem(chevronSize),\n    \"--accordion-radius\": radius === void 0 ? void 0 : getRadius(radius)\n  }\n}));\nfunction Accordion(_props) {\n  const props = useProps(\"Accordion\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    chevronIconSize,\n    attributes,\n    ...others\n  } = props;\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n  const getStyles = useStyles({\n    name: \"Accordion\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(AccordionProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(`${uid}-control`, \"Accordion.Item component was rendered with invalid value or without value\"),\n      getRegionId: getSafeId(`${uid}-panel`, \"Accordion.Item component was rendered with invalid value or without value\"),\n      chevron: chevron === null ? null : chevron || /* @__PURE__ */jsx(AccordionChevron, {\n        size: chevronIconSize\n      }),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      order,\n      loop,\n      getStyles,\n      variant,\n      unstyled\n    },\n    children: /* @__PURE__ */jsx(Box, {\n      ...getStyles(\"root\"),\n      id: uid,\n      ...others,\n      variant,\n      \"data-accordion\": true,\n      children\n    })\n  });\n}\nconst extendAccordion = c => c;\nAccordion.extend = extendAccordion;\nAccordion.withProps = getWithProps(Accordion);\nAccordion.classes = classes;\nAccordion.displayName = \"@mantine/core/Accordion\";\nAccordion.Item = AccordionItem;\nAccordion.Panel = AccordionPanel;\nAccordion.Control = AccordionControl;\nAccordion.Chevron = AccordionChevron;\nexport { Accordion };","map":{"version":3,"names":["defaultProps","multiple","disableChevronRotation","chevronPosition","variant","chevronSize","chevronIconSize","varsResolver","createVarsResolver","_","transitionDuration","radius","root","rem","getRadius","Accordion","_props","props","useProps","classNames","className","style","styles","unstyled","vars","children","value","defaultValue","onChange","id","loop","order","chevron","attributes","others","uid","useId","_value","handleChange","useUncontrolled","finalValue","isItemActive","itemValue","Array","isArray","includes","handleItemChange","nextValue","filter","selectedValue","getStyles","useStyles","name","classes","jsx","AccordionProvider","getControlId","getSafeId","getRegionId","AccordionChevron","size","Box","extendAccordion","c","extend","withProps","getWithProps","displayName","Item","AccordionItem","Panel","AccordionPanel","Control","AccordionControl","Chevron"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Accordion/Accordion.tsx"],"sourcesContent":["import { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  ExtendComponent,\n  Factory,\n  getRadius,\n  getSafeId,\n  getWithProps,\n  MantineRadius,\n  MantineThemeComponent,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { AccordionProvider } from './Accordion.context';\nimport { AccordionChevronPosition, AccordionHeadingOrder, AccordionValue } from './Accordion.types';\nimport { AccordionChevron } from './AccordionChevron';\nimport { AccordionControl } from './AccordionControl/AccordionControl';\nimport { AccordionItem } from './AccordionItem/AccordionItem';\nimport { AccordionPanel } from './AccordionPanel/AccordionPanel';\nimport classes from './Accordion.module.css';\n\nexport type AccordionStylesNames =\n  | 'root'\n  | 'content'\n  | 'item'\n  | 'panel'\n  | 'icon'\n  | 'chevron'\n  | 'label'\n  | 'itemTitle'\n  | 'control';\n\nexport type AccordionVariant = 'default' | 'contained' | 'filled' | 'separated';\nexport type AccordionCssVariables = {\n  root: '--accordion-transition-duration' | '--accordion-chevron-size' | '--accordion-radius';\n};\n\nexport interface AccordionProps<Multiple extends boolean = false>\n  extends BoxProps,\n    StylesApiProps<AccordionFactory>,\n    ElementProps<'div', 'value' | 'defaultValue' | 'onChange'> {\n  /** If set, multiple items can be opened at the same time */\n  multiple?: Multiple;\n\n  /** Controlled component value */\n  value?: AccordionValue<Multiple>;\n\n  /** Uncontrolled component default value */\n  defaultValue?: AccordionValue<Multiple>;\n\n  /** Called when value changes, payload type depends on `multiple` prop */\n  onChange?: (value: AccordionValue<Multiple>) => void;\n\n  /** If set, arrow keys loop though items (first to last and last to first) @default `true` */\n  loop?: boolean;\n\n  /** Transition duration in ms @default `200` */\n  transitionDuration?: number;\n\n  /** If set, chevron rotation is disabled */\n  disableChevronRotation?: boolean;\n\n  /** Position of the chevron relative to the item label @default `right` */\n  chevronPosition?: AccordionChevronPosition;\n\n  /** Size of the chevron icon container @default `auto` */\n  chevronSize?: number | string;\n\n  /** Size of the default chevron icon. Ignored when `chevron` prop is set. @default `16` */\n  chevronIconSize?: number | string;\n\n  /** Heading order, has no effect on visuals */\n  order?: AccordionHeadingOrder;\n\n  /** Custom chevron icon */\n  chevron?: React.ReactNode;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius. Numbers are converted to rem. @default `theme.defaultRadius` */\n  radius?: MantineRadius;\n}\n\nexport type AccordionFactory = Factory<{\n  props: AccordionProps;\n  ref: HTMLDivElement;\n  stylesNames: AccordionStylesNames;\n  vars: AccordionCssVariables;\n  variant: AccordionVariant;\n}>;\n\nconst defaultProps = {\n  multiple: false,\n  disableChevronRotation: false,\n  chevronPosition: 'right',\n  variant: 'default',\n  chevronSize: 'auto',\n  chevronIconSize: 16,\n} satisfies Partial<AccordionProps>;\n\nconst varsResolver = createVarsResolver<AccordionFactory>(\n  (_, { transitionDuration, chevronSize, radius }) => ({\n    root: {\n      '--accordion-transition-duration':\n        transitionDuration === undefined ? undefined : `${transitionDuration}ms`,\n      '--accordion-chevron-size': chevronSize === undefined ? undefined : rem(chevronSize),\n      '--accordion-radius': radius === undefined ? undefined : getRadius(radius),\n    },\n  })\n);\n\nexport function Accordion<Multiple extends boolean = false>(_props: AccordionProps<Multiple>) {\n  const props = useProps('Accordion', defaultProps as AccordionProps<Multiple>, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    chevronIconSize,\n    attributes,\n    ...others\n  } = props;\n\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as any) : null,\n    onChange,\n  });\n\n  const isItemActive = (itemValue: string) =>\n    Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = (itemValue: string) => {\n    const nextValue: AccordionValue<Multiple> = Array.isArray(_value)\n      ? _value.includes(itemValue)\n        ? _value.filter((selectedValue) => selectedValue !== itemValue)\n        : [..._value, itemValue]\n      : itemValue === _value\n        ? null\n        : (itemValue as any);\n\n    handleChange(nextValue);\n  };\n\n  const getStyles = useStyles<AccordionFactory>({\n    name: 'Accordion',\n    classes,\n    props: props as AccordionProps,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <AccordionProvider\n      value={{\n        isItemActive,\n        onChange: handleItemChange,\n        getControlId: getSafeId(\n          `${uid}-control`,\n          'Accordion.Item component was rendered with invalid value or without value'\n        ),\n        getRegionId: getSafeId(\n          `${uid}-panel`,\n          'Accordion.Item component was rendered with invalid value or without value'\n        ),\n        chevron: chevron === null ? null : chevron || <AccordionChevron size={chevronIconSize} />,\n        transitionDuration,\n        disableChevronRotation,\n        chevronPosition,\n        order,\n        loop,\n        getStyles,\n        variant,\n        unstyled,\n      }}\n    >\n      <Box {...getStyles('root')} id={uid} {...others} variant={variant} data-accordion>\n        {children}\n      </Box>\n    </AccordionProvider>\n  );\n}\n\nconst extendAccordion = (c: ExtendComponent<AccordionFactory>): MantineThemeComponent => c;\n\nAccordion.extend = extendAccordion;\nAccordion.withProps = getWithProps<AccordionProps, AccordionProps>(Accordion as any);\nAccordion.classes = classes;\nAccordion.displayName = '@mantine/core/Accordion';\nAccordion.Item = AccordionItem;\nAccordion.Panel = AccordionPanel;\nAccordion.Control = AccordionControl;\nAccordion.Chevron = AccordionChevron;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}