{"ast":null,"code":"'use client';\n\nimport cx from 'clsx';\nconst EMPTY_CLASS_NAMES = {};\nfunction mergeClassNames(objects) {\n  const merged = {};\n  objects.forEach(obj => {\n    Object.entries(obj).forEach(_ref => {\n      let [key, value] = _ref;\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n  return merged;\n}\nfunction resolveClassNames(_ref2) {\n  let {\n    theme,\n    classNames,\n    props,\n    stylesCtx\n  } = _ref2;\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map(item => typeof item === \"function\" ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES);\n  return mergeClassNames(resolvedClassNames);\n}\nexport { resolveClassNames };","map":{"version":3,"names":["EMPTY_CLASS_NAMES","mergeClassNames","objects","merged","forEach","obj","Object","entries","_ref","key","value","cx","resolveClassNames","_ref2","theme","classNames","props","stylesCtx","arrayClassNames","Array","isArray","resolvedClassNames","map","item"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/core/styles-api/use-styles/get-class-name/resolve-class-names/resolve-class-names.ts"],"sourcesContent":["import cx from 'clsx';\nimport { MantineTheme } from '../../../../MantineProvider';\nimport type { _ClassNames } from '../get-class-name';\n\nexport interface ResolveClassNamesInput {\n  theme: MantineTheme;\n  classNames: _ClassNames;\n  props: Record<string, any>;\n  stylesCtx: Record<string, any> | undefined;\n}\n\nconst EMPTY_CLASS_NAMES: Partial<Record<string, string>> = {};\n\nfunction mergeClassNames(objects: Partial<Record<string, string>>[]) {\n  const merged: Partial<Record<string, string>> = {};\n\n  objects.forEach((obj) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n\n  return merged;\n}\n\nexport function resolveClassNames({ theme, classNames, props, stylesCtx }: ResolveClassNamesInput) {\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map((item) =>\n    typeof item === 'function' ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES\n  );\n\n  return mergeClassNames(resolvedClassNames);\n}\n"],"mappings":";;;AAWA,MAAMA,iBAAA,GAAqD,EAAC;AAE5D,SAASC,gBAAgBC,OAAA,EAA4C;EACnE,MAAMC,MAAA,GAA0C,EAAC;EAEjDD,OAAA,CAAQE,OAAA,CAASC,GAAA,IAAQ;IACvBC,MAAA,CAAOC,OAAA,CAAQF,GAAG,EAAED,OAAA,CAAQI,IAAA,IAAkB;MAAA,IAAjB,CAACC,GAAA,EAAKC,KAAK,IAAAF,IAAA;MACtC,IAAIL,MAAA,CAAOM,GAAG,GAAG;QACfN,MAAA,CAAOM,GAAG,IAAIE,EAAA,CAAGR,MAAA,CAAOM,GAAG,GAAGC,KAAK;MACrC,OAAO;QACLP,MAAA,CAAOM,GAAG,IAAIC,KAAA;MAChB;IACF,CAAC;EACH,CAAC;EAED,OAAOP,MAAA;AACT;AAEO,SAASS,kBAAAC,KAAA,EAAmF;EAAA,IAAjE;IAAEC,KAAA;IAAOC,UAAA;IAAYC,KAAA;IAAOC;EAAA,CAAU,GAAAJ,KAAA;EACtE,MAAMK,eAAA,GAAkBC,KAAA,CAAMC,OAAA,CAAQL,UAAU,IAAIA,UAAA,GAAa,CAACA,UAAU;EAC5E,MAAMM,kBAAA,GAAqBH,eAAA,CAAgBI,GAAA,CAAKC,IAAA,IAC9C,OAAOA,IAAA,KAAS,aAAaA,IAAA,CAAKT,KAAA,EAAOE,KAAA,EAAOC,SAAS,IAAIM,IAAA,IAAQvB,iBAAA,CACvE;EAEA,OAAOC,eAAA,CAAgBoB,kBAAkB;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}