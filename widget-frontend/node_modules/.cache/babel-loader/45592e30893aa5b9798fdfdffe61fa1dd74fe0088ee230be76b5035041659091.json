{"ast":null,"code":"'use client';\n\nimport React, { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { useDidUpdate, mergeRefs } from '@mantine/hooks';\nfunction getAutoHeightDuration(height) {\n  if (!height || typeof height === \"string\") {\n    return 0;\n  }\n  const constant = height / 36;\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}\nfunction getElementHeight(el) {\n  return el?.current ? el.current.scrollHeight : \"auto\";\n}\nconst raf = typeof window !== \"undefined\" && window.requestAnimationFrame;\nconst collapsedHeight = 0;\nconst getCollapsedStyles = keepMounted => ({\n  height: 0,\n  overflow: \"hidden\",\n  ...(keepMounted ? {} : {\n    display: \"none\"\n  })\n});\nfunction useCollapse({\n  transitionDuration,\n  transitionTimingFunction = \"ease\",\n  onTransitionEnd = () => {},\n  opened,\n  keepMounted = false\n}) {\n  const el = useRef(null);\n  const collapsedStyles = getCollapsedStyles(keepMounted);\n  const [styles, setStylesRaw] = useState(opened ? {} : collapsedStyles);\n  const setStyles = newStyles => {\n    flushSync(() => setStylesRaw(newStyles));\n  };\n  const mergeStyles = newStyles => {\n    setStyles(oldStyles => ({\n      ...oldStyles,\n      ...newStyles\n    }));\n  };\n  function getTransitionStyles(height) {\n    const _duration = transitionDuration || getAutoHeightDuration(height);\n    return {\n      transition: `height ${_duration}ms ${transitionTimingFunction}, opacity ${_duration}ms ${transitionTimingFunction}`\n    };\n  }\n  useDidUpdate(() => {\n    if (typeof raf === \"function\") {\n      if (opened) {\n        raf(() => {\n          mergeStyles({\n            willChange: \"height\",\n            display: \"block\",\n            overflow: \"hidden\"\n          });\n          raf(() => {\n            const height = getElementHeight(el);\n            mergeStyles({\n              ...getTransitionStyles(height),\n              height\n            });\n          });\n        });\n      } else {\n        raf(() => {\n          const height = getElementHeight(el);\n          mergeStyles({\n            ...getTransitionStyles(height),\n            willChange: \"height\",\n            height\n          });\n          raf(() => mergeStyles({\n            height: collapsedHeight,\n            overflow: \"hidden\"\n          }));\n        });\n      }\n    }\n  }, [opened]);\n  const handleTransitionEnd = e => {\n    if (e.target !== el.current || e.propertyName !== \"height\") {\n      return;\n    }\n    if (opened) {\n      const height = getElementHeight(el);\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        mergeStyles({\n          height\n        });\n      }\n      onTransitionEnd();\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onTransitionEnd();\n    }\n  };\n  function getCollapseProps({\n    style = {},\n    refKey = \"ref\",\n    ...rest\n  } = {}) {\n    const theirRef = rest[refKey];\n    const props = {\n      \"aria-hidden\": !opened,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: handleTransitionEnd,\n      style: {\n        boxSizing: \"border-box\",\n        ...style,\n        ...styles\n      }\n    };\n    if (React.version.startsWith(\"18\")) {\n      if (!opened) {\n        props.inert = \"\";\n      }\n    } else {\n      props.inert = !opened;\n    }\n    return props;\n  }\n  return getCollapseProps;\n}\nexport { getElementHeight, useCollapse };","map":{"version":3,"names":["getAutoHeightDuration","height","constant","Math","round","getElementHeight","el","current","scrollHeight","raf","window","requestAnimationFrame","collapsedHeight","getCollapsedStyles","keepMounted","overflow","display","useCollapse","transitionDuration","transitionTimingFunction","onTransitionEnd","opened","useRef","collapsedStyles","styles","setStylesRaw","useState","setStyles","newStyles","flushSync","mergeStyles","oldStyles","getTransitionStyles","_duration","transition","useDidUpdate","willChange","handleTransitionEnd","e","target","propertyName","getCollapseProps","style","refKey","rest","theirRef","props","mergeRefs","boxSizing","React","version","startsWith","inert"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Collapse/use-collapse.ts"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { mergeRefs, useDidUpdate } from '@mantine/hooks';\nimport { CSSProperties } from '../../core';\n\nfunction getAutoHeightDuration(height: number | string) {\n  if (!height || typeof height === 'string') {\n    return 0;\n  }\n  const constant = height / 36;\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}\n\nexport function getElementHeight(\n  el: React.RefObject<HTMLElement | null> | { current?: { scrollHeight: number } }\n) {\n  return el?.current ? el.current.scrollHeight : 'auto';\n}\n\nconst raf = typeof window !== 'undefined' && window.requestAnimationFrame;\n\ninterface UseCollapse {\n  opened: boolean;\n  transitionDuration?: number;\n  transitionTimingFunction?: string;\n  onTransitionEnd?: () => void;\n  keepMounted?: boolean;\n}\n\ninterface GetCollapseProps {\n  [key: string]: unknown;\n\n  style?: CSSProperties;\n  onTransitionEnd?: (e: TransitionEvent) => void;\n  refKey?: string;\n  ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\nconst collapsedHeight = 0;\nconst getCollapsedStyles = (keepMounted: boolean): CSSProperties => ({\n  height: 0,\n  overflow: 'hidden',\n  ...(keepMounted ? {} : { display: 'none' }),\n});\n\nexport function useCollapse({\n  transitionDuration,\n  transitionTimingFunction = 'ease',\n  onTransitionEnd = () => {},\n  opened,\n  keepMounted = false,\n}: UseCollapse): (props: GetCollapseProps) => Record<string, any> {\n  const el = useRef<HTMLElement | null>(null);\n  const collapsedStyles = getCollapsedStyles(keepMounted);\n  const [styles, setStylesRaw] = useState<CSSProperties>(opened ? {} : collapsedStyles);\n  const setStyles = (newStyles: {} | ((oldStyles: {}) => {})): void => {\n    flushSync(() => setStylesRaw(newStyles));\n  };\n\n  const mergeStyles = (newStyles: {}): void => {\n    setStyles((oldStyles) => ({ ...oldStyles, ...newStyles }));\n  };\n\n  function getTransitionStyles(height: number | string): {\n    transition: string;\n  } {\n    const _duration = transitionDuration || getAutoHeightDuration(height);\n    return {\n      transition: `height ${_duration}ms ${transitionTimingFunction}, opacity ${_duration}ms ${transitionTimingFunction}`,\n    };\n  }\n\n  useDidUpdate(() => {\n    if (typeof raf === 'function') {\n      if (opened) {\n        raf(() => {\n          mergeStyles({ willChange: 'height', display: 'block', overflow: 'hidden' });\n          raf(() => {\n            const height = getElementHeight(el);\n            mergeStyles({ ...getTransitionStyles(height), height });\n          });\n        });\n      } else {\n        raf(() => {\n          const height = getElementHeight(el);\n          mergeStyles({ ...getTransitionStyles(height), willChange: 'height', height });\n          raf(() => mergeStyles({ height: collapsedHeight, overflow: 'hidden' }));\n        });\n      }\n    }\n  }, [opened]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent): void => {\n    if (e.target !== el.current || e.propertyName !== 'height') {\n      return;\n    }\n\n    if (opened) {\n      const height = getElementHeight(el);\n\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        mergeStyles({ height });\n      }\n\n      onTransitionEnd();\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onTransitionEnd();\n    }\n  };\n\n  function getCollapseProps({ style = {}, refKey = 'ref', ...rest }: GetCollapseProps = {}) {\n    const theirRef: any = rest[refKey];\n    const props: any = {\n      'aria-hidden': !opened,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: handleTransitionEnd,\n      style: { boxSizing: 'border-box', ...style, ...styles },\n    };\n\n    // Handle inert attribute based on React version\n    if (React.version.startsWith('18')) {\n      // React 18: Use empty string for inert=true, undefined for inert=false\n      if (!opened) {\n        props.inert = '';\n      }\n      // Don't set inert property when opened=true (leave it undefined)\n    } else {\n      // React 19+: Use boolean values\n      props.inert = !opened;\n    }\n\n    return props;\n  }\n\n  return getCollapseProps;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}