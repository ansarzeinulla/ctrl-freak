{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"value\", \"defaultValue\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { NumericFormat } from 'react-number-format';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nfunction NumberFormatter(_props) {\n  const _useProps = useProps(\"NumberFormatter\", null, _props),\n    {\n      value,\n      defaultValue\n    } = _useProps,\n    others = _objectWithoutProperties(_useProps, _excluded);\n  if (value === void 0) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(NumericFormat, _objectSpread({\n    displayType: \"text\",\n    value\n  }, others));\n}\nconst extendNumberFormatter = c => c;\nNumberFormatter.extend = extendNumberFormatter;\nNumberFormatter.displayName = \"@mantine/core/NumberFormatter\";\nexport { NumberFormatter };","map":{"version":3,"names":["NumberFormatter","_props","_useProps","useProps","value","defaultValue","others","_objectWithoutProperties","_excluded","jsx","NumericFormat","_objectSpread","displayType","extendNumberFormatter","c","extend","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/NumberFormatter/NumberFormatter.tsx"],"sourcesContent":["import { NumericFormat } from 'react-number-format';\nimport { ExtendComponent, Factory, MantineThemeComponent, useProps } from '../../core';\n\nexport interface NumberFormatterProps extends React.ComponentPropsWithoutRef<'span'> {\n  /** Value to format */\n  value?: number | string;\n\n  /** If set, negative values are allowed @default `true` */\n  allowNegative?: boolean;\n\n  /** Limits the number of digits that are displayed after the decimal point @default `Infinity` */\n  decimalScale?: number;\n\n  /** Character used as a decimal separator, `'.'` by default */\n  decimalSeparator?: string;\n\n  /** If set, zeros are added after `decimalSeparator` to match given `decimalScale`. @default `false` */\n  fixedDecimalScale?: boolean;\n\n  /** Prefix added before the value */\n  prefix?: string;\n\n  /** Suffix added after the value */\n  suffix?: string;\n\n  /** Defines the thousand grouping style */\n  thousandsGroupStyle?: 'thousand' | 'lakh' | 'wan' | 'none';\n\n  /** A character used to separate thousands @default  `','` */\n  thousandSeparator?: string | boolean;\n}\n\nexport type NumberFormatterFactory = Factory<{\n  props: NumberFormatterProps;\n  ref: HTMLDivElement;\n}>;\n\nexport function NumberFormatter(_props: NumberFormatterProps) {\n  const { value, defaultValue, ...others } = useProps('NumberFormatter', null, _props);\n\n  if (value === undefined) {\n    return null;\n  }\n\n  return <NumericFormat displayType=\"text\" value={value} {...others} />;\n}\n\nconst extendNumberFormatter = (c: ExtendComponent<NumberFormatterFactory>): MantineThemeComponent =>\n  c;\n\nNumberFormatter.extend = extendNumberFormatter;\nNumberFormatter.displayName = '@mantine/core/NumberFormatter';\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAqCO,SAASA,gBAAgBC,MAAA,EAA8B;EAC5D,MAAAC,SAAA,GAA2CC,QAAA,CAAS,mBAAmB,MAAMF,MAAM;IAA7E;MAAEG,KAAA;MAAOC;IAAiB,CAAO,GAAAH,SAAA;IAAPI,MAAA,GAAAC,wBAAA,CAAAL,SAAA,EAAAM,SAAA;EAEhC,IAAIJ,KAAA,KAAU,QAAW;IACvB,OAAO;EACT;EAEA,sBAAAK,GAAA,CAAQC,aAAA,EAAAC,aAAA;IAAcC,WAAA,EAAY;IAAOR;EAAA,GAAkBE,MAAA,CAAQ;AACrE;AAEA,MAAMO,qBAAA,GAAyBC,CAAA,IAC7BA,CAAA;AAEFd,eAAA,CAAgBe,MAAA,GAASF,qBAAA;AACzBb,eAAA,CAAgBgB,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}