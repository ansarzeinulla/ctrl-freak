{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"vars\", \"data\", \"expandOnClick\", \"tree\", \"renderNode\", \"selectOnClick\", \"clearSelectionOnOutsideClick\", \"allowRangeSelection\", \"expandOnSpace\", \"levelOffset\", \"checkOnSpace\", \"attributes\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { useMemo, useEffect } from 'react';\nimport { useClickOutside, useMergedRef } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { TreeNode } from './TreeNode.mjs';\nimport { useTree } from './use-tree.mjs';\nimport classes from './Tree.module.css.mjs';\nfunction getFlatValues(data) {\n  return data.reduce((acc, item) => {\n    acc.push(item.value);\n    if (item.children) {\n      acc.push(...getFlatValues(item.children));\n    }\n    return acc;\n  }, []);\n}\nconst defaultProps = {\n  expandOnClick: true,\n  allowRangeSelection: true,\n  expandOnSpace: true\n};\nconst varsResolver = createVarsResolver((_theme, _ref) => {\n  let {\n    levelOffset\n  } = _ref;\n  return {\n    root: {\n      \"--level-offset\": getSpacing(levelOffset)\n    }\n  };\n});\nconst Tree = factory((_props, ref) => {\n  const props = useProps(\"Tree\", defaultProps, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      vars,\n      data,\n      expandOnClick,\n      tree,\n      renderNode,\n      selectOnClick,\n      clearSelectionOnOutsideClick,\n      allowRangeSelection,\n      expandOnSpace,\n      levelOffset,\n      checkOnSpace,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const defaultController = useTree();\n  const controller = tree || defaultController;\n  const getStyles = useStyles({\n    name: \"Tree\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  const clickOutsideRef = useClickOutside(() => clearSelectionOnOutsideClick && controller.clearSelected());\n  const mergedRef = useMergedRef(ref, clickOutsideRef);\n  const flatValues = useMemo(() => getFlatValues(data), [data]);\n  useEffect(() => {\n    controller.initialize(data);\n  }, [data]);\n  const nodes = data.map((node, index) => /* @__PURE__ */jsx(TreeNode, {\n    node,\n    getStyles,\n    rootIndex: index,\n    expandOnClick,\n    selectOnClick,\n    controller,\n    renderNode,\n    flatValues,\n    allowRangeSelection,\n    expandOnSpace,\n    checkOnSpace\n  }, node.value));\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread(_objectSpread({\n    component: \"ul\",\n    ref: mergedRef\n  }, getStyles(\"root\")), others), {}, {\n    role: \"tree\",\n    \"aria-multiselectable\": controller.multiple,\n    \"data-tree-root\": true,\n    children: nodes\n  }));\n});\nTree.displayName = \"@mantine/core/Tree\";\nTree.classes = classes;\nexport { Tree };","map":{"version":3,"names":["getFlatValues","data","reduce","acc","item","push","value","children","defaultProps","expandOnClick","allowRangeSelection","expandOnSpace","varsResolver","createVarsResolver","_theme","_ref","levelOffset","root","getSpacing","Tree","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","tree","renderNode","selectOnClick","clearSelectionOnOutsideClick","checkOnSpace","attributes","others","_objectWithoutProperties","_excluded","defaultController","useTree","controller","getStyles","useStyles","name","classes","clickOutsideRef","useClickOutside","clearSelected","mergedRef","useMergedRef","flatValues","useMemo","useEffect","initialize","nodes","map","node","index","jsx","TreeNode","rootIndex","Box","_objectSpread","component","role","multiple","displayName"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/Tree/Tree.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useClickOutside, useMergedRef } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSpacing,\n  MantineSpacing,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { TreeNode } from './TreeNode';\nimport { TreeController, useTree } from './use-tree';\nimport classes from './Tree.module.css';\n\nexport interface TreeNodeData {\n  label: React.ReactNode;\n  value: string;\n  nodeProps?: Record<string, any>;\n  children?: TreeNodeData[];\n}\n\nexport interface RenderTreeNodePayload {\n  /** Node level in the tree */\n  level: number;\n\n  /** `true` if the node is expanded, applicable only for nodes with `children` */\n  expanded: boolean;\n\n  /** `true` if the node has non-empty `children` array */\n  hasChildren: boolean;\n\n  /** `true` if the node is selected */\n  selected: boolean;\n\n  /** Node data from the `data` prop of `Tree` */\n  node: TreeNodeData;\n\n  /** Tree controller instance, return value of `useTree` hook */\n  tree: TreeController;\n\n  /** Props to spread into the root node element */\n  elementProps: {\n    className: string;\n    style: React.CSSProperties;\n    onClick: (event: React.MouseEvent) => void;\n    'data-selected': boolean | undefined;\n    'data-value': string;\n    'data-hovered': boolean | undefined;\n  };\n}\n\nexport type RenderNode = (payload: RenderTreeNodePayload) => React.ReactNode;\n\nexport type TreeStylesNames = 'root' | 'node' | 'subtree' | 'label';\nexport type TreeCssVariables = {\n  root: '--level-offset';\n};\n\nexport interface TreeProps extends BoxProps, StylesApiProps<TreeFactory>, ElementProps<'ul'> {\n  /** Data used to render nodes */\n  data: TreeNodeData[];\n\n  /** Horizontal padding of each subtree level, key of `theme.spacing` or any valid CSS value @default `'lg'` */\n  levelOffset?: MantineSpacing;\n\n  /** If set, tree node with children is expanded on click @default `true` */\n  expandOnClick?: boolean;\n\n  /** If set, tree node with children is expanded on space key press @default `true` */\n  expandOnSpace?: boolean;\n\n  /** If set, tree node is checked on space key press @default `false` */\n  checkOnSpace?: boolean;\n\n  /** If set, tree node is selected on click @default `false` */\n  selectOnClick?: boolean;\n\n  /** Use-tree hook instance that can be used to manipulate component state */\n  tree?: TreeController;\n\n  /** A function to render tree node label */\n  renderNode?: RenderNode;\n\n  /** If set, selection is cleared when user clicks outside of the tree @default `false` */\n  clearSelectionOnOutsideClick?: boolean;\n\n  /** If set, tree nodes range can be selected with click when `Shift` key is pressed @default `true` */\n  allowRangeSelection?: boolean;\n}\n\nfunction getFlatValues(data: TreeNodeData[]): string[] {\n  return data.reduce<string[]>((acc, item) => {\n    acc.push(item.value);\n    if (item.children) {\n      acc.push(...getFlatValues(item.children));\n    }\n    return acc;\n  }, []);\n}\n\nexport type TreeFactory = Factory<{\n  props: TreeProps;\n  ref: HTMLUListElement;\n  stylesNames: TreeStylesNames;\n  vars: TreeCssVariables;\n}>;\n\nconst defaultProps = {\n  expandOnClick: true,\n  allowRangeSelection: true,\n  expandOnSpace: true,\n} satisfies Partial<TreeProps>;\n\nconst varsResolver = createVarsResolver<TreeFactory>((_theme, { levelOffset }) => ({\n  root: {\n    '--level-offset': getSpacing(levelOffset),\n  },\n}));\n\nexport const Tree = factory<TreeFactory>((_props, ref) => {\n  const props = useProps('Tree', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    expandOnClick,\n    tree,\n    renderNode,\n    selectOnClick,\n    clearSelectionOnOutsideClick,\n    allowRangeSelection,\n    expandOnSpace,\n    levelOffset,\n    checkOnSpace,\n    attributes,\n    ...others\n  } = props;\n\n  const defaultController = useTree();\n  const controller = tree || defaultController;\n\n  const getStyles = useStyles<TreeFactory>({\n    name: 'Tree',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const clickOutsideRef = useClickOutside(\n    () => clearSelectionOnOutsideClick && controller.clearSelected()\n  );\n\n  const mergedRef = useMergedRef(ref, clickOutsideRef);\n\n  const flatValues = useMemo(() => getFlatValues(data), [data]);\n\n  useEffect(() => {\n    controller.initialize(data);\n  }, [data]);\n\n  const nodes = data.map((node, index) => (\n    <TreeNode\n      key={node.value}\n      node={node}\n      getStyles={getStyles}\n      rootIndex={index}\n      expandOnClick={expandOnClick}\n      selectOnClick={selectOnClick}\n      controller={controller}\n      renderNode={renderNode}\n      flatValues={flatValues}\n      allowRangeSelection={allowRangeSelection}\n      expandOnSpace={expandOnSpace}\n      checkOnSpace={checkOnSpace}\n    />\n  ));\n\n  return (\n    <Box\n      component=\"ul\"\n      ref={mergedRef}\n      {...getStyles('root')}\n      {...others}\n      role=\"tree\"\n      aria-multiselectable={controller.multiple}\n      data-tree-root\n    >\n      {nodes}\n    </Box>\n  );\n});\n\nTree.displayName = '@mantine/core/Tree';\nTree.classes = classes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}