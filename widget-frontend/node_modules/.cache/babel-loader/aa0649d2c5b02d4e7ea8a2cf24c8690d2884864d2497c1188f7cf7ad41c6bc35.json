{"ast":null,"code":"'use client';\n\nimport cx from 'clsx';\nconst EMPTY_CLASS_NAMES = {};\nfunction mergeClassNames(objects) {\n  const merged = {};\n  objects.forEach(obj => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n  return merged;\n}\nfunction resolveClassNames({\n  theme,\n  classNames,\n  props,\n  stylesCtx\n}) {\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map(item => typeof item === \"function\" ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES);\n  return mergeClassNames(resolvedClassNames);\n}\nexport { resolveClassNames };","map":{"version":3,"names":["EMPTY_CLASS_NAMES","mergeClassNames","objects","merged","forEach","obj","Object","entries","key","value","cx","resolveClassNames","theme","classNames","props","stylesCtx","arrayClassNames","Array","isArray","resolvedClassNames","map","item"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/core/styles-api/use-styles/get-class-name/resolve-class-names/resolve-class-names.ts"],"sourcesContent":["import cx from 'clsx';\nimport { MantineTheme } from '../../../../MantineProvider';\nimport type { _ClassNames } from '../get-class-name';\n\nexport interface ResolveClassNamesInput {\n  theme: MantineTheme;\n  classNames: _ClassNames;\n  props: Record<string, any>;\n  stylesCtx: Record<string, any> | undefined;\n}\n\nconst EMPTY_CLASS_NAMES: Partial<Record<string, string>> = {};\n\nfunction mergeClassNames(objects: Partial<Record<string, string>>[]) {\n  const merged: Partial<Record<string, string>> = {};\n\n  objects.forEach((obj) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n\n  return merged;\n}\n\nexport function resolveClassNames({ theme, classNames, props, stylesCtx }: ResolveClassNamesInput) {\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map((item) =>\n    typeof item === 'function' ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES\n  );\n\n  return mergeClassNames(resolvedClassNames);\n}\n"],"mappings":";;;AAWA,MAAMA,iBAAA,GAAqD,EAAC;AAE5D,SAASC,gBAAgBC,OAAA,EAA4C;EACnE,MAAMC,MAAA,GAA0C,EAAC;EAEjDD,OAAA,CAAQE,OAAA,CAASC,GAAA,IAAQ;IACvBC,MAAA,CAAOC,OAAA,CAAQF,GAAG,EAAED,OAAA,CAAQ,CAAC,CAACI,GAAA,EAAKC,KAAK,MAAM;MAC5C,IAAIN,MAAA,CAAOK,GAAG,GAAG;QACfL,MAAA,CAAOK,GAAG,IAAIE,EAAA,CAAGP,MAAA,CAAOK,GAAG,GAAGC,KAAK;MACrC,OAAO;QACLN,MAAA,CAAOK,GAAG,IAAIC,KAAA;MAChB;IACF,CAAC;EACH,CAAC;EAED,OAAON,MAAA;AACT;AAEO,SAASQ,kBAAkB;EAAEC,KAAA;EAAOC,UAAA;EAAYC,KAAA;EAAOC;AAAA,CAAU,EAA2B;EACjG,MAAMC,eAAA,GAAkBC,KAAA,CAAMC,OAAA,CAAQL,UAAU,IAAIA,UAAA,GAAa,CAACA,UAAU;EAC5E,MAAMM,kBAAA,GAAqBH,eAAA,CAAgBI,GAAA,CAAKC,IAAA,IAC9C,OAAOA,IAAA,KAAS,aAAaA,IAAA,CAAKT,KAAA,EAAOE,KAAA,EAAOC,SAAS,IAAIM,IAAA,IAAQrB,iBAAA,CACvE;EAEA,OAAOC,eAAA,CAAgBkB,kBAAkB;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}