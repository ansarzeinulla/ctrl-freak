{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"orientation\"];\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useRef, useState } from 'react';\nimport '../../../core/utils/units-converters/rem.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { getThumbRatio } from '../utils/get-thumb-ratio.mjs';\nimport { getThumbOffsetFromScroll } from '../utils/get-thumb-offset-from-scroll.mjs';\nimport { getScrollPositionFromPointer } from '../utils/get-scroll-position-from-pointer.mjs';\nimport { ScrollAreaScrollbarX } from './ScrollbarX.mjs';\nimport { ScrollAreaScrollbarY } from './ScrollbarY.mjs';\nconst ScrollAreaScrollbarVisible = forwardRef((props, forwardedRef) => {\n  const {\n      orientation = \"vertical\"\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded);\n  const {\n    dir\n  } = useDirection();\n  const context = useScrollAreaContext();\n  const thumbRef = useRef(null);\n  const pointerOffsetRef = useRef(0);\n  const [sizes, setSizes] = useState({\n    content: 0,\n    viewport: 0,\n    scrollbar: {\n      size: 0,\n      paddingStart: 0,\n      paddingEnd: 0\n    }\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n  const commonProps = _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: thumb => {\n      thumbRef.current = thumb;\n    },\n    onThumbPointerUp: () => {\n      pointerOffsetRef.current = 0;\n    },\n    onThumbPointerDown: pointerPos => {\n      pointerOffsetRef.current = pointerPos;\n    }\n  });\n  const getScrollPosition = (pointerPos, direction) => getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, direction);\n  if (orientation === \"horizontal\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarX, _objectSpread(_objectSpread({}, commonProps), {}, {\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollLeft;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes, dir);\n          thumbRef.current.style.transform = \"translate3d(\".concat(offset, \"px, 0, 0)\");\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = scrollPos;\n        }\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);\n        }\n      }\n    }));\n  }\n  if (orientation === \"vertical\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarY, _objectSpread(_objectSpread({}, commonProps), {}, {\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollTop;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n          if (sizes.scrollbar.size === 0) {\n            thumbRef.current.style.setProperty(\"--thumb-opacity\", \"0\");\n          } else {\n            thumbRef.current.style.setProperty(\"--thumb-opacity\", \"1\");\n          }\n          thumbRef.current.style.transform = \"translate3d(0, \".concat(offset, \"px, 0)\");\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) {\n          context.viewport.scrollTop = scrollPos;\n        }\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }\n      }\n    }));\n  }\n  return null;\n});\nScrollAreaScrollbarVisible.displayName = \"@mantine/core/ScrollAreaScrollbarVisible\";\nexport { ScrollAreaScrollbarVisible };","map":{"version":3,"names":["ScrollAreaScrollbarVisible","forwardRef","props","forwardedRef","orientation","scrollbarProps","_objectWithoutProperties","_excluded","dir","useDirection","context","useScrollAreaContext","thumbRef","useRef","pointerOffsetRef","sizes","setSizes","useState","content","viewport","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","_objectSpread","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","current","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","direction","getScrollPositionFromPointer","jsx","ScrollAreaScrollbarX","ref","onThumbPositionChange","scrollPos","scrollLeft","offset","getThumbOffsetFromScroll","style","transform","concat","onWheelScroll","onDragScroll","ScrollAreaScrollbarY","scrollTop","setProperty","displayName"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarVisible.tsx"],"sourcesContent":["import { forwardRef, useRef, useState } from 'react';\nimport { useDirection } from '../../../core';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport {\n  ScrollAreaScrollbarAxisPrivateProps,\n  ScrollAreaScrollbarAxisProps,\n  Sizes,\n} from '../ScrollArea.types';\nimport { getScrollPositionFromPointer, getThumbOffsetFromScroll, getThumbRatio } from '../utils';\nimport { ScrollAreaScrollbarX } from './ScrollbarX';\nimport { ScrollAreaScrollbarY } from './ScrollbarY';\n\nexport interface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nexport const ScrollAreaScrollbarVisible = forwardRef<\n  HTMLDivElement,\n  ScrollAreaScrollbarVisibleProps\n>((props, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const { dir } = useDirection();\n  const context = useScrollAreaContext();\n  const thumbRef = useRef<HTMLDivElement | null>(null);\n  const pointerOffsetRef = useRef(0);\n  const [sizes, setSizes] = useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  const commonProps: Omit<\n    ScrollAreaScrollbarAxisPrivateProps,\n    'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll'\n  > = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => {\n      thumbRef.current = thumb;\n    },\n    onThumbPointerUp: () => {\n      pointerOffsetRef.current = 0;\n    },\n    onThumbPointerDown: (pointerPos) => {\n      pointerOffsetRef.current = pointerPos;\n    },\n  };\n\n  const getScrollPosition = (pointerPos: number, direction?: 'ltr' | 'rtl') =>\n    getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, direction);\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = scrollPos;\n          }\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            if (sizes.scrollbar.size === 0) {\n              thumbRef.current.style.setProperty('--thumb-opacity', '0');\n            } else {\n              thumbRef.current.style.setProperty('--thumb-opacity', '1');\n            }\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) {\n            context.viewport.scrollTop = scrollPos;\n          }\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollTop = getScrollPosition(pointerPos);\n          }\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\nScrollAreaScrollbarVisible.displayName = '@mantine/core/ScrollAreaScrollbarVisible';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}