{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport '../Combobox/ComboboxHiddenInput/ComboboxHiddenInput.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nconst Autocomplete = factory((_props, ref) => {\n  const props = useProps(\"Autocomplete\", null, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownClose,\n    onDropdownOpen,\n    onFocus,\n    onBlur,\n    onClick,\n    onChange,\n    data,\n    value,\n    defaultValue,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    readOnly,\n    disabled,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    size,\n    id,\n    renderOption,\n    autoComplete,\n    scrollAreaProps,\n    onClear,\n    clearButtonProps,\n    error,\n    clearable,\n    rightSection,\n    autoSelectOnBlur,\n    attributes,\n    ...others\n  } = props;\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: \"\",\n    onChange\n  });\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      setTimeout(combobox.resetSelectedOption, 0);\n    }\n  });\n  const handleValueChange = value2 => {\n    setValue(value2);\n    combobox.resetSelectedOption();\n  };\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value]);\n  const clearButton = /* @__PURE__ */jsx(Combobox.ClearButton, {\n    ...clearButtonProps,\n    onClear: () => {\n      handleValueChange(\"\");\n      onClear?.();\n    }\n  });\n  return /* @__PURE__ */jsxs(Combobox, {\n    store: combobox,\n    __staticSelector: \"Autocomplete\",\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    unstyled,\n    readOnly,\n    size,\n    attributes,\n    keepMounted: autoSelectOnBlur,\n    onOptionSubmit: val => {\n      onOptionSubmit?.(val);\n      handleValueChange(optionsLockup[val].label);\n      combobox.closeDropdown();\n    },\n    ...comboboxProps,\n    children: [/* @__PURE__ */jsx(Combobox.Target, {\n      autoComplete,\n      children: /* @__PURE__ */jsx(InputBase, {\n        ref,\n        ...others,\n        size,\n        __staticSelector: \"Autocomplete\",\n        __clearSection: clearButton,\n        __clearable: clearable && !!_value && !disabled && !readOnly,\n        rightSection,\n        disabled,\n        readOnly,\n        value: _value,\n        error,\n        onChange: event => {\n          handleValueChange(event.currentTarget.value);\n          combobox.openDropdown();\n          selectFirstOptionOnChange && combobox.selectFirstOption();\n        },\n        onFocus: event => {\n          combobox.openDropdown();\n          onFocus?.(event);\n        },\n        onBlur: event => {\n          if (autoSelectOnBlur) {\n            combobox.clickSelectedOption();\n          }\n          combobox.closeDropdown();\n          onBlur?.(event);\n        },\n        onClick: event => {\n          combobox.openDropdown();\n          onClick?.(event);\n        },\n        classNames: resolvedClassNames,\n        styles: resolvedStyles,\n        unstyled,\n        attributes,\n        id: _id\n      })\n    }), /* @__PURE__ */jsx(OptionsDropdown, {\n      data: parsedData,\n      hidden: readOnly || disabled,\n      filter,\n      search: _value,\n      limit,\n      hiddenWhenEmpty: true,\n      withScrollArea,\n      maxDropdownHeight,\n      unstyled,\n      labelId: others.label ? `${_id}-label` : void 0,\n      \"aria-label\": others.label ? void 0 : others[\"aria-label\"],\n      renderOption,\n      scrollAreaProps\n    })]\n  });\n});\nAutocomplete.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nAutocomplete.displayName = \"@mantine/core/Autocomplete\";\nexport { Autocomplete };","map":{"version":3,"names":["Autocomplete","factory","_props","ref","props","useProps","classNames","styles","unstyled","vars","dropdownOpened","defaultDropdownOpened","onDropdownClose","onDropdownOpen","onFocus","onBlur","onClick","onChange","data","value","defaultValue","selectFirstOptionOnChange","onOptionSubmit","comboboxProps","readOnly","disabled","filter","limit","withScrollArea","maxDropdownHeight","size","id","renderOption","autoComplete","scrollAreaProps","onClear","clearButtonProps","error","clearable","rightSection","autoSelectOnBlur","attributes","others","_id","useId","parsedData","getParsedComboboxData","optionsLockup","getOptionsLockup","_value","setValue","useUncontrolled","finalValue","combobox","useCombobox","opened","defaultOpened","setTimeout","resetSelectedOption","handleValueChange","value2","resolvedClassNames","resolvedStyles","useResolvedStylesApi","useEffect","selectFirstOption","clearButton","jsx","Combobox","ClearButton","jsxs","store","__staticSelector","keepMounted","val","label","closeDropdown","children","Target","InputBase","__clearSection","__clearable","event","currentTarget","openDropdown","clickSelectedOption","OptionsDropdown","hidden","search","hiddenWhenEmpty","labelId","classes","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Autocomplete/Autocomplete.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n} from '../../core';\nimport {\n  Combobox,\n  ComboboxLikeProps,\n  ComboboxLikeRenderOptionInput,\n  ComboboxLikeStylesNames,\n  ComboboxStringData,\n  ComboboxStringItem,\n  getOptionsLockup,\n  getParsedComboboxData,\n  OptionsDropdown,\n  useCombobox,\n} from '../Combobox';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  InputClearButtonProps,\n  InputVariant,\n} from '../Input';\nimport { InputBase } from '../InputBase';\nimport { ScrollAreaProps } from '../ScrollArea';\n\nexport type RenderAutocompleteOption = (\n  input: ComboboxLikeRenderOptionInput<ComboboxStringItem>\n) => React.ReactNode;\n\nexport type AutocompleteStylesNames = __InputStylesNames | ComboboxLikeStylesNames;\n\nexport interface AutocompleteProps\n  extends BoxProps,\n    Omit<__BaseInputProps, 'pointer'>,\n    Omit<ComboboxLikeProps, 'data'>,\n    StylesApiProps<AutocompleteFactory>,\n    ElementProps<'input', 'onChange' | 'size'> {\n  /** Data used to display options. Values must be unique. */\n  data?: ComboboxStringData;\n\n  /** Controlled component value */\n  value?: string;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: string;\n\n  /** Called when value changes */\n  onChange?: (value: string) => void;\n\n  /** Function to render custom option content */\n  renderOption?: RenderAutocompleteOption;\n\n  /** Props passed to the underlying `ScrollArea` component in the dropdown */\n  scrollAreaProps?: ScrollAreaProps;\n\n  /** Called when the clear button is clicked */\n  onClear?: () => void;\n\n  /** Props passed to the clear button */\n  clearButtonProps?: InputClearButtonProps;\n\n  /** If set, the clear button is displayed when the component has a value @default `false` */\n  clearable?: boolean;\n\n  /** If set, the highlighted option is selected when the input loses focus @default `false` */\n  autoSelectOnBlur?: boolean;\n}\n\nexport type AutocompleteFactory = Factory<{\n  props: AutocompleteProps;\n  ref: HTMLInputElement;\n  stylesNames: AutocompleteStylesNames;\n  variant: InputVariant;\n}>;\n\nexport const Autocomplete = factory<AutocompleteFactory>((_props, ref) => {\n  const props = useProps('Autocomplete', null, _props);\n  const {\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownClose,\n    onDropdownOpen,\n    onFocus,\n    onBlur,\n    onClick,\n    onChange,\n    data,\n    value,\n    defaultValue,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    readOnly,\n    disabled,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    size,\n    id,\n    renderOption,\n    autoComplete,\n    scrollAreaProps,\n    onClear,\n    clearButtonProps,\n    error,\n    clearable,\n    rightSection,\n    autoSelectOnBlur,\n    attributes,\n    ...others\n  } = props;\n\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: '',\n    onChange,\n  });\n\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      // Required for autoSelectOnBlur to work correctly\n      setTimeout(combobox.resetSelectedOption, 0);\n    },\n  });\n\n  const handleValueChange = (value: string) => {\n    setValue(value);\n    combobox.resetSelectedOption();\n  };\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<AutocompleteFactory>({\n    props,\n    styles,\n    classNames,\n  });\n\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value]);\n\n  const clearButton = (\n    <Combobox.ClearButton\n      {...clearButtonProps}\n      onClear={() => {\n        handleValueChange('');\n        onClear?.();\n      }}\n    />\n  );\n\n  return (\n    <Combobox\n      store={combobox}\n      __staticSelector=\"Autocomplete\"\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      unstyled={unstyled}\n      readOnly={readOnly}\n      size={size}\n      attributes={attributes}\n      keepMounted={autoSelectOnBlur}\n      onOptionSubmit={(val) => {\n        onOptionSubmit?.(val);\n        handleValueChange(optionsLockup[val].label);\n        combobox.closeDropdown();\n      }}\n      {...comboboxProps}\n    >\n      <Combobox.Target autoComplete={autoComplete}>\n        <InputBase\n          ref={ref}\n          {...others}\n          size={size}\n          __staticSelector=\"Autocomplete\"\n          __clearSection={clearButton}\n          __clearable={clearable && !!_value && !disabled && !readOnly}\n          rightSection={rightSection}\n          disabled={disabled}\n          readOnly={readOnly}\n          value={_value}\n          error={error}\n          onChange={(event) => {\n            handleValueChange(event.currentTarget.value);\n            combobox.openDropdown();\n            selectFirstOptionOnChange && combobox.selectFirstOption();\n          }}\n          onFocus={(event) => {\n            combobox.openDropdown();\n            onFocus?.(event);\n          }}\n          onBlur={(event) => {\n            if (autoSelectOnBlur) {\n              combobox.clickSelectedOption();\n            }\n\n            combobox.closeDropdown();\n            onBlur?.(event);\n          }}\n          onClick={(event) => {\n            combobox.openDropdown();\n            onClick?.(event);\n          }}\n          classNames={resolvedClassNames}\n          styles={resolvedStyles}\n          unstyled={unstyled}\n          attributes={attributes}\n          id={_id}\n        />\n      </Combobox.Target>\n      <OptionsDropdown\n        data={parsedData}\n        hidden={readOnly || disabled}\n        filter={filter}\n        search={_value}\n        limit={limit}\n        hiddenWhenEmpty\n        withScrollArea={withScrollArea}\n        maxDropdownHeight={maxDropdownHeight}\n        unstyled={unstyled}\n        labelId={others.label ? `${_id}-label` : undefined}\n        aria-label={others.label ? undefined : others['aria-label']}\n        renderOption={renderOption}\n        scrollAreaProps={scrollAreaProps}\n      />\n    </Combobox>\n  );\n});\n\nAutocomplete.classes = { ...InputBase.classes, ...Combobox.classes };\nAutocomplete.displayName = '@mantine/core/Autocomplete';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}