{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { createElement } from 'react';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Curve } from './Curve/Curve.mjs';\nimport { getCurves } from './get-curves/get-curves.mjs';\nimport classes from './RingProgress.module.css.mjs';\nfunction getClampedThickness(thickness, size) {\n  return Math.min(thickness || 12, (size || 120) / 4);\n}\nconst defaultProps = {\n  size: 120,\n  thickness: 12\n};\nconst varsResolver = createVarsResolver((_, {\n  size,\n  thickness,\n  transitionDuration\n}) => ({\n  root: {\n    \"--rp-size\": rem(size),\n    \"--rp-label-offset\": rem(thickness * 2),\n    \"--rp-transition-duration\": transitionDuration ? `${transitionDuration}ms` : void 0\n  }\n}));\nconst RingProgress = factory((_props, ref) => {\n  const props = useProps(\"RingProgress\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    label,\n    sections,\n    size,\n    thickness,\n    roundCaps,\n    rootColor,\n    transitionDuration,\n    attributes,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"RingProgress\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  const clampedThickness = getClampedThickness(thickness, size);\n  const curves = getCurves({\n    size,\n    thickness: clampedThickness,\n    sections,\n    renderRoundedLineCaps: roundCaps,\n    rootColor\n  }).map(({\n    data,\n    sum,\n    root,\n    lineRoundCaps,\n    offset\n  }, index) => /* @__PURE__ */createElement(Curve, {\n    ...data,\n    key: index,\n    size,\n    thickness: clampedThickness,\n    sum,\n    offset,\n    color: data?.color,\n    root,\n    lineRoundCaps,\n    getStyles\n  }));\n  return /* @__PURE__ */jsxs(Box, {\n    ...getStyles(\"root\"),\n    size,\n    ref,\n    ...others,\n    children: [/* @__PURE__ */jsx(\"svg\", {\n      ...getStyles(\"svg\"),\n      children: curves\n    }), label && /* @__PURE__ */jsx(\"div\", {\n      ...getStyles(\"label\"),\n      children: label\n    })]\n  });\n});\nRingProgress.classes = classes;\nRingProgress.displayName = \"@mantine/core/RingProgress\";\nexport { RingProgress };","map":{"version":3,"names":["getClampedThickness","thickness","size","Math","min","defaultProps","varsResolver","createVarsResolver","_","transitionDuration","root","rem","RingProgress","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","label","sections","roundCaps","rootColor","attributes","others","getStyles","useStyles","name","classes","clampedThickness","curves","getCurves","renderRoundedLineCaps","map","data","sum","lineRoundCaps","offset","index","createElement","Curve","key","color","jsxs","Box","children","jsx","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/RingProgress/RingProgress.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { Curve } from './Curve/Curve';\nimport { getCurves } from './get-curves/get-curves';\nimport classes from './RingProgress.module.css';\n\nfunction getClampedThickness(thickness: number, size: number) {\n  return Math.min(thickness || 12, (size || 120) / 4);\n}\n\ninterface RingProgressSection extends React.ComponentPropsWithRef<'circle'> {\n  value: number;\n  color: MantineColor;\n  tooltip?: React.ReactNode;\n}\n\nexport type RingProgressStylesNames = 'root' | 'svg' | 'label' | 'curve';\nexport type RingProgressCssVariables = {\n  root: '--rp-size' | '--rp-label-offset' | '--rp-transition-duration';\n};\n\nexport interface RingProgressProps\n  extends BoxProps,\n    StylesApiProps<RingProgressFactory>,\n    ElementProps<'div'> {\n  /** Label displayed in the center of the ring */\n  label?: React.ReactNode;\n\n  /** Ring thickness @default 12 */\n  thickness?: number;\n\n  /** Width and height of the progress ring @default 120 */\n  size?: number;\n\n  /** Sets whether the edges of the progress circle are rounded */\n  roundCaps?: boolean;\n\n  /** Ring sections */\n  sections: RingProgressSection[];\n\n  /** Color of the root section, key of theme.colors or CSS color value */\n  rootColor?: MantineColor;\n\n  /** Transition duration of filled section styles changes in ms @default `0` */\n  transitionDuration?: number;\n}\n\nexport type RingProgressFactory = Factory<{\n  props: RingProgressProps;\n  ref: HTMLDivElement;\n  stylesNames: RingProgressStylesNames;\n  vars: RingProgressCssVariables;\n}>;\n\nconst defaultProps = {\n  size: 120,\n  thickness: 12,\n} satisfies Partial<RingProgressProps>;\n\nconst varsResolver = createVarsResolver<RingProgressFactory>(\n  (_, { size, thickness, transitionDuration }) => ({\n    root: {\n      '--rp-size': rem(size),\n      '--rp-label-offset': rem(thickness! * 2),\n      '--rp-transition-duration': transitionDuration ? `${transitionDuration}ms` : undefined,\n    },\n  })\n);\n\nexport const RingProgress = factory<RingProgressFactory>((_props, ref) => {\n  const props = useProps('RingProgress', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    label,\n    sections,\n    size,\n    thickness,\n    roundCaps,\n    rootColor,\n    transitionDuration,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<RingProgressFactory>({\n    name: 'RingProgress',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const clampedThickness = getClampedThickness(thickness, size);\n\n  const curves = getCurves({\n    size,\n    thickness: clampedThickness,\n    sections,\n    renderRoundedLineCaps: roundCaps,\n    rootColor,\n  }).map(({ data, sum, root, lineRoundCaps, offset }, index) => (\n    <Curve\n      {...data}\n      key={index}\n      size={size}\n      thickness={clampedThickness}\n      sum={sum}\n      offset={offset}\n      color={data?.color}\n      root={root}\n      lineRoundCaps={lineRoundCaps}\n      getStyles={getStyles}\n    />\n  ));\n\n  return (\n    <Box {...getStyles('root')} size={size} ref={ref} {...others}>\n      <svg {...getStyles('svg')}>{curves}</svg>\n      {label && <div {...getStyles('label')}>{label}</div>}\n    </Box>\n  );\n});\n\nRingProgress.classes = classes;\nRingProgress.displayName = '@mantine/core/RingProgress';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,oBAAoBC,SAAA,EAAmBC,IAAA,EAAc;EAC5D,OAAOC,IAAA,CAAKC,GAAA,CAAIH,SAAA,IAAa,KAAKC,IAAA,IAAQ,OAAO,CAAC;AACpD;AA8CA,MAAMG,YAAA,GAAe;EACnBH,IAAA,EAAM;EACND,SAAA,EAAW;AACb;AAEA,MAAMK,YAAA,GAAeC,kBAAA,CACnB,CAACC,CAAA,EAAG;EAAEN,IAAA;EAAMD,SAAA;EAAWQ;AAAA,CAAmB,MAAO;EAC/CC,IAAA,EAAM;IACJ,aAAaC,GAAA,CAAIT,IAAI;IACrB,qBAAqBS,GAAA,CAAIV,SAAA,GAAa,CAAC;IACvC,4BAA4BQ,kBAAA,GAAqB,GAAGA,kBAAkB,OAAO;EAAA;AAC/E,CACF,CACF;AAEO,MAAMG,YAAA,GAAeC,OAAA,CAA6B,CAACC,MAAA,EAAQC,GAAA,KAAQ;EACxE,MAAMC,KAAA,GAAQC,QAAA,CAAS,gBAAgBZ,YAAA,EAAcS,MAAM;EAC3D,MAAM;IACJI,UAAA;IACAC,SAAA;IACAC,KAAA;IACAC,MAAA;IACAC,QAAA;IACAC,IAAA;IACAC,KAAA;IACAC,QAAA;IACAvB,IAAA;IACAD,SAAA;IACAyB,SAAA;IACAC,SAAA;IACAlB,kBAAA;IACAmB,UAAA;IACA,GAAGC;EAAA,CACL,GAAIb,KAAA;EAEJ,MAAMc,SAAA,GAAYC,SAAA,CAA+B;IAC/CC,IAAA,EAAM;IACNC,OAAA;IACAjB,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAM,UAAA;IACAL,IAAA;IACAjB;EAAA,CACD;EAED,MAAM4B,gBAAA,GAAmBlC,mBAAA,CAAoBC,SAAA,EAAWC,IAAI;EAE5D,MAAMiC,MAAA,GAASC,SAAA,CAAU;IACvBlC,IAAA;IACAD,SAAA,EAAWiC,gBAAA;IACXT,QAAA;IACAY,qBAAA,EAAuBX,SAAA;IACvBC;EAAA,CACD,EAAEW,GAAA,CAAI,CAAC;IAAEC,IAAA;IAAMC,GAAA;IAAK9B,IAAA;IAAM+B,aAAA;IAAeC;EAAA,CAAO,EAAGC,KAAA,oBAClDC,aAAA,CAACC,KAAA;IACE,GAAGN,IAAA;IACJO,GAAA,EAAKH,KAAA;IACLzC,IAAA;IACAD,SAAA,EAAWiC,gBAAA;IACXM,GAAA;IACAE,MAAA;IACAK,KAAA,EAAOR,IAAA,EAAMQ,KAAA;IACbrC,IAAA;IACA+B,aAAA;IACAX;EAAA,EAEH;EAED,sBACEkB,IAAA,CAACC,GAAA;IAAK,GAAGnB,SAAA,CAAU,MAAM;IAAG5B,IAAA;IAAYa,GAAA;IAAW,GAAGc,MAAA;IACpDqB,QAAA,kBAAAC,GAAA,CAAC;MAAK,GAAGrB,SAAA,CAAU,KAAK;MAAIoB,QAAA,EAAAf;IAAA,CAAO,GAClCX,KAAA,mBAAS2B,GAAA,CAAC;MAAK,GAAGrB,SAAA,CAAU,OAAO;MAAIoB,QAAA,EAAA1B;IAAA,CAAM;EAAA,CAChD;AAEJ,CAAC;AAEDZ,YAAA,CAAaqB,OAAA,GAAUA,OAAA;AACvBrB,YAAA,CAAawC,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}