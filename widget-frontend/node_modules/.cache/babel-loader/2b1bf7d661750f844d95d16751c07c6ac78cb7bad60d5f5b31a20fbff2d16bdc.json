{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"vars\", \"onChange\", \"onChangeEnd\", \"maxValue\", \"round\", \"size\", \"focusable\", \"value\", \"overlays\", \"thumbColor\", \"onScrubStart\", \"onScrubEnd\", \"__staticSelector\", \"attributes\"];\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useState, useRef, createElement } from 'react';\nimport { useMove, useDidUpdate, useMergedRef, clampUseMovePosition } from '@mantine/hooks';\nimport { rem } from '../../../core/utils/units-converters/rem.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useColorPickerContext } from '../ColorPicker.context.mjs';\nimport { Thumb } from '../Thumb/Thumb.mjs';\nimport classes from '../ColorPicker.module.css.mjs';\nconst ColorSlider = factory((_props, ref) => {\n  var _useColorPickerContex;\n  const props = useProps(\"ColorSlider\", null, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      vars,\n      onChange,\n      onChangeEnd,\n      maxValue,\n      round,\n      size = \"md\",\n      focusable = true,\n      value,\n      overlays,\n      thumbColor = \"transparent\",\n      onScrubStart,\n      onScrubEnd,\n      __staticSelector = \"ColorPicker\",\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const _getStyles = useStyles({\n    name: __staticSelector,\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes\n  });\n  const ctxGetStyles = (_useColorPickerContex = useColorPickerContext()) === null || _useColorPickerContex === void 0 ? void 0 : _useColorPickerContex.getStyles;\n  const getStyles = ctxGetStyles || _getStyles;\n  const theme = useMantineTheme();\n  const [position, setPosition] = useState({\n    y: 0,\n    x: value / maxValue\n  });\n  const positionRef = useRef(position);\n  const getChangeValue = val => round ? Math.round(val * maxValue) : val * maxValue;\n  const {\n    ref: sliderRef\n  } = useMove(_ref => {\n    let {\n      x,\n      y\n    } = _ref;\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange === null || onChange === void 0 || onChange(getChangeValue(x));\n  }, {\n    onScrubEnd: () => {\n      const {\n        x\n      } = positionRef.current;\n      onChangeEnd === null || onChangeEnd === void 0 || onChangeEnd(getChangeValue(x));\n      onScrubEnd === null || onScrubEnd === void 0 || onScrubEnd();\n    },\n    onScrubStart\n  });\n  useDidUpdate(() => {\n    setPosition({\n      y: 0,\n      x: value / maxValue\n    });\n  }, [value]);\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange === null || onChange === void 0 || onChange(getChangeValue(_position.x));\n    onChangeEnd === null || onChangeEnd === void 0 || onChangeEnd(getChangeValue(_position.x));\n  };\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n  const layers = overlays.map((overlay, index) => /* @__PURE__ */createElement(\"div\", _objectSpread(_objectSpread({}, getStyles(\"sliderOverlay\")), {}, {\n    style: overlay,\n    key: index\n  })));\n  return /* @__PURE__ */jsxs(Box, _objectSpread(_objectSpread(_objectSpread({}, others), {}, {\n    ref: useMergedRef(sliderRef, ref)\n  }, getStyles(\"slider\")), {}, {\n    role: \"slider\",\n    \"aria-valuenow\": value,\n    \"aria-valuemax\": maxValue,\n    \"aria-valuemin\": 0,\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown,\n    \"data-focus-ring\": theme.focusRing,\n    __vars: {\n      \"--cp-thumb-size\": \"var(--cp-thumb-size-\".concat(size, \")\")\n    },\n    children: [layers, /* @__PURE__ */jsx(Thumb, _objectSpread({\n      position\n    }, getStyles(\"thumb\", {\n      style: {\n        top: rem(1),\n        background: thumbColor\n      }\n    })))]\n  }));\n});\nColorSlider.displayName = \"@mantine/core/ColorSlider\";\nexport { ColorSlider };","map":{"version":3,"names":["ColorSlider","factory","_props","ref","_useColorPickerContex","props","useProps","classNames","className","style","styles","unstyled","vars","onChange","onChangeEnd","maxValue","round","size","focusable","value","overlays","thumbColor","onScrubStart","onScrubEnd","__staticSelector","attributes","others","_objectWithoutProperties","_excluded","_getStyles","useStyles","name","classes","ctxGetStyles","useColorPickerContext","getStyles","theme","useMantineTheme","position","setPosition","useState","y","x","positionRef","useRef","getChangeValue","val","Math","sliderRef","useMove","_ref","current","useDidUpdate","handleArrow","event","pos","preventDefault","_position","clampUseMovePosition","handleKeyDown","key","layers","map","overlay","index","createElement","_objectSpread","jsxs","Box","useMergedRef","role","tabIndex","onKeyDown","focusRing","__vars","concat","children","jsx","Thumb","top","rem","background","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/ColorPicker/ColorSlider/ColorSlider.tsx"],"sourcesContent":["import { useRef, useState } from 'react';\nimport {\n  clampUseMovePosition,\n  useDidUpdate,\n  useMergedRef,\n  useMove,\n  UseMovePosition,\n} from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSize,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { useColorPickerContext } from '../ColorPicker.context';\nimport { Thumb } from '../Thumb/Thumb';\nimport classes from '../ColorPicker.module.css';\n\nexport type ColorSliderStylesNames = 'slider' | 'sliderOverlay' | 'thumb';\n\nexport interface __ColorSliderProps extends ElementProps<'div', 'onChange'> {\n  value: number;\n  onChange?: (value: number) => void;\n  onChangeEnd?: (value: number) => void;\n  onScrubStart?: () => void;\n  onScrubEnd?: () => void;\n  size?: MantineSize | (string & {});\n  focusable?: boolean;\n}\n\nexport interface ColorSliderProps\n  extends BoxProps,\n    StylesApiProps<ColorSliderFactory>,\n    __ColorSliderProps,\n    ElementProps<'div', 'onChange'> {\n  __staticSelector?: string;\n  maxValue: number;\n  overlays: React.CSSProperties[];\n  round: boolean;\n  thumbColor?: string;\n}\n\nexport type ColorSliderFactory = Factory<{\n  props: ColorSliderProps;\n  ref: HTMLDivElement;\n  stylesNames: ColorSliderStylesNames;\n}>;\n\nexport const ColorSlider = factory<ColorSliderFactory>((_props, ref) => {\n  const props = useProps('ColorSlider', null, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onChange,\n    onChangeEnd,\n    maxValue,\n    round,\n    size = 'md',\n    focusable = true,\n    value,\n    overlays,\n    thumbColor = 'transparent',\n    onScrubStart,\n    onScrubEnd,\n    __staticSelector = 'ColorPicker',\n    attributes,\n    ...others\n  } = props;\n\n  const _getStyles = useStyles<ColorSliderFactory>({\n    name: __staticSelector,\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n  });\n\n  const ctxGetStyles = useColorPickerContext()?.getStyles;\n  const getStyles = ctxGetStyles || _getStyles;\n\n  const theme = useMantineTheme();\n  const [position, setPosition] = useState({ y: 0, x: value / maxValue });\n  const positionRef = useRef(position);\n  const getChangeValue = (val: number) => (round ? Math.round(val * maxValue) : val * maxValue);\n  const { ref: sliderRef } = useMove(\n    ({ x, y }) => {\n      positionRef.current = { x, y };\n      onChange?.(getChangeValue(x));\n    },\n    {\n      onScrubEnd: () => {\n        const { x } = positionRef.current;\n        onChangeEnd?.(getChangeValue(x));\n        onScrubEnd?.();\n      },\n      onScrubStart,\n    }\n  );\n\n  useDidUpdate(() => {\n    setPosition({ y: 0, x: value / maxValue });\n  }, [value]);\n\n  const handleArrow = (event: React.KeyboardEvent<HTMLDivElement>, pos: UseMovePosition) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange?.(getChangeValue(_position.x));\n    onChangeEnd?.(getChangeValue(_position.x));\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    switch (event.key) {\n      case 'ArrowRight': {\n        handleArrow(event, { x: position.x + 0.05, y: position.y });\n        break;\n      }\n\n      case 'ArrowLeft': {\n        handleArrow(event, { x: position.x - 0.05, y: position.y });\n        break;\n      }\n    }\n  };\n\n  const layers = overlays.map((overlay, index) => (\n    <div {...getStyles('sliderOverlay')} style={overlay} key={index} />\n  ));\n\n  return (\n    <Box\n      {...others}\n      ref={useMergedRef(sliderRef, ref)}\n      {...getStyles('slider')}\n      role=\"slider\"\n      aria-valuenow={value}\n      aria-valuemax={maxValue}\n      aria-valuemin={0}\n      tabIndex={focusable ? 0 : -1}\n      onKeyDown={handleKeyDown}\n      data-focus-ring={theme.focusRing}\n      __vars={{\n        '--cp-thumb-size': `var(--cp-thumb-size-${size})`,\n      }}\n    >\n      {layers}\n\n      <Thumb\n        position={position}\n        {...getStyles('thumb', { style: { top: rem(1), background: thumbColor } })}\n      />\n    </Box>\n  );\n});\n\nColorSlider.displayName = '@mantine/core/ColorSlider';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}