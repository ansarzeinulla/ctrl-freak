{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useEffect } from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { ScrollAreaScrollbarAuto } from './ScrollAreaScrollbarAuto.mjs';\nimport { ScrollAreaScrollbarHover } from './ScrollAreaScrollbarHover.mjs';\nimport { ScrollAreaScrollbarScroll } from './ScrollAreaScrollbarScroll.mjs';\nimport { ScrollAreaScrollbarVisible } from './ScrollAreaScrollbarVisible.mjs';\nconst ScrollAreaScrollbar = forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext();\n  const {\n    onScrollbarXEnabledChange,\n    onScrollbarYEnabledChange\n  } = context;\n  const isHorizontal = props.orientation === \"horizontal\";\n  useEffect(() => {\n    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n    return () => {\n      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n    };\n  }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n  return context.type === \"hover\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarHover, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"scroll\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarScroll, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"auto\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarAuto, {\n    ...scrollbarProps,\n    ref: forwardedRef,\n    forceMount\n  }) : context.type === \"always\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, {\n    ...scrollbarProps,\n    ref: forwardedRef\n  }) : null;\n});\nScrollAreaScrollbar.displayName = \"@mantine/core/ScrollAreaScrollbar\";\nexport { ScrollAreaScrollbar };","map":{"version":3,"names":["ScrollAreaScrollbar","forwardRef","props","forwardedRef","forceMount","scrollbarProps","context","useScrollAreaContext","onScrollbarXEnabledChange","onScrollbarYEnabledChange","isHorizontal","orientation","useEffect","type","jsx","ScrollAreaScrollbarHover","ref","ScrollAreaScrollbarScroll","ScrollAreaScrollbarAuto","ScrollAreaScrollbarVisible","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbar.tsx"],"sourcesContent":["import { forwardRef, useEffect } from 'react';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport { ScrollAreaScrollbarAuto } from './ScrollAreaScrollbarAuto';\nimport { ScrollAreaScrollbarHover } from './ScrollAreaScrollbarHover';\nimport { ScrollAreaScrollbarScroll } from './ScrollAreaScrollbarScroll';\nimport {\n  ScrollAreaScrollbarVisible,\n  ScrollAreaScrollbarVisibleProps,\n} from './ScrollAreaScrollbarVisible';\n\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nexport const ScrollAreaScrollbar = forwardRef<HTMLDivElement, ScrollAreaScrollbarProps>(\n  (props, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext();\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = '@mantine/core/ScrollAreaScrollbar';\n"],"mappings":";;;;;;;;;AAcO,MAAMA,mBAAA,GAAsBC,UAAA,CACjC,CAACC,KAAA,EAAOC,YAAA,KAAiB;EACvB,MAAM;IAAEC,UAAA;IAAY,GAAGC;EAAA,CAAe,GAAIH,KAAA;EAC1C,MAAMI,OAAA,GAAUC,oBAAA,EAAqB;EACrC,MAAM;IAAEC,yBAAA;IAA2BC;EAAA,CAA0B,GAAIH,OAAA;EACjE,MAAMI,YAAA,GAAeR,KAAA,CAAMS,WAAA,KAAgB;EAE3CC,SAAA,CAAU,MAAM;IACdF,YAAA,GAAeF,yBAAA,CAA0B,IAAI,IAAIC,yBAAA,CAA0B,IAAI;IAC/E,OAAO,MAAM;MACXC,YAAA,GAAeF,yBAAA,CAA0B,KAAK,IAAIC,yBAAA,CAA0B,KAAK;IACnF;EACF,GAAG,CAACC,YAAA,EAAcF,yBAAA,EAA2BC,yBAAyB,CAAC;EAEvE,OAAOH,OAAA,CAAQO,IAAA,KAAS,yBAAAC,GAAA,CACrBC,wBAAA;IAA0B,GAAGV,cAAA;IAAgBW,GAAA,EAAKb,YAAA;IAAcC;EAAA,CAAwB,IACvFE,OAAA,CAAQO,IAAA,KAAS,0BACnBC,GAAA,CAACG,yBAAA;IAA2B,GAAGZ,cAAA;IAAgBW,GAAA,EAAKb,YAAA;IAAcC;EAAA,CAAwB,IACxFE,OAAA,CAAQO,IAAA,KAAS,wBACnBC,GAAA,CAACI,uBAAA;IAAyB,GAAGb,cAAA;IAAgBW,GAAA,EAAKb,YAAA;IAAcC;EAAA,CAAwB,IACtFE,OAAA,CAAQO,IAAA,KAAS,0BACnBC,GAAA,CAACK,0BAAA;IAA4B,GAAGd,cAAA;IAAgBW,GAAA,EAAKb;EAAA,CAAc,IACjE;AACN,CACF;AAEAH,mBAAA,CAAoBoB,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}