{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useState } from 'react';\nfunction useListState() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  const [state, setState] = useState(initialValue);\n  const append = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    return setState(current => [...current, ...items]);\n  };\n  const prepend = function () {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    return setState(current => [...items, ...current]);\n  };\n  const insert = function (index) {\n    for (var _len3 = arguments.length, items = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      items[_key3 - 1] = arguments[_key3];\n    }\n    return setState(current => [...current.slice(0, index), ...items, ...current.slice(index)]);\n  };\n  const apply = fn => setState(current => current.map((item, index) => fn(item, index)));\n  const remove = function () {\n    for (var _len4 = arguments.length, indices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      indices[_key4] = arguments[_key4];\n    }\n    return setState(current => current.filter((_, index) => !indices.includes(index)));\n  };\n  const pop = () => setState(current => {\n    const cloned = [...current];\n    cloned.pop();\n    return cloned;\n  });\n  const shift = () => setState(current => {\n    const cloned = [...current];\n    cloned.shift();\n    return cloned;\n  });\n  const reorder = _ref => {\n    let {\n      from,\n      to\n    } = _ref;\n    return setState(current => {\n      const cloned = [...current];\n      const item = current[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      return cloned;\n    });\n  };\n  const swap = _ref2 => {\n    let {\n      from,\n      to\n    } = _ref2;\n    return setState(current => {\n      const cloned = [...current];\n      const fromItem = cloned[from];\n      const toItem = cloned[to];\n      cloned.splice(to, 1, fromItem);\n      cloned.splice(from, 1, toItem);\n      return cloned;\n    });\n  };\n  const setItem = (index, item) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = item;\n    return cloned;\n  });\n  const setItemProp = (index, prop, value) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = _objectSpread(_objectSpread({}, cloned[index]), {}, {\n      [prop]: value\n    });\n    return cloned;\n  });\n  const applyWhere = (condition, fn) => setState(current => current.map((item, index) => condition(item, index) ? fn(item, index) : item));\n  const filter = fn => {\n    setState(current => current.filter(fn));\n  };\n  return [state, {\n    setState,\n    append,\n    prepend,\n    insert,\n    pop,\n    shift,\n    apply,\n    applyWhere,\n    remove,\n    reorder,\n    swap,\n    setItem,\n    setItemProp,\n    filter\n  }];\n}\nexport { useListState };","map":{"version":3,"names":["useListState","initialValue","arguments","length","undefined","state","setState","useState","append","_len","items","Array","_key","current","prepend","_len2","_key2","insert","index","_len3","_key3","slice","apply","fn","map","item","remove","_len4","indices","_key4","filter","_","includes","pop","cloned","shift","reorder","_ref","from","to","splice","swap","_ref2","fromItem","toItem","setItem","setItemProp","prop","value","_objectSpread","applyWhere","condition"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/hooks/src/use-list-state/use-list-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface UseListStateHandlers<T> {\n  setState: React.Dispatch<React.SetStateAction<T[]>>;\n  append: (...items: T[]) => void;\n  prepend: (...items: T[]) => void;\n  insert: (index: number, ...items: T[]) => void;\n  pop: () => void;\n  shift: () => void;\n  apply: (fn: (item: T, index?: number) => T) => void;\n  applyWhere: (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => void;\n  remove: (...indices: number[]) => void;\n  reorder: ({ from, to }: { from: number; to: number }) => void;\n  swap: ({ from, to }: { from: number; to: number }) => void;\n  setItem: (index: number, item: T) => void;\n  setItemProp: <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) => void;\n  filter: (fn: (item: T, i: number) => boolean) => void;\n}\n\nexport type UseListStateReturnValue<T> = [T[], UseListStateHandlers<T>];\n\nexport function useListState<T>(initialValue: T[] | (() => T[]) = []): UseListStateReturnValue<T> {\n  const [state, setState] = useState(initialValue);\n\n  const append = (...items: T[]) => setState((current) => [...current, ...items]);\n  const prepend = (...items: T[]) => setState((current) => [...items, ...current]);\n\n  const insert = (index: number, ...items: T[]) =>\n    setState((current) => [...current.slice(0, index), ...items, ...current.slice(index)]);\n\n  const apply = (fn: (item: T, index?: number) => T) =>\n    setState((current) => current.map((item, index) => fn(item, index)));\n\n  const remove = (...indices: number[]) =>\n    setState((current) => current.filter((_, index) => !indices.includes(index)));\n\n  const pop = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.pop();\n      return cloned;\n    });\n\n  const shift = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.shift();\n      return cloned;\n    });\n\n  const reorder = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const item = current[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n\n      return cloned;\n    });\n\n  const swap = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const fromItem = cloned[from];\n      const toItem = cloned[to];\n\n      cloned.splice(to, 1, fromItem);\n      cloned.splice(from, 1, toItem);\n\n      return cloned;\n    });\n\n  const setItem = (index: number, item: T) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = item;\n      return cloned;\n    });\n\n  const setItemProp = <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = { ...cloned[index], [prop]: value };\n      return cloned;\n    });\n\n  const applyWhere = (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) =>\n    setState((current) =>\n      current.map((item, index) => (condition(item, index) ? fn(item, index) : item))\n    );\n\n  const filter = (fn: (item: T, i: number) => boolean) => {\n    setState((current) => current.filter(fn));\n  };\n\n  return [\n    state,\n    {\n      setState,\n      append,\n      prepend,\n      insert,\n      pop,\n      shift,\n      apply,\n      applyWhere,\n      remove,\n      reorder,\n      swap,\n      setItem,\n      setItemProp,\n      filter,\n    },\n  ];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}