{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"vars\", \"icon\", \"indeterminate\", \"radius\", \"color\", \"iconColor\", \"autoContrast\", \"checked\", \"mod\", \"variant\", \"disabled\", \"attributes\"];\nimport { jsx } from 'react/jsx-runtime';\nimport '../../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getRadius, getSize } from '../../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useCheckboxCardContext } from '../CheckboxCard/CheckboxCard.context.mjs';\nimport { CheckboxIcon } from '../CheckIcon.mjs';\nimport classes from './CheckboxIndicator.module.css.mjs';\nconst defaultProps = {\n  icon: CheckboxIcon,\n  variant: \"filled\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    radius,\n    color,\n    size,\n    iconColor,\n    variant,\n    autoContrast\n  } = _ref;\n  const parsedColor = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme\n  });\n  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? \"var(--mantine-color-\".concat(parsedColor.color, \"-outline)\") : parsedColor.color;\n  return {\n    indicator: {\n      \"--checkbox-size\": getSize(size, \"checkbox-size\"),\n      \"--checkbox-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--checkbox-color\": variant === \"outline\" ? outlineColor : getThemeColor(color, theme),\n      \"--checkbox-icon-color\": iconColor ? getThemeColor(iconColor, theme) : getAutoContrastValue(autoContrast, theme) ? getContrastColor({\n        color,\n        theme,\n        autoContrast\n      }) : void 0\n    }\n  };\n});\nconst CheckboxIndicator = factory((_props, ref) => {\n  const props = useProps(\"CheckboxIndicator\", defaultProps, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      vars,\n      icon: Icon,\n      indeterminate,\n      radius,\n      color,\n      iconColor,\n      autoContrast,\n      checked,\n      mod,\n      variant,\n      disabled,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const getStyles = useStyles({\n    name: \"CheckboxIndicator\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n    rootSelector: \"indicator\"\n  });\n  const ctx = useCheckboxCardContext();\n  const _checked = typeof checked === \"boolean\" || typeof indeterminate === \"boolean\" ? checked || indeterminate : (ctx === null || ctx === void 0 ? void 0 : ctx.checked) || false;\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread(_objectSpread({\n    ref\n  }, getStyles(\"indicator\", {\n    variant\n  })), {}, {\n    variant,\n    mod: [{\n      checked: _checked,\n      disabled\n    }, mod]\n  }, others), {}, {\n    children: /* @__PURE__ */jsx(Icon, _objectSpread({\n      indeterminate\n    }, getStyles(\"icon\")))\n  }));\n});\nCheckboxIndicator.displayName = \"@mantine/core/CheckboxIndicator\";\nCheckboxIndicator.classes = classes;\nexport { CheckboxIndicator };","map":{"version":3,"names":["defaultProps","icon","CheckboxIcon","variant","varsResolver","createVarsResolver","theme","_ref","radius","color","size","iconColor","autoContrast","parsedColor","parseThemeColor","primaryColor","outlineColor","isThemeColor","shade","concat","indicator","getSize","getRadius","getThemeColor","getAutoContrastValue","getContrastColor","CheckboxIndicator","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","Icon","indeterminate","checked","mod","disabled","attributes","others","_objectWithoutProperties","_excluded","getStyles","useStyles","name","classes","rootSelector","ctx","useCheckboxCardContext","_checked","jsx","Box","_objectSpread","children","displayName"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/Checkbox/CheckboxIndicator/CheckboxIndicator.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getAutoContrastValue,\n  getContrastColor,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  parseThemeColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { useCheckboxCardContext } from '../CheckboxCard/CheckboxCard.context';\nimport { CheckboxIcon } from '../CheckIcon';\nimport classes from './CheckboxIndicator.module.css';\n\nexport type CheckboxIndicatorStylesNames = 'indicator' | 'icon';\nexport type CheckboxIndicatorVariant = 'filled' | 'outline';\nexport type CheckboxIndicatorCssVariables = {\n  indicator: '--checkbox-size' | '--checkbox-radius' | '--checkbox-color' | '--checkbox-icon-color';\n};\n\nexport interface CheckboxIndicatorProps\n  extends BoxProps,\n    StylesApiProps<CheckboxIndicatorFactory>,\n    ElementProps<'div'> {\n  /** Key of `theme.colors` or any valid CSS color to set input background color in checked state @default `theme.primaryColor` */\n  color?: MantineColor;\n\n  /** Controls size of the component @default `'sm'` */\n  size?: MantineSize | (string & {});\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius` @default `theme.defaultRadius` */\n  radius?: MantineRadius;\n\n  /** Key of `theme.colors` or any valid CSS color to set icon color, by default value depends on `theme.autoContrast` */\n  iconColor?: MantineColor;\n\n  /** If set, adjusts text color based on background color for `filled` variant */\n  autoContrast?: boolean;\n\n  /** Indeterminate state of the checkbox. If set, `checked` prop is ignored. */\n  indeterminate?: boolean;\n\n  /** Icon displayed when checkbox is in checked or indeterminate state */\n  icon?: React.FC<{ indeterminate: boolean | undefined; className: string }>;\n\n  /** Determines whether the component should have checked styles */\n  checked?: boolean;\n\n  /** Determines whether the component should have disabled styles */\n  disabled?: boolean;\n}\n\nexport type CheckboxIndicatorFactory = Factory<{\n  props: CheckboxIndicatorProps;\n  ref: HTMLDivElement;\n  stylesNames: CheckboxIndicatorStylesNames;\n  vars: CheckboxIndicatorCssVariables;\n  variant: CheckboxIndicatorVariant;\n}>;\n\nconst defaultProps = {\n  icon: CheckboxIcon,\n  variant: 'filled',\n} satisfies Partial<CheckboxIndicatorProps>;\n\nconst varsResolver = createVarsResolver<CheckboxIndicatorFactory>(\n  (theme, { radius, color, size, iconColor, variant, autoContrast }) => {\n    const parsedColor = parseThemeColor({ color: color || theme.primaryColor, theme });\n    const outlineColor =\n      parsedColor.isThemeColor && parsedColor.shade === undefined\n        ? `var(--mantine-color-${parsedColor.color}-outline)`\n        : parsedColor.color;\n\n    return {\n      indicator: {\n        '--checkbox-size': getSize(size, 'checkbox-size'),\n        '--checkbox-radius': radius === undefined ? undefined : getRadius(radius),\n        '--checkbox-color': variant === 'outline' ? outlineColor : getThemeColor(color, theme),\n        '--checkbox-icon-color': iconColor\n          ? getThemeColor(iconColor, theme)\n          : getAutoContrastValue(autoContrast, theme)\n            ? getContrastColor({ color, theme, autoContrast })\n            : undefined,\n      },\n    };\n  }\n);\n\nexport const CheckboxIndicator = factory<CheckboxIndicatorFactory>((_props, ref) => {\n  const props = useProps('CheckboxIndicator', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    icon: Icon,\n    indeterminate,\n    radius,\n    color,\n    iconColor,\n    autoContrast,\n    checked,\n    mod,\n    variant,\n    disabled,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<CheckboxIndicatorFactory>({\n    name: 'CheckboxIndicator',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n    rootSelector: 'indicator',\n  });\n\n  const ctx = useCheckboxCardContext();\n  const _checked =\n    typeof checked === 'boolean' || typeof indeterminate === 'boolean'\n      ? checked || indeterminate\n      : ctx?.checked || false;\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('indicator', { variant })}\n      variant={variant}\n      mod={[{ checked: _checked, disabled }, mod]}\n      {...others}\n    >\n      <Icon indeterminate={indeterminate} {...getStyles('icon')} />\n    </Box>\n  );\n});\n\nCheckboxIndicator.displayName = '@mantine/core/CheckboxIndicator';\nCheckboxIndicator.classes = classes;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,MAAMA,YAAA,GAAe;EACnBC,IAAA,EAAMC,YAAA;EACNC,OAAA,EAAS;AACX;AAEA,MAAMC,YAAA,GAAeC,kBAAA,CACnB,CAACC,KAAA,EAAAC,IAAA,KAAqE;EAAA,IAA9D;IAAEC,MAAA;IAAQC,KAAA;IAAOC,IAAA;IAAMC,SAAA;IAAWR,OAAA;IAASS;EAAA,CAAa,GAAAL,IAAA;EAC9D,MAAMM,WAAA,GAAcC,eAAA,CAAgB;IAAEL,KAAA,EAAOA,KAAA,IAASH,KAAA,CAAMS,YAAA;IAAcT;EAAA,CAAO;EACjF,MAAMU,YAAA,GACJH,WAAA,CAAYI,YAAA,IAAgBJ,WAAA,CAAYK,KAAA,KAAU,gCAAAC,MAAA,CACvBN,WAAA,CAAYJ,KAAK,iBACxCI,WAAA,CAAYJ,KAAA;EAElB,OAAO;IACLW,SAAA,EAAW;MACT,mBAAmBC,OAAA,CAAQX,IAAA,EAAM,eAAe;MAChD,qBAAqBF,MAAA,KAAW,SAAY,SAAYc,SAAA,CAAUd,MAAM;MACxE,oBAAoBL,OAAA,KAAY,YAAYa,YAAA,GAAeO,aAAA,CAAcd,KAAA,EAAOH,KAAK;MACrF,yBAAyBK,SAAA,GACrBY,aAAA,CAAcZ,SAAA,EAAWL,KAAK,IAC9BkB,oBAAA,CAAqBZ,YAAA,EAAcN,KAAK,IACtCmB,gBAAA,CAAiB;QAAEhB,KAAA;QAAOH,KAAA;QAAOM;MAAA,CAAc,IAC/C;IAAA;EACR,CACF;AACF,CACF;AAEO,MAAMc,iBAAA,GAAoBC,OAAA,CAAkC,CAACC,MAAA,EAAQC,GAAA,KAAQ;EAClF,MAAMC,KAAA,GAAQC,QAAA,CAAS,qBAAqB/B,YAAA,EAAc4B,MAAM;EAChE,MAAM;MACJI,UAAA;MACAC,SAAA;MACAC,KAAA;MACAC,MAAA;MACAC,QAAA;MACAC,IAAA;MACApC,IAAA,EAAMqC,IAAA;MACNC,aAAA;MACA/B,MAAA;MACAC,KAAA;MACAE,SAAA;MACAC,YAAA;MACA4B,OAAA;MACAC,GAAA;MACAtC,OAAA;MACAuC,QAAA;MACAC;IACG,CACL,GAAIb,KAAA;IADCc,MAAA,GAAAC,wBAAA,CACDf,KAAA,EAAAgB,SAAA;EAEJ,MAAMC,SAAA,GAAYC,SAAA,CAAoC;IACpDC,IAAA,EAAM;IACNC,OAAA;IACApB,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAO,UAAA;IACAN,IAAA;IACAjC,YAAA;IACA+C,YAAA,EAAc;EAAA,CACf;EAED,MAAMC,GAAA,GAAMC,sBAAA,EAAuB;EACnC,MAAMC,QAAA,GACJ,OAAOd,OAAA,KAAY,aAAa,OAAOD,aAAA,KAAkB,YACrDC,OAAA,IAAWD,aAAA,GACX,CAAAa,GAAA,aAAAA,GAAA,uBAAAA,GAAA,CAAKZ,OAAA,KAAW;EAEtB,sBACEe,GAAA,CAACC,GAAA,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA;IACC5B;EAAA,GACIkB,SAAA,CAAU,aAAa;IAAE5C;EAAA,CAAS;IACtCA,OAAA;IACAsC,GAAA,EAAK,CAAC;MAAED,OAAA,EAASc,QAAA;MAAUZ;IAAA,GAAYD,GAAG;EAAA,GACtCG,MAAA;IAEJc,QAAA,iBAAAH,GAAA,CAACjB,IAAA,EAAAmB,aAAA;MAAKlB;IAAA,GAAkCQ,SAAA,CAAU,MAAM,EAAG;EAAA,GAC7D;AAEJ,CAAC;AAEDrB,iBAAA,CAAkBiC,WAAA,GAAc;AAChCjC,iBAAA,CAAkBwB,OAAA,GAAUA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}