{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { keys } from '../../core/utils/keys/keys.mjs';\nimport '../../core/utils/units-converters/rem.mjs';\nimport { filterProps } from '../../core/utils/filter-props/filter-props.mjs';\nimport 'react';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { getSortedBreakpoints } from '../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport { getBaseValue } from '../../core/utils/get-base-value/get-base-value.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { InlineStyles } from '../../core/InlineStyles/InlineStyles.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nfunction GridVariables({\n  gutter,\n  selector,\n  breakpoints,\n  type\n}) {\n  const theme = useMantineTheme();\n  const _breakpoints = breakpoints || theme.breakpoints;\n  const baseStyles = filterProps({\n    \"--grid-gutter\": getSpacing(getBaseValue(gutter))\n  });\n  const queries = keys(_breakpoints).reduce((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof gutter === \"object\" && gutter[breakpoint] !== void 0) {\n      acc[breakpoint][\"--grid-gutter\"] = getSpacing(gutter[breakpoint]);\n    }\n    return acc;\n  }, {});\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(breakpoint => keys(queries[breakpoint.value]).length > 0);\n  const values = sortedBreakpoints.map(breakpoint => ({\n    query: type === \"container\" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,\n    styles: queries[breakpoint.value]\n  }));\n  return /* @__PURE__ */jsx(InlineStyles, {\n    styles: baseStyles,\n    media: type === \"container\" ? void 0 : values,\n    container: type === \"container\" ? values : void 0,\n    selector\n  });\n}\nexport { GridVariables };","map":{"version":3,"names":["GridVariables","gutter","selector","breakpoints","type","theme","useMantineTheme","_breakpoints","baseStyles","filterProps","getSpacing","getBaseValue","queries","keys","reduce","acc","breakpoint","sortedBreakpoints","getSortedBreakpoints","filter","value","length","values","map","query","styles","jsx","InlineStyles","media","container"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Grid/GridVariables.tsx"],"sourcesContent":["import {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  getSpacing,\n  InlineStyles,\n  keys,\n  useMantineTheme,\n} from '../../core';\nimport type { GridProps } from './Grid';\nimport type { GridBreakpoints } from './Grid.context';\n\ninterface GridVariablesProps extends GridProps {\n  selector: string;\n}\n\nexport function GridVariables({ gutter, selector, breakpoints, type }: GridVariablesProps) {\n  const theme = useMantineTheme();\n  const _breakpoints = breakpoints || theme.breakpoints;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--grid-gutter': getSpacing(getBaseValue(gutter)),\n  });\n\n  const queries = keys(_breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof gutter === 'object' && gutter[breakpoint] !== undefined) {\n        acc[breakpoint]['--grid-gutter'] = getSpacing(gutter[breakpoint]);\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const values = sortedBreakpoints.map((breakpoint) => ({\n    query:\n      type === 'container'\n        ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value as keyof GridBreakpoints]})`\n        : `(min-width: ${_breakpoints[breakpoint.value as keyof GridBreakpoints]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return (\n    <InlineStyles\n      styles={baseStyles}\n      media={type === 'container' ? undefined : values}\n      container={type === 'container' ? values : undefined}\n      selector={selector}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAgBO,SAASA,cAAc;EAAEC,MAAA;EAAQC,QAAA;EAAUC,WAAA;EAAaC;AAAA,CAAK,EAAuB;EACzF,MAAMC,KAAA,GAAQC,eAAA,EAAgB;EAC9B,MAAMC,YAAA,GAAeJ,WAAA,IAAeE,KAAA,CAAMF,WAAA;EAE1C,MAAMK,UAAA,GAAiDC,WAAA,CAAY;IACjE,iBAAiBC,UAAA,CAAWC,YAAA,CAAaV,MAAM,CAAC;EAAA,CACjD;EAED,MAAMW,OAAA,GAAUC,IAAA,CAAKN,YAAY,EAAEO,MAAA,CACjC,CAACC,GAAA,EAAKC,UAAA,KAAe;IACnB,IAAI,CAACD,GAAA,CAAIC,UAAU,GAAG;MACpBD,GAAA,CAAIC,UAAU,IAAI,EAAC;IACrB;IAEA,IAAI,OAAOf,MAAA,KAAW,YAAYA,MAAA,CAAOe,UAAU,MAAM,QAAW;MAClED,GAAA,CAAIC,UAAU,EAAE,eAAe,IAAIN,UAAA,CAAWT,MAAA,CAAOe,UAAU,CAAC;IAClE;IAEA,OAAOD,GAAA;EACT,GACA,EAAC,CACH;EAEA,MAAME,iBAAA,GAAoBC,oBAAA,CAAqBL,IAAA,CAAKD,OAAO,GAAGL,YAAY,EAAEY,MAAA,CACzEH,UAAA,IAAeH,IAAA,CAAKD,OAAA,CAAQI,UAAA,CAAWI,KAAK,CAAC,EAAEC,MAAA,GAAS,EAC3D;EAEA,MAAMC,MAAA,GAASL,iBAAA,CAAkBM,GAAA,CAAKP,UAAA,KAAgB;IACpDQ,KAAA,EACEpB,IAAA,KAAS,cACL,4BAA4BG,YAAA,CAAaS,UAAA,CAAWI,KAA8B,CAAC,MACnF,eAAeb,YAAA,CAAaS,UAAA,CAAWI,KAA8B,CAAC;IAC5EK,MAAA,EAAQb,OAAA,CAAQI,UAAA,CAAWI,KAAK;EAAA,CAClC,CAAE;EAEF,sBACEM,GAAA,CAACC,YAAA;IACCF,MAAA,EAAQjB,UAAA;IACRoB,KAAA,EAAOxB,IAAA,KAAS,cAAc,SAAYkB,MAAA;IAC1CO,SAAA,EAAWzB,IAAA,KAAS,cAAckB,MAAA,GAAS;IAC3CpB;EAAA,EACF;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}