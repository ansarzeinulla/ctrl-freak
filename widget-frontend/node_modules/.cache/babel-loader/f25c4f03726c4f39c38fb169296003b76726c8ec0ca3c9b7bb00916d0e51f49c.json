{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"children\", \"refProp\", \"withKeyboardNavigation\", \"withAriaAttributes\", \"withExpandedAttribute\", \"targetType\", \"autoComplete\"];\nimport { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport '../../../core/utils/units-converters/rem.mjs';\nimport { isElement } from '../../../core/utils/is-element/is-element.mjs';\nimport 'react/jsx-runtime';\nimport { getRefProp } from '../../../core/utils/get-ref-prop/get-ref-prop.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useComboboxContext } from '../Combobox.context.mjs';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props.mjs';\nconst defaultProps = {\n  refProp: \"ref\",\n  targetType: \"input\",\n  withKeyboardNavigation: true,\n  withAriaAttributes: true,\n  withExpandedAttribute: false,\n  autoComplete: \"off\"\n};\nconst ComboboxEventsTarget = factory((props, ref) => {\n  const _useProps = useProps(\"ComboboxEventsTarget\", defaultProps, props),\n    {\n      children,\n      refProp,\n      withKeyboardNavigation,\n      withAriaAttributes,\n      withExpandedAttribute,\n      targetType,\n      autoComplete\n    } = _useProps,\n    others = _objectWithoutProperties(_useProps, _excluded);\n  if (!isElement(children)) {\n    throw new Error(\"Combobox.EventsTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const ctx = useComboboxContext();\n  const targetProps = useComboboxTargetProps({\n    targetType,\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute,\n    onKeyDown: children.props.onKeyDown,\n    autoComplete\n  });\n  return cloneElement(children, _objectSpread(_objectSpread(_objectSpread({}, targetProps), others), {}, {\n    [refProp]: useMergedRef(ref, ctx.store.targetRef, getRefProp(children))\n  }));\n});\nComboboxEventsTarget.displayName = \"@mantine/core/ComboboxEventsTarget\";\nexport { ComboboxEventsTarget };","map":{"version":3,"names":["defaultProps","refProp","targetType","withKeyboardNavigation","withAriaAttributes","withExpandedAttribute","autoComplete","ComboboxEventsTarget","factory","props","ref","_useProps","useProps","children","others","_objectWithoutProperties","_excluded","isElement","Error","ctx","useComboboxContext","targetProps","useComboboxTargetProps","onKeyDown","cloneElement","_objectSpread","useMergedRef","store","targetRef","getRefProp","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Combobox/ComboboxEventsTarget/ComboboxEventsTarget.tsx"],"sourcesContent":["import { cloneElement } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { factory, Factory, getRefProp, isElement, useProps } from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\nimport { useComboboxTargetProps } from '../use-combobox-target-props/use-combobox-target-props';\n\nexport interface ComboboxEventsTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop is used to access element ref */\n  refProp?: string;\n\n  /** If set, the component responds to the keyboard events @default `true` */\n  withKeyboardNavigation?: boolean;\n\n  /** If set, the target has `aria-` attributes @default `true` */\n  withAriaAttributes?: boolean;\n\n  /** If set, the target has `aria-expanded` attribute @default `false` */\n  withExpandedAttribute?: boolean;\n\n  /** Determines which events should be handled by the target element.\n   * `button` target type handles `Space` and `Enter` keys to toggle dropdown opened state.\n   * @default `input`\n   * */\n  targetType?: 'button' | 'input';\n\n  /** Input autocomplete attribute */\n  autoComplete?: string;\n}\n\nconst defaultProps = {\n  refProp: 'ref',\n  targetType: 'input',\n  withKeyboardNavigation: true,\n  withAriaAttributes: true,\n  withExpandedAttribute: false,\n  autoComplete: 'off',\n} satisfies Partial<ComboboxEventsTargetProps>;\n\nexport type ComboboxEventsTargetFactory = Factory<{\n  props: ComboboxEventsTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const ComboboxEventsTarget = factory<ComboboxEventsTargetFactory>((props, ref) => {\n  const {\n    children,\n    refProp,\n    withKeyboardNavigation,\n    withAriaAttributes,\n    withExpandedAttribute,\n    targetType,\n    autoComplete,\n    ...others\n  } = useProps('ComboboxEventsTarget', defaultProps, props);\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Combobox.EventsTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const ctx = useComboboxContext();\n  const targetProps = useComboboxTargetProps({\n    targetType,\n    withAriaAttributes,\n    withKeyboardNavigation,\n    withExpandedAttribute,\n    onKeyDown: (children.props as any).onKeyDown,\n    autoComplete,\n  });\n\n  return cloneElement(children, {\n    ...targetProps,\n    ...others,\n    [refProp]: useMergedRef(ref, ctx.store.targetRef, getRefProp(children)),\n  });\n});\n\nComboboxEventsTarget.displayName = '@mantine/core/ComboboxEventsTarget';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAgCA,MAAMA,YAAA,GAAe;EACnBC,OAAA,EAAS;EACTC,UAAA,EAAY;EACZC,sBAAA,EAAwB;EACxBC,kBAAA,EAAoB;EACpBC,qBAAA,EAAuB;EACvBC,YAAA,EAAc;AAChB;AAQO,MAAMC,oBAAA,GAAuBC,OAAA,CAAqC,CAACC,KAAA,EAAOC,GAAA,KAAQ;EACvF,MAAAC,SAAA,GASIC,QAAA,CAAS,wBAAwBZ,YAAA,EAAcS,KAAK;IATlD;MACJI,QAAA;MACAZ,OAAA;MACAE,sBAAA;MACAC,kBAAA;MACAC,qBAAA;MACAH,UAAA;MACAI;IACG,CACL,GAAAK,SAAA;IADKG,MAAA,GAAAC,wBAAA,CAAAJ,SAAA,EAAAK,SAAA;EAGL,IAAI,CAACC,SAAA,CAAUJ,QAAQ,GAAG;IACxB,MAAM,IAAIK,KAAA,CACR,0KACF;EACF;EAEA,MAAMC,GAAA,GAAMC,kBAAA,EAAmB;EAC/B,MAAMC,WAAA,GAAcC,sBAAA,CAAuB;IACzCpB,UAAA;IACAE,kBAAA;IACAD,sBAAA;IACAE,qBAAA;IACAkB,SAAA,EAAYV,QAAA,CAASJ,KAAA,CAAcc,SAAA;IACnCjB;EAAA,CACD;EAED,OAAOkB,YAAA,CAAaX,QAAA,EAAAY,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACfJ,WAAA,GACAP,MAAA;IACH,CAACb,OAAO,GAAGyB,YAAA,CAAahB,GAAA,EAAKS,GAAA,CAAIQ,KAAA,CAAMC,SAAA,EAAWC,UAAA,CAAWhB,QAAQ,CAAC;EAAA,EACvE;AACH,CAAC;AAEDN,oBAAA,CAAqBuB,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}