{"ast":null,"code":"'use client';\n\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport { useIsomorphicEffect } from '@mantine/hooks';\nfunction setColorSchemeAttribute(colorScheme, getRootElement) {\n  const hasDarkColorScheme = typeof window !== \"undefined\" && \"matchMedia\" in window && window.matchMedia(\"(prefers-color-scheme: dark)\")?.matches;\n  const computedColorScheme = colorScheme !== \"auto\" ? colorScheme : hasDarkColorScheme ? \"dark\" : \"light\";\n  getRootElement()?.setAttribute(\"data-mantine-color-scheme\", computedColorScheme);\n}\nfunction useProviderColorScheme({\n  manager,\n  defaultColorScheme,\n  getRootElement,\n  forceColorScheme\n}) {\n  const media = useRef(null);\n  const [value, setValue] = useState(() => manager.get(defaultColorScheme));\n  const colorSchemeValue = forceColorScheme || value;\n  const setColorScheme = useCallback(colorScheme => {\n    if (!forceColorScheme) {\n      setColorSchemeAttribute(colorScheme, getRootElement);\n      setValue(colorScheme);\n      manager.set(colorScheme);\n    }\n  }, [manager.set, colorSchemeValue, forceColorScheme]);\n  const clearColorScheme = useCallback(() => {\n    setValue(defaultColorScheme);\n    setColorSchemeAttribute(defaultColorScheme, getRootElement);\n    manager.clear();\n  }, [manager.clear, defaultColorScheme]);\n  useEffect(() => {\n    manager.subscribe(setColorScheme);\n    return manager.unsubscribe;\n  }, [manager.subscribe, manager.unsubscribe]);\n  useIsomorphicEffect(() => {\n    setColorSchemeAttribute(manager.get(defaultColorScheme), getRootElement);\n  }, []);\n  useEffect(() => {\n    if (forceColorScheme) {\n      setColorSchemeAttribute(forceColorScheme, getRootElement);\n      return () => {};\n    }\n    if (forceColorScheme === void 0) {\n      setColorSchemeAttribute(value, getRootElement);\n    }\n    if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\n      media.current = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    }\n    const listener = event => {\n      if (value === \"auto\") {\n        setColorSchemeAttribute(event.matches ? \"dark\" : \"light\", getRootElement);\n      }\n    };\n    media.current?.addEventListener(\"change\", listener);\n    return () => media.current?.removeEventListener(\"change\", listener);\n  }, [value, forceColorScheme]);\n  return {\n    colorScheme: colorSchemeValue,\n    setColorScheme,\n    clearColorScheme\n  };\n}\nexport { useProviderColorScheme };","map":{"version":3,"names":["setColorSchemeAttribute","colorScheme","getRootElement","hasDarkColorScheme","window","matchMedia","matches","computedColorScheme","setAttribute","useProviderColorScheme","manager","defaultColorScheme","forceColorScheme","media","useRef","value","setValue","useState","get","colorSchemeValue","setColorScheme","useCallback","set","clearColorScheme","clear","useEffect","subscribe","unsubscribe","useIsomorphicEffect","current","listener","event","addEventListener","removeEventListener"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/core/MantineProvider/use-mantine-color-scheme/use-provider-color-scheme.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useIsomorphicEffect } from '@mantine/hooks';\nimport type { MantineColorSchemeManager } from '../color-scheme-managers';\nimport type { MantineColorScheme } from '../theme.types';\n\nfunction setColorSchemeAttribute(\n  colorScheme: MantineColorScheme,\n  getRootElement: () => HTMLElement | undefined\n) {\n  const hasDarkColorScheme =\n    typeof window !== 'undefined' &&\n    'matchMedia' in window &&\n    window.matchMedia('(prefers-color-scheme: dark)')?.matches;\n\n  const computedColorScheme =\n    colorScheme !== 'auto' ? colorScheme : hasDarkColorScheme ? 'dark' : 'light';\n  getRootElement()?.setAttribute('data-mantine-color-scheme', computedColorScheme);\n}\n\ntype MediaQueryCallback = (event: { matches: boolean; media: string }) => void;\n\ninterface UseProviderColorSchemeOptions {\n  manager: MantineColorSchemeManager;\n  defaultColorScheme: MantineColorScheme;\n  forceColorScheme: 'light' | 'dark' | undefined;\n  getRootElement: () => HTMLElement | undefined;\n}\n\nexport function useProviderColorScheme({\n  manager,\n  defaultColorScheme,\n  getRootElement,\n  forceColorScheme,\n}: UseProviderColorSchemeOptions) {\n  const media = useRef<MediaQueryList>(null);\n  const [value, setValue] = useState(() => manager.get(defaultColorScheme));\n  const colorSchemeValue = forceColorScheme || value;\n\n  const setColorScheme = useCallback(\n    (colorScheme: MantineColorScheme) => {\n      if (!forceColorScheme) {\n        setColorSchemeAttribute(colorScheme, getRootElement);\n        setValue(colorScheme);\n        manager.set(colorScheme);\n      }\n    },\n    [manager.set, colorSchemeValue, forceColorScheme]\n  );\n\n  const clearColorScheme = useCallback(() => {\n    setValue(defaultColorScheme);\n    setColorSchemeAttribute(defaultColorScheme, getRootElement);\n    manager.clear();\n  }, [manager.clear, defaultColorScheme]);\n\n  useEffect(() => {\n    manager.subscribe(setColorScheme);\n    return manager.unsubscribe;\n  }, [manager.subscribe, manager.unsubscribe]);\n\n  useIsomorphicEffect(() => {\n    setColorSchemeAttribute(manager.get(defaultColorScheme), getRootElement);\n  }, []);\n\n  useEffect(() => {\n    if (forceColorScheme) {\n      setColorSchemeAttribute(forceColorScheme, getRootElement);\n      return () => {};\n    }\n\n    if (forceColorScheme === undefined) {\n      setColorSchemeAttribute(value, getRootElement);\n    }\n\n    if (typeof window !== 'undefined' && 'matchMedia' in window) {\n      media.current = window.matchMedia('(prefers-color-scheme: dark)');\n    }\n\n    const listener: MediaQueryCallback = (event) => {\n      if (value === 'auto') {\n        setColorSchemeAttribute(event.matches ? 'dark' : 'light', getRootElement);\n      }\n    };\n\n    media.current?.addEventListener('change', listener);\n    return () => media.current?.removeEventListener('change', listener);\n  }, [value, forceColorScheme]);\n\n  return { colorScheme: colorSchemeValue, setColorScheme, clearColorScheme };\n}\n"],"mappings":";;;;AAKA,SAASA,wBACPC,WAAA,EACAC,cAAA,EACA;EACA,MAAMC,kBAAA,GACJ,OAAOC,MAAA,KAAW,eAClB,gBAAgBA,MAAA,IAChBA,MAAA,CAAOC,UAAA,CAAW,8BAA8B,GAAGC,OAAA;EAErD,MAAMC,mBAAA,GACJN,WAAA,KAAgB,SAASA,WAAA,GAAcE,kBAAA,GAAqB,SAAS;EACvED,cAAA,EAAe,EAAGM,YAAA,CAAa,6BAA6BD,mBAAmB;AACjF;AAWO,SAASE,uBAAuB;EACrCC,OAAA;EACAC,kBAAA;EACAT,cAAA;EACAU;AACF,GAAkC;EAChC,MAAMC,KAAA,GAAQC,MAAA,CAAuB,IAAI;EACzC,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAIC,QAAA,CAAS,MAAMP,OAAA,CAAQQ,GAAA,CAAIP,kBAAkB,CAAC;EACxE,MAAMQ,gBAAA,GAAmBP,gBAAA,IAAoBG,KAAA;EAE7C,MAAMK,cAAA,GAAiBC,WAAA,CACpBpB,WAAA,IAAoC;IACnC,IAAI,CAACW,gBAAA,EAAkB;MACrBZ,uBAAA,CAAwBC,WAAA,EAAaC,cAAc;MACnDc,QAAA,CAASf,WAAW;MACpBS,OAAA,CAAQY,GAAA,CAAIrB,WAAW;IACzB;EACF,GACA,CAACS,OAAA,CAAQY,GAAA,EAAKH,gBAAA,EAAkBP,gBAAgB,EAClD;EAEA,MAAMW,gBAAA,GAAmBF,WAAA,CAAY,MAAM;IACzCL,QAAA,CAASL,kBAAkB;IAC3BX,uBAAA,CAAwBW,kBAAA,EAAoBT,cAAc;IAC1DQ,OAAA,CAAQc,KAAA,EAAM;EAChB,GAAG,CAACd,OAAA,CAAQc,KAAA,EAAOb,kBAAkB,CAAC;EAEtCc,SAAA,CAAU,MAAM;IACdf,OAAA,CAAQgB,SAAA,CAAUN,cAAc;IAChC,OAAOV,OAAA,CAAQiB,WAAA;EACjB,GAAG,CAACjB,OAAA,CAAQgB,SAAA,EAAWhB,OAAA,CAAQiB,WAAW,CAAC;EAE3CC,mBAAA,CAAoB,MAAM;IACxB5B,uBAAA,CAAwBU,OAAA,CAAQQ,GAAA,CAAIP,kBAAkB,GAAGT,cAAc;EACzE,GAAG,EAAE;EAELuB,SAAA,CAAU,MAAM;IACd,IAAIb,gBAAA,EAAkB;MACpBZ,uBAAA,CAAwBY,gBAAA,EAAkBV,cAAc;MACxD,OAAO,MAAM,CAAC;IAChB;IAEA,IAAIU,gBAAA,KAAqB,QAAW;MAClCZ,uBAAA,CAAwBe,KAAA,EAAOb,cAAc;IAC/C;IAEA,IAAI,OAAOE,MAAA,KAAW,eAAe,gBAAgBA,MAAA,EAAQ;MAC3DS,KAAA,CAAMgB,OAAA,GAAUzB,MAAA,CAAOC,UAAA,CAAW,8BAA8B;IAClE;IAEA,MAAMyB,QAAA,GAAgCC,KAAA,IAAU;MAC9C,IAAIhB,KAAA,KAAU,QAAQ;QACpBf,uBAAA,CAAwB+B,KAAA,CAAMzB,OAAA,GAAU,SAAS,SAASJ,cAAc;MAC1E;IACF;IAEAW,KAAA,CAAMgB,OAAA,EAASG,gBAAA,CAAiB,UAAUF,QAAQ;IAClD,OAAO,MAAMjB,KAAA,CAAMgB,OAAA,EAASI,mBAAA,CAAoB,UAAUH,QAAQ;EACpE,GAAG,CAACf,KAAA,EAAOH,gBAAgB,CAAC;EAE5B,OAAO;IAAEX,WAAA,EAAakB,gBAAA;IAAkBC,cAAA;IAAgBG;EAAA,CAAiB;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}