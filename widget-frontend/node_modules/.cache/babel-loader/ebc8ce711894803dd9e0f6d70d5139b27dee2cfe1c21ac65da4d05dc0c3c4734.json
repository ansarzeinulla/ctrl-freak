{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect, useCallback } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getPreviousIndex, getNextIndex, getFirstIndex } from './get-index/get-virtualized-index.mjs';\nfunction useVirtualizedCombobox({\n  defaultOpened,\n  opened,\n  onOpenedChange,\n  onDropdownClose,\n  onDropdownOpen,\n  loop = true,\n  totalOptionsCount,\n  isOptionDisabled = () => false,\n  getOptionId,\n  selectedOptionIndex,\n  setSelectedOptionIndex,\n  activeOptionIndex,\n  onSelectedOptionSubmit\n} = {\n  totalOptionsCount: 0,\n  getOptionId: () => null,\n  selectedOptionIndex: 1,\n  setSelectedOptionIndex: () => {},\n  onSelectedOptionSubmit: () => {}\n}) {\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange\n  });\n  const listId = useRef(null);\n  const searchRef = useRef(null);\n  const targetRef = useRef(null);\n  const focusSearchTimeout = useRef(-1);\n  const focusTargetTimeout = useRef(-1);\n  const openDropdown = () => {\n    if (!dropdownOpened) {\n      setDropdownOpened(true);\n      onDropdownOpen?.();\n    }\n  };\n  const closeDropdown = () => {\n    if (dropdownOpened) {\n      setDropdownOpened(false);\n      onDropdownClose?.();\n    }\n  };\n  const toggleDropdown = () => {\n    if (dropdownOpened) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n  const selectOption = index => {\n    const nextIndex = index >= totalOptionsCount ? 0 : index < 0 ? totalOptionsCount - 1 : index;\n    setSelectedOptionIndex(nextIndex);\n    return getOptionId(nextIndex);\n  };\n  const selectActiveOption = () => selectOption(activeOptionIndex ?? 0);\n  const selectNextOption = () => selectOption(getNextIndex({\n    currentIndex: selectedOptionIndex,\n    isOptionDisabled,\n    totalOptionsCount,\n    loop\n  }));\n  const selectPreviousOption = () => selectOption(getPreviousIndex({\n    currentIndex: selectedOptionIndex,\n    isOptionDisabled,\n    totalOptionsCount,\n    loop\n  }));\n  const selectFirstOption = () => selectOption(getFirstIndex({\n    isOptionDisabled,\n    totalOptionsCount\n  }));\n  const resetSelectedOption = () => {\n    setSelectedOptionIndex(-1);\n  };\n  const clickSelectedOption = () => {\n    onSelectedOptionSubmit?.(selectedOptionIndex);\n  };\n  const setListId = id => {\n    listId.current = id;\n  };\n  const focusSearchInput = () => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current.focus(), 0);\n  };\n  const focusTarget = () => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current.focus(), 0);\n  };\n  useEffect(() => () => {\n    window.clearTimeout(focusSearchTimeout.current);\n    window.clearTimeout(focusTargetTimeout.current);\n  }, []);\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex, []);\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n    selectedOptionIndex,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex: () => {},\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n    searchRef,\n    focusSearchInput,\n    targetRef,\n    focusTarget\n  };\n}\nexport { useVirtualizedCombobox };","map":{"version":3,"names":["useVirtualizedCombobox","defaultOpened","opened","onOpenedChange","onDropdownClose","onDropdownOpen","loop","totalOptionsCount","isOptionDisabled","getOptionId","selectedOptionIndex","setSelectedOptionIndex","activeOptionIndex","onSelectedOptionSubmit","dropdownOpened","setDropdownOpened","useUncontrolled","value","defaultValue","finalValue","onChange","listId","useRef","searchRef","targetRef","focusSearchTimeout","focusTargetTimeout","openDropdown","closeDropdown","toggleDropdown","selectOption","index","nextIndex","selectActiveOption","selectNextOption","getNextIndex","currentIndex","selectPreviousOption","getPreviousIndex","selectFirstOption","getFirstIndex","resetSelectedOption","clickSelectedOption","setListId","id","current","focusSearchInput","window","setTimeout","focus","focusTarget","useEffect","clearTimeout","getSelectedOptionIndex","useCallback","updateSelectedOptionIndex"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Combobox/use-combobox/use-virtualized-combobox.ts"],"sourcesContent":["// WIP, not planned to be released in 7.0, maybe in 7.x\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useUncontrolled } from '@mantine/hooks';\nimport { getFirstIndex, getNextIndex, getPreviousIndex } from './get-index/get-virtualized-index';\nimport { ComboboxStore } from './use-combobox';\n\ninterface UseComboboxOptions {\n  /** Default value for `dropdownOpened`, `false` by default */\n  defaultOpened?: boolean;\n\n  /** Controlled `dropdownOpened` state */\n  opened?: boolean;\n\n  /** Called when `dropdownOpened` state changes */\n  onOpenedChange?: (opened: boolean) => void;\n\n  /** Called when dropdown closes */\n  onDropdownClose?: () => void;\n\n  /** Called when dropdown opens */\n  onDropdownOpen?: () => void;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first), `true` by default */\n  loop?: boolean;\n\n  /** Function to determine whether the option is disabled */\n  isOptionDisabled?: (optionIndex: number) => boolean;\n\n  totalOptionsCount: number;\n\n  getOptionId: (index: number) => string | null;\n\n  selectedOptionIndex: number;\n\n  setSelectedOptionIndex: (index: number) => void;\n\n  activeOptionIndex?: number;\n\n  onSelectedOptionSubmit: (index: number) => void;\n}\n\nexport function useVirtualizedCombobox(\n  {\n    defaultOpened,\n    opened,\n    onOpenedChange,\n    onDropdownClose,\n    onDropdownOpen,\n    loop = true,\n    totalOptionsCount,\n    isOptionDisabled = () => false,\n    getOptionId,\n    selectedOptionIndex,\n    setSelectedOptionIndex,\n    activeOptionIndex,\n    onSelectedOptionSubmit,\n  }: UseComboboxOptions = {\n    totalOptionsCount: 0,\n    getOptionId: () => null,\n    selectedOptionIndex: 1,\n    setSelectedOptionIndex: () => {},\n    onSelectedOptionSubmit: () => {},\n  }\n): ComboboxStore {\n  const [dropdownOpened, setDropdownOpened] = useUncontrolled({\n    value: opened,\n    defaultValue: defaultOpened,\n    finalValue: false,\n    onChange: onOpenedChange,\n  });\n\n  const listId = useRef<string | null>(null);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n  const targetRef = useRef<HTMLElement | null>(null);\n  const focusSearchTimeout = useRef<number>(-1);\n  const focusTargetTimeout = useRef<number>(-1);\n\n  const openDropdown = () => {\n    if (!dropdownOpened) {\n      setDropdownOpened(true);\n      onDropdownOpen?.();\n    }\n  };\n\n  const closeDropdown = () => {\n    if (dropdownOpened) {\n      setDropdownOpened(false);\n      onDropdownClose?.();\n    }\n  };\n\n  const toggleDropdown = () => {\n    if (dropdownOpened) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n\n  const selectOption = (index: number) => {\n    const nextIndex = index >= totalOptionsCount ? 0 : index < 0 ? totalOptionsCount - 1 : index;\n    setSelectedOptionIndex(nextIndex);\n    return getOptionId(nextIndex);\n  };\n\n  const selectActiveOption = () => selectOption(activeOptionIndex ?? 0);\n\n  const selectNextOption = () =>\n    selectOption(\n      getNextIndex({ currentIndex: selectedOptionIndex, isOptionDisabled, totalOptionsCount, loop })\n    );\n\n  const selectPreviousOption = () =>\n    selectOption(\n      getPreviousIndex({\n        currentIndex: selectedOptionIndex,\n        isOptionDisabled,\n        totalOptionsCount,\n        loop,\n      })\n    );\n\n  const selectFirstOption = () =>\n    selectOption(getFirstIndex({ isOptionDisabled, totalOptionsCount }));\n\n  const resetSelectedOption = () => {\n    setSelectedOptionIndex(-1);\n  };\n\n  const clickSelectedOption = () => {\n    onSelectedOptionSubmit?.(selectedOptionIndex);\n  };\n\n  const setListId = (id: string) => {\n    listId.current = id;\n  };\n\n  const focusSearchInput = () => {\n    focusSearchTimeout.current = window.setTimeout(() => searchRef.current!.focus(), 0);\n  };\n\n  const focusTarget = () => {\n    focusTargetTimeout.current = window.setTimeout(() => targetRef.current!.focus(), 0);\n  };\n\n  useEffect(\n    () => () => {\n      window.clearTimeout(focusSearchTimeout.current);\n      window.clearTimeout(focusTargetTimeout.current);\n    },\n    []\n  );\n\n  const getSelectedOptionIndex = useCallback(() => selectedOptionIndex, []);\n\n  return {\n    dropdownOpened,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n\n    selectedOptionIndex,\n    getSelectedOptionIndex,\n    selectOption,\n    selectFirstOption,\n    selectActiveOption,\n    selectNextOption,\n    selectPreviousOption,\n    resetSelectedOption,\n    updateSelectedOptionIndex: () => {},\n\n    listId: listId.current,\n    setListId,\n    clickSelectedOption,\n\n    searchRef,\n    focusSearchInput,\n\n    targetRef,\n    focusTarget,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}