{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"classNames\", \"className\", \"style\", \"styles\", \"unstyled\", \"vars\", \"color\", \"orientation\", \"label\", \"labelPosition\", \"mod\", \"attributes\"];\nimport { jsx } from 'react/jsx-runtime';\nimport '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Divider.module.css.mjs';\nconst defaultProps = {\n  orientation: \"horizontal\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    color,\n    variant,\n    size\n  } = _ref;\n  return {\n    root: {\n      \"--divider-color\": color ? getThemeColor(color, theme) : void 0,\n      \"--divider-border-style\": variant,\n      \"--divider-size\": getSize(size, \"divider-size\")\n    }\n  };\n});\nconst Divider = factory((_props, ref) => {\n  const props = useProps(\"Divider\", defaultProps, _props);\n  const {\n      classNames,\n      className,\n      style,\n      styles,\n      unstyled,\n      vars,\n      color,\n      orientation,\n      label,\n      labelPosition,\n      mod,\n      attributes\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  const getStyles = useStyles({\n    name: \"Divider\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread(_objectSpread({\n    ref,\n    mod: [{\n      orientation,\n      \"with-label\": !!label\n    }, mod]\n  }, getStyles(\"root\")), others), {}, {\n    role: \"separator\",\n    children: label && /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread({\n      component: \"span\",\n      mod: {\n        position: labelPosition\n      }\n    }, getStyles(\"label\")), {}, {\n      children: label\n    }))\n  }));\n});\nDivider.classes = classes;\nDivider.displayName = \"@mantine/core/Divider\";\nexport { Divider };","map":{"version":3,"names":["defaultProps","orientation","varsResolver","createVarsResolver","theme","_ref","color","variant","size","root","getThemeColor","getSize","Divider","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","label","labelPosition","mod","attributes","others","_objectWithoutProperties","_excluded","getStyles","useStyles","name","classes","jsx","Box","_objectSpread","role","children","component","position","displayName"],"sources":["/Users/ansarzeinulla/Desktop/negro/widget-frontend/node_modules/@mantine/core/src/components/Divider/Divider.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineSize,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Divider.module.css';\n\nexport type DividerStylesNames = 'root' | 'label';\nexport type DividerVariant = 'solid' | 'dashed' | 'dotted';\nexport type DividerCssVariables = {\n  root: '--divider-color' | '--divider-border-style' | '--divider-size';\n};\n\nexport interface DividerProps\n  extends BoxProps,\n    StylesApiProps<DividerFactory>,\n    ElementProps<'div'> {\n  /** Key of `theme.colors` or any valid CSS color value, by default value depends on color scheme */\n  color?: MantineColor;\n\n  /** Controls width/height (depends on orientation) @default `'xs'` */\n  size?: MantineSize | number | (string & {});\n\n  /** Divider label, visible only when `orientation` is `horizontal` */\n  label?: React.ReactNode;\n\n  /** Controls label position @default `'center'` */\n  labelPosition?: 'left' | 'center' | 'right';\n\n  /** Controls orientation @default `'horizontal'` */\n  orientation?: 'horizontal' | 'vertical';\n}\n\nexport type DividerFactory = Factory<{\n  props: DividerProps;\n  ref: HTMLDivElement;\n  stylesNames: DividerStylesNames;\n  vars: DividerCssVariables;\n  variant: DividerVariant;\n}>;\n\nconst defaultProps = {\n  orientation: 'horizontal',\n} satisfies Partial<DividerProps>;\n\nconst varsResolver = createVarsResolver<DividerFactory>((theme, { color, variant, size }) => ({\n  root: {\n    '--divider-color': color ? getThemeColor(color, theme) : undefined,\n    '--divider-border-style': variant,\n    '--divider-size': getSize(size, 'divider-size'),\n  },\n}));\n\nexport const Divider = factory<DividerFactory>((_props, ref) => {\n  const props = useProps('Divider', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    orientation,\n    label,\n    labelPosition,\n    mod,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<DividerFactory>({\n    name: 'Divider',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box\n      ref={ref}\n      mod={[{ orientation, 'with-label': !!label }, mod]}\n      {...getStyles('root')}\n      {...others}\n      role=\"separator\"\n    >\n      {label && (\n        <Box component=\"span\" mod={{ position: labelPosition }} {...getStyles('label')}>\n          {label}\n        </Box>\n      )}\n    </Box>\n  );\n});\n\nDivider.classes = classes;\nDivider.displayName = '@mantine/core/Divider';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAmDA,MAAMA,YAAA,GAAe;EACnBC,WAAA,EAAa;AACf;AAEA,MAAMC,YAAA,GAAeC,kBAAA,CAAmC,CAACC,KAAA,EAAAC,IAAA;EAAA,IAAO;IAAEC,KAAA;IAAOC,OAAA;IAASC;EAAA,CAAK,GAAAH,IAAA;EAAA,OAAO;IAC5FI,IAAA,EAAM;MACJ,mBAAmBH,KAAA,GAAQI,aAAA,CAAcJ,KAAA,EAAOF,KAAK,IAAI;MACzD,0BAA0BG,OAAA;MAC1B,kBAAkBI,OAAA,CAAQH,IAAA,EAAM,cAAc;IAAA;EAElD;AAAA,CAAE;AAEK,MAAMI,OAAA,GAAUC,OAAA,CAAwB,CAACC,MAAA,EAAQC,GAAA,KAAQ;EAC9D,MAAMC,KAAA,GAAQC,QAAA,CAAS,WAAWjB,YAAA,EAAcc,MAAM;EACtD,MAAM;MACJI,UAAA;MACAC,SAAA;MACAC,KAAA;MACAC,MAAA;MACAC,QAAA;MACAC,IAAA;MACAjB,KAAA;MACAL,WAAA;MACAuB,KAAA;MACAC,aAAA;MACAC,GAAA;MACAC;IACG,CACL,GAAIX,KAAA;IADCY,MAAA,GAAAC,wBAAA,CACDb,KAAA,EAAAc,SAAA;EAEJ,MAAMC,SAAA,GAAYC,SAAA,CAA0B;IAC1CC,IAAA,EAAM;IACNC,OAAA;IACAlB,KAAA;IACAG,SAAA;IACAC,KAAA;IACAF,UAAA;IACAG,MAAA;IACAC,QAAA;IACAK,UAAA;IACAJ,IAAA;IACArB;EAAA,CACD;EAED,sBACEiC,GAAA,CAACC,GAAA,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA;IACCtB,GAAA;IACAW,GAAA,EAAK,CAAC;MAAEzB,WAAA;MAAa,cAAc,CAAC,CAACuB;IAAA,CAAM,EAAGE,GAAG;EAAA,GAC7CK,SAAA,CAAU,MAAM,IAChBH,MAAA;IACJU,IAAA,EAAK;IAEJC,QAAA,EAAAf,KAAA,mBACCW,GAAA,CAACC,GAAA,EAAAC,aAAA,CAAAA,aAAA;MAAIG,SAAA,EAAU;MAAOd,GAAA,EAAK;QAAEe,QAAA,EAAUhB;MAAA;IAAc,GAAOM,SAAA,CAAU,OAAO;MAC1EQ,QAAA,EAAAf;IAAA,EACH;EAAA,GAEJ;AAEJ,CAAC;AAEDZ,OAAA,CAAQsB,OAAA,GAAUA,OAAA;AAClBtB,OAAA,CAAQ8B,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}