{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nfunction getCurves(_ref) {\n  let {\n    size,\n    thickness,\n    sections,\n    renderRoundedLineCaps,\n    rootColor\n  } = _ref;\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n  const curvesInOrder = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n  curves.push({\n    sum,\n    offset,\n    data: {\n      color: rootColor\n    },\n    root: true\n  });\n  curvesInOrder.push(_objectSpread(_objectSpread({}, curves[curves.length - 1]), {}, {\n    lineRoundCaps: false\n  }));\n  if (curves.length > 2) {\n    curvesInOrder.push(_objectSpread(_objectSpread({}, curves[0]), {}, {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    curvesInOrder.push(_objectSpread(_objectSpread({}, curves[curves.length - 2]), {}, {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push(_objectSpread(_objectSpread({}, curves[i]), {}, {\n        lineRoundCaps: false\n      }));\n    }\n  } else {\n    curvesInOrder.push(_objectSpread(_objectSpread({}, curves[0]), {}, {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n  }\n  return curvesInOrder;\n}\nexport { getCurves };","map":{"version":3,"names":["getCurves","_ref","size","thickness","sections","renderRoundedLineCaps","rootColor","sum","reduce","acc","current","value","accumulated","Math","PI","offset","curves","curvesInOrder","i","length","push","data","root","color","_objectSpread","lineRoundCaps"],"sources":["/Users/ansarzeinulla/Desktop/ctrl-freak/widget-frontend/node_modules/@mantine/core/src/components/RingProgress/get-curves/get-curves.ts"],"sourcesContent":["import type { MantineColor } from '../../../core';\n\ninterface CurveData extends React.ComponentPropsWithRef<'circle'> {\n  value: number;\n  color: MantineColor;\n  tooltip?: React.ReactNode;\n}\n\ninterface RootCurveData extends React.ComponentPropsWithRef<'circle'> {\n  color?: MantineColor;\n}\n\ninterface GetCurves {\n  sections: CurveData[];\n  size: number;\n  thickness: number;\n  renderRoundedLineCaps: boolean | undefined;\n  rootColor?: MantineColor;\n}\n\ninterface Curve {\n  sum: number;\n  offset: number;\n  root: boolean;\n  data: CurveData | RootCurveData;\n  lineRoundCaps?: boolean;\n}\n\nexport function getCurves({\n  size,\n  thickness,\n  sections,\n  renderRoundedLineCaps,\n  rootColor,\n}: GetCurves) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves: Curve[] = [];\n  const curvesInOrder: Curve[] = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({ sum, offset, data: sections[i], root: false });\n    offset -= (sections[i].value / 100) * accumulated;\n  }\n\n  curves.push({ sum, offset, data: { color: rootColor }, root: true });\n\n  // Reorder curves to layer appropriately and selectively set caps to round\n\n  curvesInOrder.push({ ...curves[curves.length - 1], lineRoundCaps: false });\n  if (curves.length > 2) {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n    curvesInOrder.push({ ...curves[curves.length - 2], lineRoundCaps: renderRoundedLineCaps });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({ ...curves[i], lineRoundCaps: false });\n    }\n  } else {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n  }\n\n  return curvesInOrder;\n}\n"],"mappings":";;;AA4BO,SAASA,UAAAC,IAAA,EAMF;EAAA,IANY;IACxBC,IAAA;IACAC,SAAA;IACAC,QAAA;IACAC,qBAAA;IACAC;EACF,IAAAL,IAAA;EACE,MAAMM,GAAA,GAAMH,QAAA,CAASI,MAAA,CAAO,CAACC,GAAA,EAAKC,OAAA,KAAYD,GAAA,GAAMC,OAAA,CAAQC,KAAA,EAAO,CAAC;EACpE,MAAMC,WAAA,GAAcC,IAAA,CAAKC,EAAA,KAAOZ,IAAA,GAAO,MAAMC,SAAA,GAAY,KAAK,KAAK;EACnE,IAAIY,MAAA,GAASH,WAAA;EACb,MAAMI,MAAA,GAAkB,EAAC;EACzB,MAAMC,aAAA,GAAyB,EAAC;EAEhC,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAId,QAAA,CAASe,MAAA,EAAQD,CAAA,IAAK,GAAG;IAC3CF,MAAA,CAAOI,IAAA,CAAK;MAAEb,GAAA;MAAKQ,MAAA;MAAQM,IAAA,EAAMjB,QAAA,CAASc,CAAC;MAAGI,IAAA,EAAM;IAAA,CAAO;IAC3DP,MAAA,IAAWX,QAAA,CAASc,CAAC,EAAEP,KAAA,GAAQ,MAAOC,WAAA;EACxC;EAEAI,MAAA,CAAOI,IAAA,CAAK;IAAEb,GAAA;IAAKQ,MAAA;IAAQM,IAAA,EAAM;MAAEE,KAAA,EAAOjB;IAAA,CAAU;IAAGgB,IAAA,EAAM;EAAA,CAAM;EAInEL,aAAA,CAAcG,IAAA,CAAAI,aAAA,CAAAA,aAAA,KAAUR,MAAA,CAAOA,MAAA,CAAOG,MAAA,GAAS,CAAC;IAAGM,aAAA,EAAe;EAAA,EAAO;EACzE,IAAIT,MAAA,CAAOG,MAAA,GAAS,GAAG;IACrBF,aAAA,CAAcG,IAAA,CAAAI,aAAA,CAAAA,aAAA,KAAUR,MAAA,CAAO,CAAC;MAAGS,aAAA,EAAepB;IAAA,EAAuB;IACzEY,aAAA,CAAcG,IAAA,CAAAI,aAAA,CAAAA,aAAA,KAAUR,MAAA,CAAOA,MAAA,CAAOG,MAAA,GAAS,CAAC;MAAGM,aAAA,EAAepB;IAAA,EAAuB;IACzF,SAASa,CAAA,GAAI,GAAGA,CAAA,IAAKF,MAAA,CAAOG,MAAA,GAAS,GAAGD,CAAA,IAAK,GAAG;MAC9CD,aAAA,CAAcG,IAAA,CAAAI,aAAA,CAAAA,aAAA,KAAUR,MAAA,CAAOE,CAAC;QAAGO,aAAA,EAAe;MAAA,EAAO;IAC3D;EACF,OAAO;IACLR,aAAA,CAAcG,IAAA,CAAAI,aAAA,CAAAA,aAAA,KAAUR,MAAA,CAAO,CAAC;MAAGS,aAAA,EAAepB;IAAA,EAAuB;EAC3E;EAEA,OAAOY,aAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}